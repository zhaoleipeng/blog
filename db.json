{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/发布订阅与观察者区别.png","path":"images/发布订阅与观察者区别.png","modified":1,"renderable":0},{"_id":"source/images/发布订阅.png","path":"images/发布订阅.png","modified":1,"renderable":0},{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/favicon.svg","path":"images/favicon.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image.png","path":"images/og_image.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/og_image1.png","path":"images/og_image1.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1},{"_id":"themes/icarus/source/images/icon.png","path":"images/icon.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1558610069349},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1558610069350},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1558610069350},{"_id":"themes/icarus/_config.yml","hash":"8b83207fd54f4429c2bb12586fc8b1704c32278c","modified":1559270081757},{"_id":"source/CNAME","hash":"27ab2e5dd6864bfb09b48c2cc7b8d584b1a1607a","modified":1558669644433},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1558610069385},{"_id":"source/_posts/2019-05-23-some-talk.md","hash":"cb2d858c72cd0638239a7076b1ac4b4244131dcd","modified":1558691536643},{"_id":"source/_posts/2019-05-24-redis-basic.md","hash":"a7ade9b187b6f5dbf2cb305bfefc5bfd7449bb05","modified":1559270177025},{"_id":"source/_posts/2019-05-24-start-up-business.md","hash":"0eca5bfde216818a7db55710d2918e98434515d2","modified":1559287690641},{"_id":"source/_posts/2019-05-30-something-about-mq.md","hash":"dfd321190cf7042721d8d3b46e6f05d4fe182558","modified":1559289467274},{"_id":"source/_posts/2019-06-06-database-basic.md","hash":"a30edc1b6caa309977c5f28232065cb1513306b2","modified":1559814784886},{"_id":"source/images/发布订阅与观察者区别.png","hash":"dc31d346b908d96668a59429e92532c69854d4a8","modified":1559275607004},{"_id":"source/images/发布订阅.png","hash":"7855280cacdc6df3625b282e8309df542af418ef","modified":1559275600317},{"_id":"themes/icarus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558610069334},{"_id":"themes/icarus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558609865350},{"_id":"themes/icarus/.git/config","hash":"965ef2ab67fe8b8aa4fb072307ee50d7cf6b31fe","modified":1558610069338},{"_id":"themes/icarus/.git/index","hash":"f4b4ded8ecc22064db9f2b53328457229a144eaf","modified":1558664574593},{"_id":"themes/icarus/.git/packed-refs","hash":"c4c51a674bb5bb3cea9abff2706b1c263581c521","modified":1558610069331},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1558610069349},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1558610069361},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1558610069362},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1558610069361},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1558610069361},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1558610069362},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1558610069362},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1558610069362},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1558610069363},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1558610069363},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1558610069363},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1558610069363},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1558610069364},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1558610069365},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1558610069365},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1558610069365},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1558610069374},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1558610069374},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1558610069374},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1558610069379},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1558610069382},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1558610069382},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1558610069386},{"_id":"themes/icarus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558609865353},{"_id":"themes/icarus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1558609865352},{"_id":"themes/icarus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1558609865352},{"_id":"themes/icarus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558609865351},{"_id":"themes/icarus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1558609865353},{"_id":"themes/icarus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1558609865353},{"_id":"themes/icarus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1558609865351},{"_id":"themes/icarus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1558609865351},{"_id":"themes/icarus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1558609865352},{"_id":"themes/icarus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1558609865353},{"_id":"themes/icarus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1558609865354},{"_id":"themes/icarus/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558609865350},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1558610069352},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1558610069352},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1558610069352},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1558610069354},{"_id":"themes/icarus/.git/logs/HEAD","hash":"be43626d48f8564bbb0936f00f6bfae9131021a4","modified":1558610069336},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1558610069354},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1558610069355},{"_id":"themes/icarus/includes/helpers/site.js","hash":"f154ddb0dac79fd28ced2b518f8052b42555d0c9","modified":1558610069356},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1558610069355},{"_id":"themes/icarus/includes/helpers/page.js","hash":"50dab1e4ecef55cd090625f91c5456b801e307f2","modified":1558610069355},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1558610069353},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1558610069353},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1558610069353},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1558610069354},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1558610069356},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"4b84b08214cc21feaa4322357f0bec800bfca826","modified":1558610069356},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1558610069356},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1558610069351},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1558610069357},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1558610069357},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1558610069357},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"70abe77d3664176ec977316522014ce7e0aa439d","modified":1558610069358},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1558610069358},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1558610069358},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1558610069359},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1558610069359},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1558610069359},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1558610069359},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1558610069360},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1558610069360},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1558610069360},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1558610069361},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1558610069366},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1558610069367},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1558610069368},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"ef01396e64ab4f6e62155f0b357bcd903138d611","modified":1558610069369},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"033fb890dc1de71f7d3b97061d0d75f4564bd09a","modified":1558610069369},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1558610069369},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1558610069370},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1558610069370},{"_id":"themes/icarus/layout/common/article.ejs","hash":"76e4b72b62cf3e34227980aa8c7161ee27b57a7a","modified":1558610069370},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"dc91946bfe2c25507927cffc7f97fb445e839462","modified":1558610069371},{"_id":"themes/icarus/layout/common/head.ejs","hash":"12506ec5e7970eafdfde92c8d2ea44a40f1ba141","modified":1558610069371},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"5082ea45df0f79f955143177287d92bcf3832fcf","modified":1558610069371},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1558610069371},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1558610069372},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1558610069372},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1558610069372},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1558610069373},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1558610069373},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1558610069373},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1558610069375},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1558610069375},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1558610069375},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1558610069376},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1558610069376},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1558610069377},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1558610069377},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1558610069378},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1558610069378},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1558610069378},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1558610069379},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1558610069380},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1558610069380},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1558610069380},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1558610069381},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1558610069381},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1558610069381},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1558610069381},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1558610069382},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1558610069383},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1558610069383},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1558610069383},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"af05fb29b2b4e221bc50f61c1a85bb1f8c6cab89","modified":1558610069383},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1558610069384},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1558610069384},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1558610069385},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"71c845422597f8213bc12d35ac39ae9bdc5aef14","modified":1558691064092},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1558610069386},{"_id":"themes/icarus/source/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1558610069386},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1558610069387},{"_id":"themes/icarus/source/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1558610069387},{"_id":"themes/icarus/source/css/style.styl","hash":"8df581f6d748c7268b93c9f35549e757cd999bbd","modified":1558610069387},{"_id":"themes/icarus/source/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1558610069388},{"_id":"themes/icarus/source/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1558610069389},{"_id":"themes/icarus/source/images/og_image.png","hash":"a7cc2c37dbb88bbf5b1a5c84153dadef46cfb280","modified":1558612027221},{"_id":"themes/icarus/source/images/og_image1.png","hash":"af58aa41c56d3561a879a4f381766ab3ee3314c8","modified":1558612700810},{"_id":"themes/icarus/source/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1558610069390},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1558610069391},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1558610069391},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1558610069392},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1558610069392},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1558610069392},{"_id":"themes/icarus/source/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1558610069393},{"_id":"themes/icarus/source/images/avatar.png","hash":"a163892ebca4a3b0eb471f1d4d9096b74716390c","modified":1558611519946},{"_id":"themes/icarus/source/images/icon.png","hash":"a163892ebca4a3b0eb471f1d4d9096b74716390c","modified":1558669710087},{"_id":"themes/icarus/.git/refs/heads/master","hash":"641c7bf5c5c0e5795ce34c7b45c439abc74e24d9","modified":1558610069335},{"_id":"themes/icarus/.git/objects/pack/pack-85c428d5d8a9f2a2713e74571fd6771d7a6a3577.idx","hash":"c29737e1cd2d7c6d133f37497c78a46ab398b8b1","modified":1558610069314},{"_id":"themes/icarus/.git/logs/refs/heads/master","hash":"be43626d48f8564bbb0936f00f6bfae9131021a4","modified":1558610069336},{"_id":"themes/icarus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558610069334},{"_id":"themes/icarus/.git/logs/refs/remotes/origin/HEAD","hash":"be43626d48f8564bbb0936f00f6bfae9131021a4","modified":1558610069334},{"_id":"themes/icarus/.git/objects/pack/pack-85c428d5d8a9f2a2713e74571fd6771d7a6a3577.pack","hash":"164bca978cf70ba258f7ea907cbd2bf4cba236a5","modified":1558610069312},{"_id":"public/content.json","hash":"63ceb351b47542052d050a48085cd6e253063fe8","modified":1559814801113},{"_id":"public/2019/06/06/database-basic/index.html","hash":"126f7d1e005e86d341e5f7cbfe951fca825b611b","modified":1559814803353},{"_id":"public/2019/05/30/something-about-mq/index.html","hash":"5c38271255424e278d4ef93a95cfeb9ffbf476f2","modified":1559814803353},{"_id":"public/2019/05/24/redis-basic/index.html","hash":"83495c4e8c6d109598427f82b44c6d510c0bf421","modified":1559814803354},{"_id":"public/2019/05/24/start-up-business/index.html","hash":"b0d781b39ff4d702b8618439e367c9c8684e65cb","modified":1559814803354},{"_id":"public/2019/05/23/some-talk/index.html","hash":"dbb3fdc543ffe52f5046a8d901ffc93abad16fa5","modified":1559814803354},{"_id":"public/archives/index.html","hash":"26d10bde3731d5cfaf3a9f89559ad0c9ff5dccf7","modified":1559814803354},{"_id":"public/archives/2019/index.html","hash":"3ab938a17be4c1a95f898918551a8b84e5d7a84a","modified":1559814803354},{"_id":"public/archives/2019/05/index.html","hash":"9222244cbccc7a20e29b71704d9c407fd7546509","modified":1559814803354},{"_id":"public/archives/2019/06/index.html","hash":"b6e4da8e8e1dfd277fced7cac50c40c2e239c09d","modified":1559814803355},{"_id":"public/index.html","hash":"c542a2a972d78dec3996d9ce8654c6a7fbf64a2a","modified":1559814803355},{"_id":"public/tags/笔记/index.html","hash":"cebe0136372f117d4e616832acb891254b8c2988","modified":1559814803355},{"_id":"public/tags/观点/index.html","hash":"3e189b951f73bfc3f1c2a252503264842e63740d","modified":1559814803356},{"_id":"public/tags/数据库/index.html","hash":"8e2c58ce5d895715788246e5c5687ed79037537e","modified":1559814803356},{"_id":"public/tags/redis/index.html","hash":"84285697f2811f959dfe2c227efda0b3199993f0","modified":1559814803356},{"_id":"public/tags/消息队列/index.html","hash":"08d5529a4aeb4c3e1bb15e312b8cd39966d643f6","modified":1559814803356},{"_id":"public/tags/设计/index.html","hash":"bf1941754633ff5000545a6346a1f5081441283d","modified":1559814803356},{"_id":"public/tags/创业/index.html","hash":"9c6c246eb62f09ab7b79f9f95f2732c1fc2d41a3","modified":1559814803356},{"_id":"public/tags/思路/index.html","hash":"0a27bde5ded619398afc76a7d726e56ce1ae4929","modified":1559814803356},{"_id":"public/categories/技术/index.html","hash":"59223101fca7a419ed370b0c7491eda1475a3ec8","modified":1559814803356},{"_id":"public/categories/日记/index.html","hash":"939272d48a2a58b10db69581da0200bc857dc5ed","modified":1559814803356},{"_id":"public/categories/杂谈/index.html","hash":"559938838a9e88a084b619407f71c80275132b56","modified":1559814803357},{"_id":"public/categories/index.html","hash":"ea327f5d7ae2b0bd40c4ba6f49eb1879c655ee80","modified":1559814803357},{"_id":"public/tags/index.html","hash":"090972fe10f7f6665b065be1b09a4b58e491d755","modified":1559814803357},{"_id":"public/CNAME","hash":"27ab2e5dd6864bfb09b48c2cc7b8d584b1a1607a","modified":1559814803360},{"_id":"public/images/发布订阅与观察者区别.png","hash":"dc31d346b908d96668a59429e92532c69854d4a8","modified":1559814803360},{"_id":"public/images/发布订阅.png","hash":"7855280cacdc6df3625b282e8309df542af418ef","modified":1559814803360},{"_id":"public/images/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":1559814803360},{"_id":"public/images/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":1559814803360},{"_id":"public/images/og_image.png","hash":"a7cc2c37dbb88bbf5b1a5c84153dadef46cfb280","modified":1559814803360},{"_id":"public/images/og_image1.png","hash":"af58aa41c56d3561a879a4f381766ab3ee3314c8","modified":1559814803360},{"_id":"public/images/thumbnail.svg","hash":"b9c58ff09ed415e6cf08b42b35faa2bc000d5059","modified":1559814803360},{"_id":"public/images/avatar.png","hash":"a163892ebca4a3b0eb471f1d4d9096b74716390c","modified":1559814803544},{"_id":"public/images/icon.png","hash":"a163892ebca4a3b0eb471f1d4d9096b74716390c","modified":1559814803545},{"_id":"public/css/back-to-top.css","hash":"5805bee2445e997d64dfe526b08b5fe0bce357eb","modified":1559814803549},{"_id":"public/css/insight.css","hash":"22943a610d5cfffedfb823c692f4db2b1f37a4c9","modified":1559814803549},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1559814803549},{"_id":"public/css/search.css","hash":"d6a59894819e7431d42b249b6c2fc9ff3b99a488","modified":1559814803549},{"_id":"public/css/style.css","hash":"6fd3065ac6a615be7809704b145bad6106847ff5","modified":1559814803549},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1559814803549},{"_id":"public/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1559814803549},{"_id":"public/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1559814803550},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1559814803550},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1559814803550},{"_id":"public/js/main.js","hash":"3357a1798a994afad0a849a679ca2ed6e0ce2424","modified":1559814803550}],"Category":[{"name":"日记","_id":"cjwkhgipq0002coc4gcsqjlkx"},{"name":"技术","_id":"cjwkhgiq00007coc4u6lv57nx"},{"name":"杂谈","_id":"cjwkhgiq6000hcoc4r8ic0nik"}],"Data":[],"Page":[],"Post":[{"title":"996?","date":"2019-05-23T11:19:27.000Z","_content":"\n中国社科院曾经发布过一个报告，说2017年我国每天工作时间超过8小时的人，占了42.2%。而且这不仅仅是中国的情况，日本，美国这些发达国家也普遍存在过劳。\n\n<!-- more -->\n这种现象虽然普遍，而且我们都身在其中。但仔细想想就会发现，其实\"过劳\"这件事，不太符合逻辑。\n\n我们都知道，近两百年，人类整体的生产效率，那是一飞冲天啊。按说，生产效率上去了，单位工作时间的产出高了，那相应的工作时间应该减少才对啊。所以经济学家凯恩斯在1930年曾经做出一个有名的预测，他认为到2030年，人类的劳动时间每周15小时，就足够了。\n\n现实是，很多互联网公司甚至开创了996模式，上午9点上班，下午9点下班，一周工作6天。我们还有724模式，一周7天24小时随时待命。你看，凯恩斯在1930年的预测错了。错的离谱，方向都错了。\n\n问题是：他为什么错了？工具越高级，应该干活越省力才对。那为什么我们反而更累了呢？\n\n《过劳时代》这本书里提供了很多解释。比如，全球化把所有人拉到了同一个竞争平面上。你是在一个地方工作，但你不是在和一个地方的人竞争。一个美国的工人是和一个中国的工人，甚至是非洲的工人在竞争。所以，竞争强度增大了。再比如，消费主义盛行。你和身边的人越来越多的攀比，比房子比车比包包比度假酒店，你想挣钱的欲望就越大，所以只能拼命干活。等等。\n\n但是，我觉得最有说服力的解释，不是这些。问题的根子不在别的，就在于生产工具本身。它越进化、越高级、效率越高、越好用，我们就用得越多，所以工作时间就越长。\n\n这是一个很有意思的悖论。举个例子，过去我们上班，必须得到单位才行，和同事见了面，才能展开协作。很不方便，后来有了电脑，有了邮件，有了微信，按说是更方便、更省时间了。但是结果呢？你知道的，老板能随时在微信群里抓到我们说事，周末也行，深更半夜也行。你上班的时间能不更长吗？\n\n表面上看，工具的发明，总是解决一个现实问题的。有了斧头，砍树就更快。有了汽车，走得就更远。这是工具给我们提供的第一样东西，叫便利性。\n\n但是，如果你只看到这一面，就忽略了一个更重要的东西，这也是工具带来的。你要解决问题，任何问题都是有它的时间空间边界的，工具一升级，边界内的问题，是被更高效的解决了，但是，这个时空边界本身也被打破了。于是，会出现新的问题，而且是更大的问题。\n\n比如说，当年人们用马车，非常慢。后来，给车装上了发动机，这就成了汽车，速度提上去了。在有限的时空边界内，这就是一项改善。确定无疑的改善吧？那你说，会因为速度提上去了，所以，人旅行用的时间少了，所以车就会变少吗？当然不是啊。因为汽车打破了原来的时空限制，出现了全新的可能性。你就想，原来坐马车，你至少要带一个马车夫。现在呢？可以开汽车，一个人就可以开车，没有马车夫打扰了。车不仅是交通工具，它还是一个移动的私人空间了。所以就出现了一种新的行为方式，没有确定目的的开车兜风，这种行为模式就出现了。不去哪儿，就是带上女朋友开车去看看诗和远方。车的使用当然就越来越多。\n\n当然，现实中远远不止是这一种情况了。因为车可以走得更远，所以，就一定会走得更远。因为可以走得更远，所以，整个社会的假设就变了，汽车旅馆就出现了，郊区景点和度假村就出现了，远离城区的购物中心，像奥特莱斯就出现了。这就反过来逼迫，你如果不能有汽车，你不能走得更远，你就没有办法享受社会基础设施提供的便利。它就会走到这个程度。\n\n你看，这个过程就是：工具不仅为你解决了问题。工具还在你始料未及的地方，推开了一扇新的可能性的大门。这扇大门一旦推开，就再也关不上了，后面的人就会一涌而出，只会把门撑得越来越宽。这就是工具对人的反向塑造。\n\n有句话叫，身怀利刃杀心自起。你身上有把刀，看见什么都想用上。对，工具虽然只是提供了某种可能，但是人性使然，我们总是倾向于要把这种可能性变成现实性。工具在可能性上推开了多大的空间，我们就一定会倾向于把这个空间填满。\n\n理解了这个逻辑，再回到今天的主题，为什么劳动工具效率越来越高，我们却越来越忙呢？这么看来，答案就非常简单了。和全球化，消费主义有关，但关系没那么大。因为劳动工具让我们工作的可能性越来越高，我们就一定会把这个可能性填满，我们当然就会一直工作，所以越来越忙。\n\n《过劳时代》这本书的解读人，李南南老师还开了一个脑洞。他说:\n\n假如未来，你的工资不是按月计算，而是按秒计算。在你的面前，有一个计时器，你每多工作一秒，你的账上马上就会多一毛钱。结果会是什么？表面看起来，这对你只有好处没有坏处。首先，每天工作8小时，这就是一天2880块钱，不少吧？你收入提高了。更重要的是，你碎片时间的工作，比如，吃饭间歇、睡觉前给同事回个工作微信，也能计算报酬了，对你更公平了。好事吧？好工具。\n\n但这是在你现在的时空边界下看问题。真实情况可能是，这个可能性的大门一旦打开，大多数人因为碎片时间也能挣钱，会工作到筋疲力尽才会停。如果不信，你现在到网吧里去看看那些打游戏挣积分通宵不睡的人，你就知道，如果真有那么一天，工作到筋疲力尽那就是我们的未来。\n\n\n> 来自《过劳时代》的解读\n> --- [为什么我们的工作时间越来越长？](https://www.ljsw.io/knowl/article/FH.html)","source":"_posts/2019-05-23-some-talk.md","raw":"---\ntitle: 996?\ndate: 2019-05-23 19:19:27\ntags: [ 笔记, 观点 ]\ncategories: [ 日记 ]\n---\n\n中国社科院曾经发布过一个报告，说2017年我国每天工作时间超过8小时的人，占了42.2%。而且这不仅仅是中国的情况，日本，美国这些发达国家也普遍存在过劳。\n\n<!-- more -->\n这种现象虽然普遍，而且我们都身在其中。但仔细想想就会发现，其实\"过劳\"这件事，不太符合逻辑。\n\n我们都知道，近两百年，人类整体的生产效率，那是一飞冲天啊。按说，生产效率上去了，单位工作时间的产出高了，那相应的工作时间应该减少才对啊。所以经济学家凯恩斯在1930年曾经做出一个有名的预测，他认为到2030年，人类的劳动时间每周15小时，就足够了。\n\n现实是，很多互联网公司甚至开创了996模式，上午9点上班，下午9点下班，一周工作6天。我们还有724模式，一周7天24小时随时待命。你看，凯恩斯在1930年的预测错了。错的离谱，方向都错了。\n\n问题是：他为什么错了？工具越高级，应该干活越省力才对。那为什么我们反而更累了呢？\n\n《过劳时代》这本书里提供了很多解释。比如，全球化把所有人拉到了同一个竞争平面上。你是在一个地方工作，但你不是在和一个地方的人竞争。一个美国的工人是和一个中国的工人，甚至是非洲的工人在竞争。所以，竞争强度增大了。再比如，消费主义盛行。你和身边的人越来越多的攀比，比房子比车比包包比度假酒店，你想挣钱的欲望就越大，所以只能拼命干活。等等。\n\n但是，我觉得最有说服力的解释，不是这些。问题的根子不在别的，就在于生产工具本身。它越进化、越高级、效率越高、越好用，我们就用得越多，所以工作时间就越长。\n\n这是一个很有意思的悖论。举个例子，过去我们上班，必须得到单位才行，和同事见了面，才能展开协作。很不方便，后来有了电脑，有了邮件，有了微信，按说是更方便、更省时间了。但是结果呢？你知道的，老板能随时在微信群里抓到我们说事，周末也行，深更半夜也行。你上班的时间能不更长吗？\n\n表面上看，工具的发明，总是解决一个现实问题的。有了斧头，砍树就更快。有了汽车，走得就更远。这是工具给我们提供的第一样东西，叫便利性。\n\n但是，如果你只看到这一面，就忽略了一个更重要的东西，这也是工具带来的。你要解决问题，任何问题都是有它的时间空间边界的，工具一升级，边界内的问题，是被更高效的解决了，但是，这个时空边界本身也被打破了。于是，会出现新的问题，而且是更大的问题。\n\n比如说，当年人们用马车，非常慢。后来，给车装上了发动机，这就成了汽车，速度提上去了。在有限的时空边界内，这就是一项改善。确定无疑的改善吧？那你说，会因为速度提上去了，所以，人旅行用的时间少了，所以车就会变少吗？当然不是啊。因为汽车打破了原来的时空限制，出现了全新的可能性。你就想，原来坐马车，你至少要带一个马车夫。现在呢？可以开汽车，一个人就可以开车，没有马车夫打扰了。车不仅是交通工具，它还是一个移动的私人空间了。所以就出现了一种新的行为方式，没有确定目的的开车兜风，这种行为模式就出现了。不去哪儿，就是带上女朋友开车去看看诗和远方。车的使用当然就越来越多。\n\n当然，现实中远远不止是这一种情况了。因为车可以走得更远，所以，就一定会走得更远。因为可以走得更远，所以，整个社会的假设就变了，汽车旅馆就出现了，郊区景点和度假村就出现了，远离城区的购物中心，像奥特莱斯就出现了。这就反过来逼迫，你如果不能有汽车，你不能走得更远，你就没有办法享受社会基础设施提供的便利。它就会走到这个程度。\n\n你看，这个过程就是：工具不仅为你解决了问题。工具还在你始料未及的地方，推开了一扇新的可能性的大门。这扇大门一旦推开，就再也关不上了，后面的人就会一涌而出，只会把门撑得越来越宽。这就是工具对人的反向塑造。\n\n有句话叫，身怀利刃杀心自起。你身上有把刀，看见什么都想用上。对，工具虽然只是提供了某种可能，但是人性使然，我们总是倾向于要把这种可能性变成现实性。工具在可能性上推开了多大的空间，我们就一定会倾向于把这个空间填满。\n\n理解了这个逻辑，再回到今天的主题，为什么劳动工具效率越来越高，我们却越来越忙呢？这么看来，答案就非常简单了。和全球化，消费主义有关，但关系没那么大。因为劳动工具让我们工作的可能性越来越高，我们就一定会把这个可能性填满，我们当然就会一直工作，所以越来越忙。\n\n《过劳时代》这本书的解读人，李南南老师还开了一个脑洞。他说:\n\n假如未来，你的工资不是按月计算，而是按秒计算。在你的面前，有一个计时器，你每多工作一秒，你的账上马上就会多一毛钱。结果会是什么？表面看起来，这对你只有好处没有坏处。首先，每天工作8小时，这就是一天2880块钱，不少吧？你收入提高了。更重要的是，你碎片时间的工作，比如，吃饭间歇、睡觉前给同事回个工作微信，也能计算报酬了，对你更公平了。好事吧？好工具。\n\n但这是在你现在的时空边界下看问题。真实情况可能是，这个可能性的大门一旦打开，大多数人因为碎片时间也能挣钱，会工作到筋疲力尽才会停。如果不信，你现在到网吧里去看看那些打游戏挣积分通宵不睡的人，你就知道，如果真有那么一天，工作到筋疲力尽那就是我们的未来。\n\n\n> 来自《过劳时代》的解读\n> --- [为什么我们的工作时间越来越长？](https://www.ljsw.io/knowl/article/FH.html)","slug":"some-talk","published":1,"updated":"2019-05-24T09:52:16.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwkhgipk0000coc4j39kytzx","content":"<p>中国社科院曾经发布过一个报告，说2017年我国每天工作时间超过8小时的人，占了42.2%。而且这不仅仅是中国的情况，日本，美国这些发达国家也普遍存在过劳。</p>\n<a id=\"more\"></a>\n<p>这种现象虽然普遍，而且我们都身在其中。但仔细想想就会发现，其实”过劳”这件事，不太符合逻辑。</p>\n<p>我们都知道，近两百年，人类整体的生产效率，那是一飞冲天啊。按说，生产效率上去了，单位工作时间的产出高了，那相应的工作时间应该减少才对啊。所以经济学家凯恩斯在1930年曾经做出一个有名的预测，他认为到2030年，人类的劳动时间每周15小时，就足够了。</p>\n<p>现实是，很多互联网公司甚至开创了996模式，上午9点上班，下午9点下班，一周工作6天。我们还有724模式，一周7天24小时随时待命。你看，凯恩斯在1930年的预测错了。错的离谱，方向都错了。</p>\n<p>问题是：他为什么错了？工具越高级，应该干活越省力才对。那为什么我们反而更累了呢？</p>\n<p>《过劳时代》这本书里提供了很多解释。比如，全球化把所有人拉到了同一个竞争平面上。你是在一个地方工作，但你不是在和一个地方的人竞争。一个美国的工人是和一个中国的工人，甚至是非洲的工人在竞争。所以，竞争强度增大了。再比如，消费主义盛行。你和身边的人越来越多的攀比，比房子比车比包包比度假酒店，你想挣钱的欲望就越大，所以只能拼命干活。等等。</p>\n<p>但是，我觉得最有说服力的解释，不是这些。问题的根子不在别的，就在于生产工具本身。它越进化、越高级、效率越高、越好用，我们就用得越多，所以工作时间就越长。</p>\n<p>这是一个很有意思的悖论。举个例子，过去我们上班，必须得到单位才行，和同事见了面，才能展开协作。很不方便，后来有了电脑，有了邮件，有了微信，按说是更方便、更省时间了。但是结果呢？你知道的，老板能随时在微信群里抓到我们说事，周末也行，深更半夜也行。你上班的时间能不更长吗？</p>\n<p>表面上看，工具的发明，总是解决一个现实问题的。有了斧头，砍树就更快。有了汽车，走得就更远。这是工具给我们提供的第一样东西，叫便利性。</p>\n<p>但是，如果你只看到这一面，就忽略了一个更重要的东西，这也是工具带来的。你要解决问题，任何问题都是有它的时间空间边界的，工具一升级，边界内的问题，是被更高效的解决了，但是，这个时空边界本身也被打破了。于是，会出现新的问题，而且是更大的问题。</p>\n<p>比如说，当年人们用马车，非常慢。后来，给车装上了发动机，这就成了汽车，速度提上去了。在有限的时空边界内，这就是一项改善。确定无疑的改善吧？那你说，会因为速度提上去了，所以，人旅行用的时间少了，所以车就会变少吗？当然不是啊。因为汽车打破了原来的时空限制，出现了全新的可能性。你就想，原来坐马车，你至少要带一个马车夫。现在呢？可以开汽车，一个人就可以开车，没有马车夫打扰了。车不仅是交通工具，它还是一个移动的私人空间了。所以就出现了一种新的行为方式，没有确定目的的开车兜风，这种行为模式就出现了。不去哪儿，就是带上女朋友开车去看看诗和远方。车的使用当然就越来越多。</p>\n<p>当然，现实中远远不止是这一种情况了。因为车可以走得更远，所以，就一定会走得更远。因为可以走得更远，所以，整个社会的假设就变了，汽车旅馆就出现了，郊区景点和度假村就出现了，远离城区的购物中心，像奥特莱斯就出现了。这就反过来逼迫，你如果不能有汽车，你不能走得更远，你就没有办法享受社会基础设施提供的便利。它就会走到这个程度。</p>\n<p>你看，这个过程就是：工具不仅为你解决了问题。工具还在你始料未及的地方，推开了一扇新的可能性的大门。这扇大门一旦推开，就再也关不上了，后面的人就会一涌而出，只会把门撑得越来越宽。这就是工具对人的反向塑造。</p>\n<p>有句话叫，身怀利刃杀心自起。你身上有把刀，看见什么都想用上。对，工具虽然只是提供了某种可能，但是人性使然，我们总是倾向于要把这种可能性变成现实性。工具在可能性上推开了多大的空间，我们就一定会倾向于把这个空间填满。</p>\n<p>理解了这个逻辑，再回到今天的主题，为什么劳动工具效率越来越高，我们却越来越忙呢？这么看来，答案就非常简单了。和全球化，消费主义有关，但关系没那么大。因为劳动工具让我们工作的可能性越来越高，我们就一定会把这个可能性填满，我们当然就会一直工作，所以越来越忙。</p>\n<p>《过劳时代》这本书的解读人，李南南老师还开了一个脑洞。他说:</p>\n<p>假如未来，你的工资不是按月计算，而是按秒计算。在你的面前，有一个计时器，你每多工作一秒，你的账上马上就会多一毛钱。结果会是什么？表面看起来，这对你只有好处没有坏处。首先，每天工作8小时，这就是一天2880块钱，不少吧？你收入提高了。更重要的是，你碎片时间的工作，比如，吃饭间歇、睡觉前给同事回个工作微信，也能计算报酬了，对你更公平了。好事吧？好工具。</p>\n<p>但这是在你现在的时空边界下看问题。真实情况可能是，这个可能性的大门一旦打开，大多数人因为碎片时间也能挣钱，会工作到筋疲力尽才会停。如果不信，你现在到网吧里去看看那些打游戏挣积分通宵不睡的人，你就知道，如果真有那么一天，工作到筋疲力尽那就是我们的未来。</p>\n<blockquote>\n<p>来自《过劳时代》的解读<br>— <a href=\"https://www.ljsw.io/knowl/article/FH.html\" target=\"_blank\" rel=\"noopener\">为什么我们的工作时间越来越长？</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>中国社科院曾经发布过一个报告，说2017年我国每天工作时间超过8小时的人，占了42.2%。而且这不仅仅是中国的情况，日本，美国这些发达国家也普遍存在过劳。</p>","more":"<p>这种现象虽然普遍，而且我们都身在其中。但仔细想想就会发现，其实”过劳”这件事，不太符合逻辑。</p>\n<p>我们都知道，近两百年，人类整体的生产效率，那是一飞冲天啊。按说，生产效率上去了，单位工作时间的产出高了，那相应的工作时间应该减少才对啊。所以经济学家凯恩斯在1930年曾经做出一个有名的预测，他认为到2030年，人类的劳动时间每周15小时，就足够了。</p>\n<p>现实是，很多互联网公司甚至开创了996模式，上午9点上班，下午9点下班，一周工作6天。我们还有724模式，一周7天24小时随时待命。你看，凯恩斯在1930年的预测错了。错的离谱，方向都错了。</p>\n<p>问题是：他为什么错了？工具越高级，应该干活越省力才对。那为什么我们反而更累了呢？</p>\n<p>《过劳时代》这本书里提供了很多解释。比如，全球化把所有人拉到了同一个竞争平面上。你是在一个地方工作，但你不是在和一个地方的人竞争。一个美国的工人是和一个中国的工人，甚至是非洲的工人在竞争。所以，竞争强度增大了。再比如，消费主义盛行。你和身边的人越来越多的攀比，比房子比车比包包比度假酒店，你想挣钱的欲望就越大，所以只能拼命干活。等等。</p>\n<p>但是，我觉得最有说服力的解释，不是这些。问题的根子不在别的，就在于生产工具本身。它越进化、越高级、效率越高、越好用，我们就用得越多，所以工作时间就越长。</p>\n<p>这是一个很有意思的悖论。举个例子，过去我们上班，必须得到单位才行，和同事见了面，才能展开协作。很不方便，后来有了电脑，有了邮件，有了微信，按说是更方便、更省时间了。但是结果呢？你知道的，老板能随时在微信群里抓到我们说事，周末也行，深更半夜也行。你上班的时间能不更长吗？</p>\n<p>表面上看，工具的发明，总是解决一个现实问题的。有了斧头，砍树就更快。有了汽车，走得就更远。这是工具给我们提供的第一样东西，叫便利性。</p>\n<p>但是，如果你只看到这一面，就忽略了一个更重要的东西，这也是工具带来的。你要解决问题，任何问题都是有它的时间空间边界的，工具一升级，边界内的问题，是被更高效的解决了，但是，这个时空边界本身也被打破了。于是，会出现新的问题，而且是更大的问题。</p>\n<p>比如说，当年人们用马车，非常慢。后来，给车装上了发动机，这就成了汽车，速度提上去了。在有限的时空边界内，这就是一项改善。确定无疑的改善吧？那你说，会因为速度提上去了，所以，人旅行用的时间少了，所以车就会变少吗？当然不是啊。因为汽车打破了原来的时空限制，出现了全新的可能性。你就想，原来坐马车，你至少要带一个马车夫。现在呢？可以开汽车，一个人就可以开车，没有马车夫打扰了。车不仅是交通工具，它还是一个移动的私人空间了。所以就出现了一种新的行为方式，没有确定目的的开车兜风，这种行为模式就出现了。不去哪儿，就是带上女朋友开车去看看诗和远方。车的使用当然就越来越多。</p>\n<p>当然，现实中远远不止是这一种情况了。因为车可以走得更远，所以，就一定会走得更远。因为可以走得更远，所以，整个社会的假设就变了，汽车旅馆就出现了，郊区景点和度假村就出现了，远离城区的购物中心，像奥特莱斯就出现了。这就反过来逼迫，你如果不能有汽车，你不能走得更远，你就没有办法享受社会基础设施提供的便利。它就会走到这个程度。</p>\n<p>你看，这个过程就是：工具不仅为你解决了问题。工具还在你始料未及的地方，推开了一扇新的可能性的大门。这扇大门一旦推开，就再也关不上了，后面的人就会一涌而出，只会把门撑得越来越宽。这就是工具对人的反向塑造。</p>\n<p>有句话叫，身怀利刃杀心自起。你身上有把刀，看见什么都想用上。对，工具虽然只是提供了某种可能，但是人性使然，我们总是倾向于要把这种可能性变成现实性。工具在可能性上推开了多大的空间，我们就一定会倾向于把这个空间填满。</p>\n<p>理解了这个逻辑，再回到今天的主题，为什么劳动工具效率越来越高，我们却越来越忙呢？这么看来，答案就非常简单了。和全球化，消费主义有关，但关系没那么大。因为劳动工具让我们工作的可能性越来越高，我们就一定会把这个可能性填满，我们当然就会一直工作，所以越来越忙。</p>\n<p>《过劳时代》这本书的解读人，李南南老师还开了一个脑洞。他说:</p>\n<p>假如未来，你的工资不是按月计算，而是按秒计算。在你的面前，有一个计时器，你每多工作一秒，你的账上马上就会多一毛钱。结果会是什么？表面看起来，这对你只有好处没有坏处。首先，每天工作8小时，这就是一天2880块钱，不少吧？你收入提高了。更重要的是，你碎片时间的工作，比如，吃饭间歇、睡觉前给同事回个工作微信，也能计算报酬了，对你更公平了。好事吧？好工具。</p>\n<p>但这是在你现在的时空边界下看问题。真实情况可能是，这个可能性的大门一旦打开，大多数人因为碎片时间也能挣钱，会工作到筋疲力尽才会停。如果不信，你现在到网吧里去看看那些打游戏挣积分通宵不睡的人，你就知道，如果真有那么一天，工作到筋疲力尽那就是我们的未来。</p>\n<blockquote>\n<p>来自《过劳时代》的解读<br>— <a href=\"https://www.ljsw.io/knowl/article/FH.html\" target=\"_blank\" rel=\"noopener\">为什么我们的工作时间越来越长？</a></p>\n</blockquote>"},{"title":"REDIS（一）：基础介绍","date":"2019-05-24T10:07:41.000Z","_content":"\n## 一、概述\n\nRedis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。\n\n键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。\n\nRedis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。\n\n<!-- more -->\n\n## 二、数据类型\n\n| 数据类型 | 可以存储的值 | 操作 |\n| :-: | :-: | :-: |\n| STRING | 字符串、整数或者浮点数 | 对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作 |\n| LIST | 列表 | 从两端压入或者弹出元素对单个或者多个元素进行修剪，只保留一个范围内的元素 |\n| SET | 无序集合 | 添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素 |\n| HASH | 包含键值对的无序散列表 | 添加、获取、移除单个键值对获取所有键值对检查某个键是否存在 |\n| ZSET | 有序集合 | 添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名 |\n\n> [What Redis data structures look like](https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/)\n\n### STRING\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png)](/CyC2018/CS-Notes/blob/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png)\n\n``` cmd\n> set hello world\nOK\n> get hello\n\"world\"\n> del hello\n(integer) 1\n> get hello\n(nil)\n```\n\n### LIST\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png)](/CyC2018/CS-Notes/blob/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png)\n\n``` cmd\n> rpush list-key item\n(integer) 1\n> rpush list-key item2\n(integer) 2\n> rpush list-key item\n(integer) 3\n\n> lrange list-key 0 -1\n1) \"item\"\n2) \"item2\"\n3) \"item\"\n\n> lindex list-key 1\n\"item2\"\n\n> lpop list-key\n\"item\"\n\n> lrange list-key 0 -1\n1) \"item2\"\n2) \"item\"\n```\n\n### SET\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png)](/CyC2018/CS-Notes/blob/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png)\n\n``` cmd\n> sadd set-key item\n(integer) 1\n> sadd set-key item2\n(integer) 1\n> sadd set-key item3\n(integer) 1\n> sadd set-key item\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item2\"\n3) \"item3\"\n\n> sismember set-key item4\n(integer) 0\n> sismember set-key item\n(integer) 1\n\n> srem set-key item2\n(integer) 1\n> srem set-key item2\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item3\"\n```\n\n### HASH\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png)](/CyC2018/CS-Notes/blob/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png)\n\n``` cmd\n> hset hash-key sub-key1 value1\n(integer) 1\n> hset hash-key sub-key2 value2\n(integer) 1\n> hset hash-key sub-key1 value1\n(integer) 0\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n3) \"sub-key2\"\n4) \"value2\"\n\n> hdel hash-key sub-key2\n(integer) 1\n> hdel hash-key sub-key2\n(integer) 0\n\n> hget hash-key sub-key1\n\"value1\"\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n```\n\n### ZSET\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png)](/CyC2018/CS-Notes/blob/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png)\n\n``` cmd\n> zadd zset-key 728 member1\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member1\"\n2) \"728\"\n3) \"member0\"\n4) \"982\"\n\n> zrangebyscore zset-key 0 800 withscores\n1) \"member1\"\n2) \"728\"\n\n> zrem zset-key member1\n(integer) 1\n> zrem zset-key member1\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member0\"\n2) \"982\"\n```\n\n## 三、数据结构\n\n### 字典\n\ndictht 是一个散列表结构，使用拉链法保存哈希冲突。\n\n``` C\n/* This is our hash table structure. Every dictionary has two of this as we\n * implement incremental rehashing, for the old to the new table. */\ntypedef struct dictht {\n    dictEntry **table;\n    unsigned long size;\n    unsigned long sizemask;\n    unsigned long used;\n} dictht;\n```\n\n``` C\ntypedef struct dictEntry {\n    void *key;\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n        double d;\n    } v;\n    struct dictEntry *next;\n} dictEntry;\n```\n\nRedis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。\n\n``` C\ntypedef struct dict {\n    dictType *type;\n    void *privdata;\n    dictht ht[2];\n    long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n    unsigned long iterators; /* number of iterators currently running */\n} dict;\n```\n\nrehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。\n\n渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。\n\n在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。\n\n采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。\n\n``` C\n/* Performs N steps of incremental rehashing. Returns 1 if there are still\n * keys to move from the old to the new hash table, otherwise 0 is returned.\n *\n * Note that a rehashing step consists in moving a bucket (that may have more\n * than one key as we use chaining) from the old to the new hash table, however\n * since part of the hash table may be composed of empty spaces, it is not\n * guaranteed that this function will rehash even a single bucket, since it\n * will visit at max N*10 empty buckets in total, otherwise the amount of\n * work it does would be unbound and the function may block for a long time. */\nint dictRehash(dict *d, int n) {\n    int empty_visits = n * 10; /* Max number of empty buckets to visit. */\n    if (!dictIsRehashing(d)) return 0;\n\n    while (n-- && d->ht[0].used != 0) {\n        dictEntry *de, *nextde;\n\n        /* Note that rehashidx can't overflow as we are sure there are more\n         * elements because ht[0].used != 0 */\n        assert(d->ht[0].size > (unsigned long) d->rehashidx);\n        while (d->ht[0].table[d->rehashidx] == NULL) {\n            d->rehashidx++;\n            if (--empty_visits == 0) return 1;\n        }\n        de = d->ht[0].table[d->rehashidx];\n        /* Move all the keys in this bucket from the old to the new hash HT */\n        while (de) {\n            uint64_t h;\n\n            nextde = de->next;\n            /* Get the index in the new hash table */\n            h = dictHashKey(d, de->key) & d->ht[1].sizemask;\n            de->next = d->ht[1].table[h];\n            d->ht[1].table[h] = de;\n            d->ht[0].used--;\n            d->ht[1].used++;\n            de = nextde;\n        }\n        d->ht[0].table[d->rehashidx] = NULL;\n        d->rehashidx++;\n    }\n\n    /* Check if we already rehashed the whole table... */\n    if (d->ht[0].used == 0) {\n        zfree(d->ht[0].table);\n        d->ht[0] = d->ht[1];\n        _dictReset(&d->ht[1]);\n        d->rehashidx = -1;\n        return 0;\n    }\n\n    /* More to rehash... */\n    return 1;\n}\n```\n\n### 跳跃表\n\n是有序集合的底层实现之一。\n\n跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png)](/CyC2018/CS-Notes/blob/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png)\n\n在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png)](/CyC2018/CS-Notes/blob/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png)\n\n与红黑树等平衡树相比，跳跃表具有以下优点：\n\n* 插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；\n* 更容易实现；\n* 支持无锁操作。\n\n## 四、使用场景\n\n### 计数器\n\n可以对 String 进行自增自减运算，从而实现计数器功能。\n\nRedis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。\n\n### 缓存\n\n将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。\n\n### 查找表\n\n例如 DNS 记录就很适合使用 Redis 进行存储。\n\n查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。\n\n### 消息队列\n\nList 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息\n\n不过最好使用 Kafka、RabbitMQ 等消息中间件。\n\n### 会话缓存\n\n可以使用 Redis 来统一存储多台应用服务器的会话信息。\n\n当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。\n\n### 分布式锁实现\n\n在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。\n\n可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。\n\n### 其它\n\nSet 可以实现交集、并集等操作，从而实现共同好友等功能。\n\nZSet 可以实现有序性操作，从而实现排行榜等功能。\n\n## 五、Redis 与 Memcached\n\n两者都是非关系型内存键值数据库，主要有以下不同：\n\n### 数据类型\n\nMemcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。\n\n### 数据持久化\n\nRedis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。\n\n### 分布式\n\nMemcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。\n\nRedis Cluster 实现了分布式的支持。\n\n### 内存管理机制\n\n* 在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。\n\n* Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。\n\n## 六、键的过期时间\n\nRedis 可以为每个键设置过期时间，当键过期时，会自动删除该键。\n\n对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。\n\n## 七、数据淘汰策略\n\n可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。\n\nRedis 具体有 6 种淘汰策略：\n\n| 策略 | 描述 |\n| :-: | :-: |\n| volatile-lru | 从已设置过期时间的数据集中挑选最近最少使用的数据淘汰 |\n| volatile-ttl | 从已设置过期时间的数据集中挑选将要过期的数据淘汰 |\n| volatile-random | 从已设置过期时间的数据集中任意选择数据淘汰 |\n| allkeys-lru | 从所有数据集中挑选最近最少使用的数据淘汰 |\n| allkeys-random | 从所有数据集中任意选择数据进行淘汰 |\n| noeviction | 禁止驱逐数据 |\n\n作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。\n\n使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。\n\nRedis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。\n\n## 八、持久化\n\nRedis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。\n\n### RDB 持久化\n\n将某个时间点的所有数据都存放到硬盘上。\n\n可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。\n\n如果系统发生故障，将会丢失最后一次创建快照之后的数据。\n\n如果数据量很大，保存快照的时间会很长。\n\n### AOF 持久化\n\n将写命令添加到 AOF 文件（Append Only File）的末尾。\n\n使用 AOF 持久化需要设置同步选项，从而确保写命令什么时候会同步到磁盘文件上。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：\n\n| 选项 | 同步频率 |\n| :-: | :-: |\n| always | 每个写命令都同步 |\n| everysec | 每秒同步一次 |\n| no | 让操作系统来决定何时同步 |\n\n* always 选项会严重减低服务器的性能；\n* everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；\n* no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。\n\n随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。\n\n## 九、事务\n\n一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。\n\n事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。\n\nRedis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。\n\n## 十、事件\n\nRedis 服务器是一个事件驱动程序。\n\n### 文件事件\n\n服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。\n\nRedis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png)](/CyC2018/CS-Notes/blob/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png)\n\n### 时间事件\n\n服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。\n\n时间事件又分为：\n\n* 定时事件：是让一段程序在指定的时间之内执行一次；\n* 周期性事件：是让一段程序每隔指定时间就执行一次。\n\nRedis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。\n\n### 事件的调度与执行\n\n服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。\n\n事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：\n\n``` python\n  def aeProcessEvents():\n    # 获取到达时间离当前时间最接近的时间事件\n    time_event = aeSearchNearestTimer()\n    # 计算最接近的时间事件距离到达还有多少毫秒\n    remaind_ms = time_event.when - unix_ts_now()\n    # 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0\n    if remaind_ms < 0:\n        remaind_ms = 0\n    # 根据 remaind_ms 的值，创建 timeval\n    timeval = create_timeval_with_ms(remaind_ms)\n    # 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定\n    aeApiPoll(timeval)\n    # 处理所有已产生的文件事件\n    procesFileEvents()\n    # 处理所有已到达的时间事件\n    processTimeEvents()\n```\n\n将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：\n\n``` python\n  def main():\n    # 初始化服务器\n    init_server()\n    # 一直处理事件，直到服务器关闭为止\n    while server_is_not_shutdown():\n        aeProcessEvents()\n    # 服务器关闭，执行清理操作\n    clean_server()\n```\n\n从事件处理的角度来看，服务器运行流程如下：\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png)](/CyC2018/CS-Notes/blob/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png)\n\n## 十一、复制\n\n通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。\n\n一个从服务器只能有一个主服务器，并且不支持主主复制。\n\n### 连接过程\n\n1. 主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；\n\n2. 从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；\n\n3. 主服务器每执行一次写命令，就向从服务器发送相同的写命令。\n\n### 主从链\n\n随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png)](/CyC2018/CS-Notes/blob/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png)\n\n## 十二、Sentinel\n\nSentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。\n\n## 十三、分片\n\n分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。\n\n假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，... ，有不同的方式来选择一个指定的键存储在哪个实例中。\n\n* 最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。\n* 还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。\n\n根据执行分片的位置，可以分为三种分片方式：\n\n* 客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。\n* 代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。\n* 服务器分片：Redis Cluster。\n\n## 十四、一个简单的论坛系统分析\n\n该论坛系统功能如下：\n\n* 可以发布文章；\n* 可以对文章进行点赞；\n* 在首页可以按文章的发布时间或者文章的点赞数进行排序显示。\n\n### 文章信息\n\n文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。\n\nRedis 没有关系型数据库中的表这一概念来将同种类型的数据存放在一起，而是使用命名空间的方式来实现这一功能。键名的前面部分存储命名空间，后面部分的内容存储 ID，通常使用 : 来进行分隔。例如下面的 HASH 的键名为 article:92617，其中 article 为命名空间，ID 为 92617。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png)](/CyC2018/CS-Notes/blob/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png)\n\n### 点赞功能\n\n当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。\n\n为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png)](/CyC2018/CS-Notes/blob/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png)\n\n### 对文章进行排序\n\n为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png)](/CyC2018/CS-Notes/blob/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png)","source":"_posts/2019-05-24-redis-basic.md","raw":"---\ntitle: REDIS（一）：基础介绍\ndate: 2019-05-24 18:07:41\ntags: [ 数据库, redis ]\ncategories: [ 技术 ]\n---\n\n## 一、概述\n\nRedis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。\n\n键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。\n\nRedis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。\n\n<!-- more -->\n\n## 二、数据类型\n\n| 数据类型 | 可以存储的值 | 操作 |\n| :-: | :-: | :-: |\n| STRING | 字符串、整数或者浮点数 | 对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作 |\n| LIST | 列表 | 从两端压入或者弹出元素对单个或者多个元素进行修剪，只保留一个范围内的元素 |\n| SET | 无序集合 | 添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素 |\n| HASH | 包含键值对的无序散列表 | 添加、获取、移除单个键值对获取所有键值对检查某个键是否存在 |\n| ZSET | 有序集合 | 添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名 |\n\n> [What Redis data structures look like](https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/)\n\n### STRING\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png)](/CyC2018/CS-Notes/blob/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png)\n\n``` cmd\n> set hello world\nOK\n> get hello\n\"world\"\n> del hello\n(integer) 1\n> get hello\n(nil)\n```\n\n### LIST\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png)](/CyC2018/CS-Notes/blob/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png)\n\n``` cmd\n> rpush list-key item\n(integer) 1\n> rpush list-key item2\n(integer) 2\n> rpush list-key item\n(integer) 3\n\n> lrange list-key 0 -1\n1) \"item\"\n2) \"item2\"\n3) \"item\"\n\n> lindex list-key 1\n\"item2\"\n\n> lpop list-key\n\"item\"\n\n> lrange list-key 0 -1\n1) \"item2\"\n2) \"item\"\n```\n\n### SET\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png)](/CyC2018/CS-Notes/blob/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png)\n\n``` cmd\n> sadd set-key item\n(integer) 1\n> sadd set-key item2\n(integer) 1\n> sadd set-key item3\n(integer) 1\n> sadd set-key item\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item2\"\n3) \"item3\"\n\n> sismember set-key item4\n(integer) 0\n> sismember set-key item\n(integer) 1\n\n> srem set-key item2\n(integer) 1\n> srem set-key item2\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item3\"\n```\n\n### HASH\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png)](/CyC2018/CS-Notes/blob/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png)\n\n``` cmd\n> hset hash-key sub-key1 value1\n(integer) 1\n> hset hash-key sub-key2 value2\n(integer) 1\n> hset hash-key sub-key1 value1\n(integer) 0\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n3) \"sub-key2\"\n4) \"value2\"\n\n> hdel hash-key sub-key2\n(integer) 1\n> hdel hash-key sub-key2\n(integer) 0\n\n> hget hash-key sub-key1\n\"value1\"\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n```\n\n### ZSET\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png)](/CyC2018/CS-Notes/blob/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png)\n\n``` cmd\n> zadd zset-key 728 member1\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member1\"\n2) \"728\"\n3) \"member0\"\n4) \"982\"\n\n> zrangebyscore zset-key 0 800 withscores\n1) \"member1\"\n2) \"728\"\n\n> zrem zset-key member1\n(integer) 1\n> zrem zset-key member1\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member0\"\n2) \"982\"\n```\n\n## 三、数据结构\n\n### 字典\n\ndictht 是一个散列表结构，使用拉链法保存哈希冲突。\n\n``` C\n/* This is our hash table structure. Every dictionary has two of this as we\n * implement incremental rehashing, for the old to the new table. */\ntypedef struct dictht {\n    dictEntry **table;\n    unsigned long size;\n    unsigned long sizemask;\n    unsigned long used;\n} dictht;\n```\n\n``` C\ntypedef struct dictEntry {\n    void *key;\n    union {\n        void *val;\n        uint64_t u64;\n        int64_t s64;\n        double d;\n    } v;\n    struct dictEntry *next;\n} dictEntry;\n```\n\nRedis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。\n\n``` C\ntypedef struct dict {\n    dictType *type;\n    void *privdata;\n    dictht ht[2];\n    long rehashidx; /* rehashing not in progress if rehashidx == -1 */\n    unsigned long iterators; /* number of iterators currently running */\n} dict;\n```\n\nrehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。\n\n渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。\n\n在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。\n\n采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。\n\n``` C\n/* Performs N steps of incremental rehashing. Returns 1 if there are still\n * keys to move from the old to the new hash table, otherwise 0 is returned.\n *\n * Note that a rehashing step consists in moving a bucket (that may have more\n * than one key as we use chaining) from the old to the new hash table, however\n * since part of the hash table may be composed of empty spaces, it is not\n * guaranteed that this function will rehash even a single bucket, since it\n * will visit at max N*10 empty buckets in total, otherwise the amount of\n * work it does would be unbound and the function may block for a long time. */\nint dictRehash(dict *d, int n) {\n    int empty_visits = n * 10; /* Max number of empty buckets to visit. */\n    if (!dictIsRehashing(d)) return 0;\n\n    while (n-- && d->ht[0].used != 0) {\n        dictEntry *de, *nextde;\n\n        /* Note that rehashidx can't overflow as we are sure there are more\n         * elements because ht[0].used != 0 */\n        assert(d->ht[0].size > (unsigned long) d->rehashidx);\n        while (d->ht[0].table[d->rehashidx] == NULL) {\n            d->rehashidx++;\n            if (--empty_visits == 0) return 1;\n        }\n        de = d->ht[0].table[d->rehashidx];\n        /* Move all the keys in this bucket from the old to the new hash HT */\n        while (de) {\n            uint64_t h;\n\n            nextde = de->next;\n            /* Get the index in the new hash table */\n            h = dictHashKey(d, de->key) & d->ht[1].sizemask;\n            de->next = d->ht[1].table[h];\n            d->ht[1].table[h] = de;\n            d->ht[0].used--;\n            d->ht[1].used++;\n            de = nextde;\n        }\n        d->ht[0].table[d->rehashidx] = NULL;\n        d->rehashidx++;\n    }\n\n    /* Check if we already rehashed the whole table... */\n    if (d->ht[0].used == 0) {\n        zfree(d->ht[0].table);\n        d->ht[0] = d->ht[1];\n        _dictReset(&d->ht[1]);\n        d->rehashidx = -1;\n        return 0;\n    }\n\n    /* More to rehash... */\n    return 1;\n}\n```\n\n### 跳跃表\n\n是有序集合的底层实现之一。\n\n跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png)](/CyC2018/CS-Notes/blob/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png)\n\n在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png)](/CyC2018/CS-Notes/blob/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png)\n\n与红黑树等平衡树相比，跳跃表具有以下优点：\n\n* 插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；\n* 更容易实现；\n* 支持无锁操作。\n\n## 四、使用场景\n\n### 计数器\n\n可以对 String 进行自增自减运算，从而实现计数器功能。\n\nRedis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。\n\n### 缓存\n\n将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。\n\n### 查找表\n\n例如 DNS 记录就很适合使用 Redis 进行存储。\n\n查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。\n\n### 消息队列\n\nList 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息\n\n不过最好使用 Kafka、RabbitMQ 等消息中间件。\n\n### 会话缓存\n\n可以使用 Redis 来统一存储多台应用服务器的会话信息。\n\n当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。\n\n### 分布式锁实现\n\n在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。\n\n可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。\n\n### 其它\n\nSet 可以实现交集、并集等操作，从而实现共同好友等功能。\n\nZSet 可以实现有序性操作，从而实现排行榜等功能。\n\n## 五、Redis 与 Memcached\n\n两者都是非关系型内存键值数据库，主要有以下不同：\n\n### 数据类型\n\nMemcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。\n\n### 数据持久化\n\nRedis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。\n\n### 分布式\n\nMemcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。\n\nRedis Cluster 实现了分布式的支持。\n\n### 内存管理机制\n\n* 在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。\n\n* Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。\n\n## 六、键的过期时间\n\nRedis 可以为每个键设置过期时间，当键过期时，会自动删除该键。\n\n对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。\n\n## 七、数据淘汰策略\n\n可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。\n\nRedis 具体有 6 种淘汰策略：\n\n| 策略 | 描述 |\n| :-: | :-: |\n| volatile-lru | 从已设置过期时间的数据集中挑选最近最少使用的数据淘汰 |\n| volatile-ttl | 从已设置过期时间的数据集中挑选将要过期的数据淘汰 |\n| volatile-random | 从已设置过期时间的数据集中任意选择数据淘汰 |\n| allkeys-lru | 从所有数据集中挑选最近最少使用的数据淘汰 |\n| allkeys-random | 从所有数据集中任意选择数据进行淘汰 |\n| noeviction | 禁止驱逐数据 |\n\n作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。\n\n使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。\n\nRedis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。\n\n## 八、持久化\n\nRedis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。\n\n### RDB 持久化\n\n将某个时间点的所有数据都存放到硬盘上。\n\n可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。\n\n如果系统发生故障，将会丢失最后一次创建快照之后的数据。\n\n如果数据量很大，保存快照的时间会很长。\n\n### AOF 持久化\n\n将写命令添加到 AOF 文件（Append Only File）的末尾。\n\n使用 AOF 持久化需要设置同步选项，从而确保写命令什么时候会同步到磁盘文件上。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：\n\n| 选项 | 同步频率 |\n| :-: | :-: |\n| always | 每个写命令都同步 |\n| everysec | 每秒同步一次 |\n| no | 让操作系统来决定何时同步 |\n\n* always 选项会严重减低服务器的性能；\n* everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；\n* no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。\n\n随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。\n\n## 九、事务\n\n一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。\n\n事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。\n\nRedis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。\n\n## 十、事件\n\nRedis 服务器是一个事件驱动程序。\n\n### 文件事件\n\n服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。\n\nRedis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png)](/CyC2018/CS-Notes/blob/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png)\n\n### 时间事件\n\n服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。\n\n时间事件又分为：\n\n* 定时事件：是让一段程序在指定的时间之内执行一次；\n* 周期性事件：是让一段程序每隔指定时间就执行一次。\n\nRedis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。\n\n### 事件的调度与执行\n\n服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。\n\n事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：\n\n``` python\n  def aeProcessEvents():\n    # 获取到达时间离当前时间最接近的时间事件\n    time_event = aeSearchNearestTimer()\n    # 计算最接近的时间事件距离到达还有多少毫秒\n    remaind_ms = time_event.when - unix_ts_now()\n    # 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0\n    if remaind_ms < 0:\n        remaind_ms = 0\n    # 根据 remaind_ms 的值，创建 timeval\n    timeval = create_timeval_with_ms(remaind_ms)\n    # 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定\n    aeApiPoll(timeval)\n    # 处理所有已产生的文件事件\n    procesFileEvents()\n    # 处理所有已到达的时间事件\n    processTimeEvents()\n```\n\n将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：\n\n``` python\n  def main():\n    # 初始化服务器\n    init_server()\n    # 一直处理事件，直到服务器关闭为止\n    while server_is_not_shutdown():\n        aeProcessEvents()\n    # 服务器关闭，执行清理操作\n    clean_server()\n```\n\n从事件处理的角度来看，服务器运行流程如下：\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png)](/CyC2018/CS-Notes/blob/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png)\n\n## 十一、复制\n\n通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。\n\n一个从服务器只能有一个主服务器，并且不支持主主复制。\n\n### 连接过程\n\n1. 主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；\n\n2. 从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；\n\n3. 主服务器每执行一次写命令，就向从服务器发送相同的写命令。\n\n### 主从链\n\n随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png)](/CyC2018/CS-Notes/blob/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png)\n\n## 十二、Sentinel\n\nSentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。\n\n## 十三、分片\n\n分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。\n\n假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，... ，有不同的方式来选择一个指定的键存储在哪个实例中。\n\n* 最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。\n* 还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。\n\n根据执行分片的位置，可以分为三种分片方式：\n\n* 客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。\n* 代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。\n* 服务器分片：Redis Cluster。\n\n## 十四、一个简单的论坛系统分析\n\n该论坛系统功能如下：\n\n* 可以发布文章；\n* 可以对文章进行点赞；\n* 在首页可以按文章的发布时间或者文章的点赞数进行排序显示。\n\n### 文章信息\n\n文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。\n\nRedis 没有关系型数据库中的表这一概念来将同种类型的数据存放在一起，而是使用命名空间的方式来实现这一功能。键名的前面部分存储命名空间，后面部分的内容存储 ID，通常使用 : 来进行分隔。例如下面的 HASH 的键名为 article:92617，其中 article 为命名空间，ID 为 92617。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png)](/CyC2018/CS-Notes/blob/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png)\n\n### 点赞功能\n\n当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。\n\n为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png)](/CyC2018/CS-Notes/blob/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png)\n\n### 对文章进行排序\n\n为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）\n\n[![](https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png)](/CyC2018/CS-Notes/blob/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png)","slug":"redis-basic","published":1,"updated":"2019-05-31T02:36:17.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwkhgipo0001coc442aasi0o","content":"<h2 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h2><p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>\n<p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>\n<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>\n<a id=\"more\"></a>\n<h2 id=\"二、数据类型\"><a href=\"#二、数据类型\" class=\"headerlink\" title=\"二、数据类型\"></a>二、数据类型</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">可以存储的值</th>\n<th style=\"text-align:center\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">STRING</td>\n<td style=\"text-align:center\">字符串、整数或者浮点数</td>\n<td style=\"text-align:center\">对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LIST</td>\n<td style=\"text-align:center\">列表</td>\n<td style=\"text-align:center\">从两端压入或者弹出元素对单个或者多个元素进行修剪，只保留一个范围内的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SET</td>\n<td style=\"text-align:center\">无序集合</td>\n<td style=\"text-align:center\">添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HASH</td>\n<td style=\"text-align:center\">包含键值对的无序散列表</td>\n<td style=\"text-align:center\">添加、获取、移除单个键值对获取所有键值对检查某个键是否存在</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ZSET</td>\n<td style=\"text-align:center\">有序集合</td>\n<td style=\"text-align:center\">添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><a href=\"https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/\" target=\"_blank\" rel=\"noopener\">What Redis data structures look like</a></p>\n</blockquote>\n<h3 id=\"STRING\"><a href=\"#STRING\" class=\"headerlink\" title=\"STRING\"></a>STRING</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png\" alt></a></p>\n<figure class=\"highlight cmd hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"hljs-built_in\">set</span> hello world</span><br><span class=\"line\">OK</span><br><span class=\"line\">&gt; get hello</span><br><span class=\"line\">\"world\"</span><br><span class=\"line\">&gt; <span class=\"hljs-built_in\">del</span> hello</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; get hello</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<h3 id=\"LIST\"><a href=\"#LIST\" class=\"headerlink\" title=\"LIST\"></a>LIST</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png\" alt></a></p>\n<figure class=\"highlight cmd hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpush list-key item</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; rpush list-key item2</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">2</span></span><br><span class=\"line\">&gt; rpush list-key item</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lrange list-key <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"item\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"item2\"</span><br><span class=\"line\"><span class=\"hljs-number\">3</span>) \"item\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lindex list-key <span class=\"hljs-number\">1</span></span><br><span class=\"line\">\"item2\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lpop list-key</span><br><span class=\"line\">\"item\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lrange list-key <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">1</span></span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"item2\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"item\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png\" alt></a></p>\n<figure class=\"highlight cmd hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sadd <span class=\"hljs-built_in\">set</span>-key item</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; sadd <span class=\"hljs-built_in\">set</span>-key item2</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; sadd <span class=\"hljs-built_in\">set</span>-key item3</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; sadd <span class=\"hljs-built_in\">set</span>-key item</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; smembers <span class=\"hljs-built_in\">set</span>-key</span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"item\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"item2\"</span><br><span class=\"line\"><span class=\"hljs-number\">3</span>) \"item3\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; sismember <span class=\"hljs-built_in\">set</span>-key item4</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">0</span></span><br><span class=\"line\">&gt; sismember <span class=\"hljs-built_in\">set</span>-key item</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; srem <span class=\"hljs-built_in\">set</span>-key item2</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; srem <span class=\"hljs-built_in\">set</span>-key item2</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; smembers <span class=\"hljs-built_in\">set</span>-key</span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"item\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"item3\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"HASH\"><a href=\"#HASH\" class=\"headerlink\" title=\"HASH\"></a>HASH</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png\" alt></a></p>\n<figure class=\"highlight cmd hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hset hash-key sub-key1 value1</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; hset hash-key sub-key2 value2</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; hset hash-key sub-key1 value1</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hgetall hash-key</span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"sub-key1\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"value1\"</span><br><span class=\"line\"><span class=\"hljs-number\">3</span>) \"sub-key2\"</span><br><span class=\"line\"><span class=\"hljs-number\">4</span>) \"value2\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hdel hash-key sub-key2</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; hdel hash-key sub-key2</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hget hash-key sub-key1</span><br><span class=\"line\">\"value1\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hgetall hash-key</span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"sub-key1\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"value1\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZSET\"><a href=\"#ZSET\" class=\"headerlink\" title=\"ZSET\"></a>ZSET</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png\" alt></a></p>\n<figure class=\"highlight cmd hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; zadd zset-key <span class=\"hljs-number\">728</span> member1</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; zadd zset-key <span class=\"hljs-number\">982</span> member0</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; zadd zset-key <span class=\"hljs-number\">982</span> member0</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrange zset-key <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">1</span> withscores</span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"member1\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"<span class=\"hljs-number\">728</span>\"</span><br><span class=\"line\"><span class=\"hljs-number\">3</span>) \"member0\"</span><br><span class=\"line\"><span class=\"hljs-number\">4</span>) \"<span class=\"hljs-number\">982</span>\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrangebyscore zset-key <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">800</span> withscores</span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"member1\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"<span class=\"hljs-number\">728</span>\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrem zset-key member1</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">1</span></span><br><span class=\"line\">&gt; zrem zset-key member1</span><br><span class=\"line\">(integer) <span class=\"hljs-number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrange zset-key <span class=\"hljs-number\">0</span> -<span class=\"hljs-number\">1</span> withscores</span><br><span class=\"line\"><span class=\"hljs-number\">1</span>) \"member0\"</span><br><span class=\"line\"><span class=\"hljs-number\">2</span>) \"<span class=\"hljs-number\">982</span>\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、数据结构\"><a href=\"#三、数据结构\" class=\"headerlink\" title=\"三、数据结构\"></a>三、数据结构</h2><h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>dictht 是一个散列表结构，使用拉链法保存哈希冲突。</p>\n<figure class=\"highlight c hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">dictht</span> &#123;</span></span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> size;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> sizemask;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> used;</span><br><span class=\"line\">&#125; dictht;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">dictEntry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">void</span> *key;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">void</span> *val;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">uint64_t</span> u64;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">int64_t</span> s64;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">double</span> d;</span><br><span class=\"line\">    &#125; v;</span><br><span class=\"line\">    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">dictEntry</span> *<span class=\"hljs-title\">next</span>;</span></span><br><span class=\"line\">&#125; dictEntry;</span><br></pre></td></tr></table></figure>\n<p>Redis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。</p>\n<figure class=\"highlight c hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">dict</span> &#123;</span></span><br><span class=\"line\">    dictType *type;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">void</span> *privdata;</span><br><span class=\"line\">    dictht ht[<span class=\"hljs-number\">2</span>];</span><br><span class=\"line\">    <span class=\"hljs-keyword\">long</span> rehashidx; <span class=\"hljs-comment\">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span> iterators; <span class=\"hljs-comment\">/* number of iterators currently running */</span></span><br><span class=\"line\">&#125; dict;</span><br></pre></td></tr></table></figure>\n<p>rehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。</p>\n<p>渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。</p>\n<p>在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。</p>\n<p>采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。</p>\n<figure class=\"highlight c hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/* Performs N steps of incremental rehashing. Returns 1 if there are still</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * keys to move from the old to the new hash table, otherwise 0 is returned.</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> *</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * Note that a rehashing step consists in moving a bucket (that may have more</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * than one key as we use chaining) from the old to the new hash table, however</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * since part of the hash table may be composed of empty spaces, it is not</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * guaranteed that this function will rehash even a single bucket, since it</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * will visit at max N*10 empty buckets in total, otherwise the amount of</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * work it does would be unbound and the function may block for a long time. */</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">dictRehash</span><span class=\"hljs-params\">(dict *d, <span class=\"hljs-keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">int</span> empty_visits = n * <span class=\"hljs-number\">10</span>; <span class=\"hljs-comment\">/* Max number of empty buckets to visit. */</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (!dictIsRehashing(d)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">while</span> (n-- &amp;&amp; d-&gt;ht[<span class=\"hljs-number\">0</span>].used != <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">        dictEntry *de, *nextde;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"hljs-comment\">/* Note that rehashidx can't overflow as we are sure there are more</span></span><br><span class=\"line\"><span class=\"hljs-comment\">         * elements because ht[0].used != 0 */</span></span><br><span class=\"line\">        assert(d-&gt;ht[<span class=\"hljs-number\">0</span>].size &gt; (<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">long</span>) d-&gt;rehashidx);</span><br><span class=\"line\">        <span class=\"hljs-keyword\">while</span> (d-&gt;ht[<span class=\"hljs-number\">0</span>].table[d-&gt;rehashidx] == <span class=\"hljs-literal\">NULL</span>) &#123;</span><br><span class=\"line\">            d-&gt;rehashidx++;</span><br><span class=\"line\">            <span class=\"hljs-keyword\">if</span> (--empty_visits == <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        de = d-&gt;ht[<span class=\"hljs-number\">0</span>].table[d-&gt;rehashidx];</span><br><span class=\"line\">        <span class=\"hljs-comment\">/* Move all the keys in this bucket from the old to the new hash HT */</span></span><br><span class=\"line\">        <span class=\"hljs-keyword\">while</span> (de) &#123;</span><br><span class=\"line\">            <span class=\"hljs-keyword\">uint64_t</span> h;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextde = de-&gt;next;</span><br><span class=\"line\">            <span class=\"hljs-comment\">/* Get the index in the new hash table */</span></span><br><span class=\"line\">            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[<span class=\"hljs-number\">1</span>].sizemask;</span><br><span class=\"line\">            de-&gt;next = d-&gt;ht[<span class=\"hljs-number\">1</span>].table[h];</span><br><span class=\"line\">            d-&gt;ht[<span class=\"hljs-number\">1</span>].table[h] = de;</span><br><span class=\"line\">            d-&gt;ht[<span class=\"hljs-number\">0</span>].used--;</span><br><span class=\"line\">            d-&gt;ht[<span class=\"hljs-number\">1</span>].used++;</span><br><span class=\"line\">            de = nextde;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        d-&gt;ht[<span class=\"hljs-number\">0</span>].table[d-&gt;rehashidx] = <span class=\"hljs-literal\">NULL</span>;</span><br><span class=\"line\">        d-&gt;rehashidx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">/* Check if we already rehashed the whole table... */</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (d-&gt;ht[<span class=\"hljs-number\">0</span>].used == <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">        zfree(d-&gt;ht[<span class=\"hljs-number\">0</span>].table);</span><br><span class=\"line\">        d-&gt;ht[<span class=\"hljs-number\">0</span>] = d-&gt;ht[<span class=\"hljs-number\">1</span>];</span><br><span class=\"line\">        _dictReset(&amp;d-&gt;ht[<span class=\"hljs-number\">1</span>]);</span><br><span class=\"line\">        d-&gt;rehashidx = <span class=\"hljs-number\">-1</span>;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">/* More to rehash... */</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"跳跃表\"><a href=\"#跳跃表\" class=\"headerlink\" title=\"跳跃表\"></a>跳跃表</h3><p>是有序集合的底层实现之一。</p>\n<p>跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png\" alt></a></p>\n<p>在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png\" alt></a></p>\n<p>与红黑树等平衡树相比，跳跃表具有以下优点：</p>\n<ul>\n<li>插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；</li>\n<li>更容易实现；</li>\n<li>支持无锁操作。</li>\n</ul>\n<h2 id=\"四、使用场景\"><a href=\"#四、使用场景\" class=\"headerlink\" title=\"四、使用场景\"></a>四、使用场景</h2><h3 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h3><p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>\n<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>\n<h3 id=\"查找表\"><a href=\"#查找表\" class=\"headerlink\" title=\"查找表\"></a>查找表</h3><p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>\n<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>\n<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>\n<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>\n<h3 id=\"会话缓存\"><a href=\"#会话缓存\" class=\"headerlink\" title=\"会话缓存\"></a>会话缓存</h3><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。</p>\n<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p>\n<h3 id=\"分布式锁实现\"><a href=\"#分布式锁实现\" class=\"headerlink\" title=\"分布式锁实现\"></a>分布式锁实现</h3><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>\n<p>可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>\n<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>\n<h2 id=\"五、Redis-与-Memcached\"><a href=\"#五、Redis-与-Memcached\" class=\"headerlink\" title=\"五、Redis 与 Memcached\"></a>五、Redis 与 Memcached</h2><p>两者都是非关系型内存键值数据库，主要有以下不同：</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>Memcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。</p>\n<h3 id=\"数据持久化\"><a href=\"#数据持久化\" class=\"headerlink\" title=\"数据持久化\"></a>数据持久化</h3><p>Redis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。</p>\n<h3 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h3><p>Memcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</p>\n<p>Redis Cluster 实现了分布式的支持。</p>\n<h3 id=\"内存管理机制\"><a href=\"#内存管理机制\" class=\"headerlink\" title=\"内存管理机制\"></a>内存管理机制</h3><ul>\n<li><p>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。</p>\n</li>\n<li><p>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</p>\n</li>\n</ul>\n<h2 id=\"六、键的过期时间\"><a href=\"#六、键的过期时间\" class=\"headerlink\" title=\"六、键的过期时间\"></a>六、键的过期时间</h2><p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>\n<p>对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。</p>\n<h2 id=\"七、数据淘汰策略\"><a href=\"#七、数据淘汰策略\" class=\"headerlink\" title=\"七、数据淘汰策略\"></a>七、数据淘汰策略</h2><p>可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。</p>\n<p>Redis 具体有 6 种淘汰策略：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">策略</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">volatile-lru</td>\n<td style=\"text-align:center\">从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">volatile-ttl</td>\n<td style=\"text-align:center\">从已设置过期时间的数据集中挑选将要过期的数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">volatile-random</td>\n<td style=\"text-align:center\">从已设置过期时间的数据集中任意选择数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">allkeys-lru</td>\n<td style=\"text-align:center\">从所有数据集中挑选最近最少使用的数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">allkeys-random</td>\n<td style=\"text-align:center\">从所有数据集中任意选择数据进行淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noeviction</td>\n<td style=\"text-align:center\">禁止驱逐数据</td>\n</tr>\n</tbody>\n</table>\n<p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。</p>\n<p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p>\n<p>Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。</p>\n<h2 id=\"八、持久化\"><a href=\"#八、持久化\" class=\"headerlink\" title=\"八、持久化\"></a>八、持久化</h2><p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>\n<h3 id=\"RDB-持久化\"><a href=\"#RDB-持久化\" class=\"headerlink\" title=\"RDB 持久化\"></a>RDB 持久化</h3><p>将某个时间点的所有数据都存放到硬盘上。</p>\n<p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>\n<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>\n<p>如果数据量很大，保存快照的时间会很长。</p>\n<h3 id=\"AOF-持久化\"><a href=\"#AOF-持久化\" class=\"headerlink\" title=\"AOF 持久化\"></a>AOF 持久化</h3><p>将写命令添加到 AOF 文件（Append Only File）的末尾。</p>\n<p>使用 AOF 持久化需要设置同步选项，从而确保写命令什么时候会同步到磁盘文件上。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">同步频率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">always</td>\n<td style=\"text-align:center\">每个写命令都同步</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">everysec</td>\n<td style=\"text-align:center\">每秒同步一次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">让操作系统来决定何时同步</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>always 选项会严重减低服务器的性能；</li>\n<li>everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；</li>\n<li>no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</li>\n</ul>\n<p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p>\n<h2 id=\"九、事务\"><a href=\"#九、事务\" class=\"headerlink\" title=\"九、事务\"></a>九、事务</h2><p>一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p>\n<p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p>\n<p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。</p>\n<h2 id=\"十、事件\"><a href=\"#十、事件\" class=\"headerlink\" title=\"十、事件\"></a>十、事件</h2><p>Redis 服务器是一个事件驱动程序。</p>\n<h3 id=\"文件事件\"><a href=\"#文件事件\" class=\"headerlink\" title=\"文件事件\"></a>文件事件</h3><p>服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。</p>\n<p>Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png\" alt></a></p>\n<h3 id=\"时间事件\"><a href=\"#时间事件\" class=\"headerlink\" title=\"时间事件\"></a>时间事件</h3><p>服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。</p>\n<p>时间事件又分为：</p>\n<ul>\n<li>定时事件：是让一段程序在指定的时间之内执行一次；</li>\n<li>周期性事件：是让一段程序每隔指定时间就执行一次。</li>\n</ul>\n<p>Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。</p>\n<h3 id=\"事件的调度与执行\"><a href=\"#事件的调度与执行\" class=\"headerlink\" title=\"事件的调度与执行\"></a>事件的调度与执行</h3><p>服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。</p>\n<p>事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：</p>\n<figure class=\"highlight python hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">aeProcessEvents</span><span class=\"hljs-params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"hljs-comment\"># 获取到达时间离当前时间最接近的时间事件</span></span><br><span class=\"line\">  time_event = aeSearchNearestTimer()</span><br><span class=\"line\">  <span class=\"hljs-comment\"># 计算最接近的时间事件距离到达还有多少毫秒</span></span><br><span class=\"line\">  remaind_ms = time_event.when - unix_ts_now()</span><br><span class=\"line\">  <span class=\"hljs-comment\"># 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> remaind_ms &lt; <span class=\"hljs-number\">0</span>:</span><br><span class=\"line\">      remaind_ms = <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  <span class=\"hljs-comment\"># 根据 remaind_ms 的值，创建 timeval</span></span><br><span class=\"line\">  timeval = create_timeval_with_ms(remaind_ms)</span><br><span class=\"line\">  <span class=\"hljs-comment\"># 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定</span></span><br><span class=\"line\">  aeApiPoll(timeval)</span><br><span class=\"line\">  <span class=\"hljs-comment\"># 处理所有已产生的文件事件</span></span><br><span class=\"line\">  procesFileEvents()</span><br><span class=\"line\">  <span class=\"hljs-comment\"># 处理所有已到达的时间事件</span></span><br><span class=\"line\">  processTimeEvents()</span><br></pre></td></tr></table></figure>\n<p>将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：</p>\n<figure class=\"highlight python hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"hljs-comment\"># 初始化服务器</span></span><br><span class=\"line\">  init_server()</span><br><span class=\"line\">  <span class=\"hljs-comment\"># 一直处理事件，直到服务器关闭为止</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">while</span> server_is_not_shutdown():</span><br><span class=\"line\">      aeProcessEvents()</span><br><span class=\"line\">  <span class=\"hljs-comment\"># 服务器关闭，执行清理操作</span></span><br><span class=\"line\">  clean_server()</span><br></pre></td></tr></table></figure>\n<p>从事件处理的角度来看，服务器运行流程如下：</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png\" alt></a></p>\n<h2 id=\"十一、复制\"><a href=\"#十一、复制\" class=\"headerlink\" title=\"十一、复制\"></a>十一、复制</h2><p>通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。</p>\n<p>一个从服务器只能有一个主服务器，并且不支持主主复制。</p>\n<h3 id=\"连接过程\"><a href=\"#连接过程\" class=\"headerlink\" title=\"连接过程\"></a>连接过程</h3><ol>\n<li><p>主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</p>\n</li>\n<li><p>从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</p>\n</li>\n<li><p>主服务器每执行一次写命令，就向从服务器发送相同的写命令。</p>\n</li>\n</ol>\n<h3 id=\"主从链\"><a href=\"#主从链\" class=\"headerlink\" title=\"主从链\"></a>主从链</h3><p>随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png\" alt></a></p>\n<h2 id=\"十二、Sentinel\"><a href=\"#十二、Sentinel\" class=\"headerlink\" title=\"十二、Sentinel\"></a>十二、Sentinel</h2><p>Sentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p>\n<h2 id=\"十三、分片\"><a href=\"#十三、分片\" class=\"headerlink\" title=\"十三、分片\"></a>十三、分片</h2><p>分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p>\n<p>假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，… ，有不同的方式来选择一个指定的键存储在哪个实例中。</p>\n<ul>\n<li>最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。</li>\n<li>还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。</li>\n</ul>\n<p>根据执行分片的位置，可以分为三种分片方式：</p>\n<ul>\n<li>客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。</li>\n<li>代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。</li>\n<li>服务器分片：Redis Cluster。</li>\n</ul>\n<h2 id=\"十四、一个简单的论坛系统分析\"><a href=\"#十四、一个简单的论坛系统分析\" class=\"headerlink\" title=\"十四、一个简单的论坛系统分析\"></a>十四、一个简单的论坛系统分析</h2><p>该论坛系统功能如下：</p>\n<ul>\n<li>可以发布文章；</li>\n<li>可以对文章进行点赞；</li>\n<li>在首页可以按文章的发布时间或者文章的点赞数进行排序显示。</li>\n</ul>\n<h3 id=\"文章信息\"><a href=\"#文章信息\" class=\"headerlink\" title=\"文章信息\"></a>文章信息</h3><p>文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。</p>\n<p>Redis 没有关系型数据库中的表这一概念来将同种类型的数据存放在一起，而是使用命名空间的方式来实现这一功能。键名的前面部分存储命名空间，后面部分的内容存储 ID，通常使用 : 来进行分隔。例如下面的 HASH 的键名为 article:92617，其中 article 为命名空间，ID 为 92617。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png\" alt></a></p>\n<h3 id=\"点赞功能\"><a href=\"#点赞功能\" class=\"headerlink\" title=\"点赞功能\"></a>点赞功能</h3><p>当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。</p>\n<p>为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png\" alt></a></p>\n<h3 id=\"对文章进行排序\"><a href=\"#对文章进行排序\" class=\"headerlink\" title=\"对文章进行排序\"></a>对文章进行排序</h3><p>为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png\" alt></a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h2><p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>\n<p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>\n<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>","more":"<h2 id=\"二、数据类型\"><a href=\"#二、数据类型\" class=\"headerlink\" title=\"二、数据类型\"></a>二、数据类型</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数据类型</th>\n<th style=\"text-align:center\">可以存储的值</th>\n<th style=\"text-align:center\">操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">STRING</td>\n<td style=\"text-align:center\">字符串、整数或者浮点数</td>\n<td style=\"text-align:center\">对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LIST</td>\n<td style=\"text-align:center\">列表</td>\n<td style=\"text-align:center\">从两端压入或者弹出元素对单个或者多个元素进行修剪，只保留一个范围内的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SET</td>\n<td style=\"text-align:center\">无序集合</td>\n<td style=\"text-align:center\">添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HASH</td>\n<td style=\"text-align:center\">包含键值对的无序散列表</td>\n<td style=\"text-align:center\">添加、获取、移除单个键值对获取所有键值对检查某个键是否存在</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ZSET</td>\n<td style=\"text-align:center\">有序集合</td>\n<td style=\"text-align:center\">添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><a href=\"https://redislabs.com/ebook/part-1-getting-started/chapter-1-getting-to-know-redis/1-2-what-redis-data-structures-look-like/\" target=\"_blank\" rel=\"noopener\">What Redis data structures look like</a></p>\n</blockquote>\n<h3 id=\"STRING\"><a href=\"#STRING\" class=\"headerlink\" title=\"STRING\"></a>STRING</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/6019b2db-bc3e-4408-b6d8-96025f4481d6.png\" alt></a></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">set</span> hello world</span><br><span class=\"line\">OK</span><br><span class=\"line\">&gt; get hello</span><br><span class=\"line\">\"world\"</span><br><span class=\"line\">&gt; <span class=\"built_in\">del</span> hello</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; get hello</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n<h3 id=\"LIST\"><a href=\"#LIST\" class=\"headerlink\" title=\"LIST\"></a>LIST</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/fb327611-7e2b-4f2f-9f5b-38592d408f07.png\" alt></a></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; rpush list-key item</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; rpush list-key item2</span><br><span class=\"line\">(integer) <span class=\"number\">2</span></span><br><span class=\"line\">&gt; rpush list-key item</span><br><span class=\"line\">(integer) <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lrange list-key <span class=\"number\">0</span> -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) \"item\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"item2\"</span><br><span class=\"line\"><span class=\"number\">3</span>) \"item\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lindex list-key <span class=\"number\">1</span></span><br><span class=\"line\">\"item2\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lpop list-key</span><br><span class=\"line\">\"item\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; lrange list-key <span class=\"number\">0</span> -<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">1</span>) \"item2\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"item\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/cd5fbcff-3f35-43a6-8ffa-082a93ce0f0e.png\" alt></a></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; sadd <span class=\"built_in\">set</span>-key item</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; sadd <span class=\"built_in\">set</span>-key item2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; sadd <span class=\"built_in\">set</span>-key item3</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; sadd <span class=\"built_in\">set</span>-key item</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; smembers <span class=\"built_in\">set</span>-key</span><br><span class=\"line\"><span class=\"number\">1</span>) \"item\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"item2\"</span><br><span class=\"line\"><span class=\"number\">3</span>) \"item3\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; sismember <span class=\"built_in\">set</span>-key item4</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\">&gt; sismember <span class=\"built_in\">set</span>-key item</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; srem <span class=\"built_in\">set</span>-key item2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; srem <span class=\"built_in\">set</span>-key item2</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; smembers <span class=\"built_in\">set</span>-key</span><br><span class=\"line\"><span class=\"number\">1</span>) \"item\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"item3\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"HASH\"><a href=\"#HASH\" class=\"headerlink\" title=\"HASH\"></a>HASH</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7bd202a7-93d4-4f3a-a878-af68ae25539a.png\" alt></a></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; hset hash-key sub-key1 value1</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; hset hash-key sub-key2 value2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; hset hash-key sub-key1 value1</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hgetall hash-key</span><br><span class=\"line\"><span class=\"number\">1</span>) \"sub-key1\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"value1\"</span><br><span class=\"line\"><span class=\"number\">3</span>) \"sub-key2\"</span><br><span class=\"line\"><span class=\"number\">4</span>) \"value2\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hdel hash-key sub-key2</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; hdel hash-key sub-key2</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hget hash-key sub-key1</span><br><span class=\"line\">\"value1\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; hgetall hash-key</span><br><span class=\"line\"><span class=\"number\">1</span>) \"sub-key1\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"value1\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"ZSET\"><a href=\"#ZSET\" class=\"headerlink\" title=\"ZSET\"></a>ZSET</h3><p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/1202b2d6-9469-4251-bd47-ca6034fb6116.png\" alt></a></p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; zadd zset-key <span class=\"number\">728</span> member1</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; zadd zset-key <span class=\"number\">982</span> member0</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; zadd zset-key <span class=\"number\">982</span> member0</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrange zset-key <span class=\"number\">0</span> -<span class=\"number\">1</span> withscores</span><br><span class=\"line\"><span class=\"number\">1</span>) \"member1\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"<span class=\"number\">728</span>\"</span><br><span class=\"line\"><span class=\"number\">3</span>) \"member0\"</span><br><span class=\"line\"><span class=\"number\">4</span>) \"<span class=\"number\">982</span>\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrangebyscore zset-key <span class=\"number\">0</span> <span class=\"number\">800</span> withscores</span><br><span class=\"line\"><span class=\"number\">1</span>) \"member1\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"<span class=\"number\">728</span>\"</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrem zset-key member1</span><br><span class=\"line\">(integer) <span class=\"number\">1</span></span><br><span class=\"line\">&gt; zrem zset-key member1</span><br><span class=\"line\">(integer) <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt; zrange zset-key <span class=\"number\">0</span> -<span class=\"number\">1</span> withscores</span><br><span class=\"line\"><span class=\"number\">1</span>) \"member0\"</span><br><span class=\"line\"><span class=\"number\">2</span>) \"<span class=\"number\">982</span>\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、数据结构\"><a href=\"#三、数据结构\" class=\"headerlink\" title=\"三、数据结构\"></a>三、数据结构</h2><h3 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h3><p>dictht 是一个散列表结构，使用拉链法保存哈希冲突。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* This is our hash table structure. Every dictionary has two of this as we</span></span><br><span class=\"line\"><span class=\"comment\"> * implement incremental rehashing, for the old to the new table. */</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictht</span> &#123;</span></span><br><span class=\"line\">    dictEntry **table;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sizemask;</span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> used;</span><br><span class=\"line\">&#125; dictht;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\">    <span class=\"keyword\">union</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> *val;</span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> u64;</span><br><span class=\"line\">        <span class=\"keyword\">int64_t</span> s64;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">    &#125; v;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dictEntry</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; dictEntry;</span><br></pre></td></tr></table></figure>\n<p>Redis 的字典 dict 中包含两个哈希表 dictht，这是为了方便进行 rehash 操作。在扩容时，将其中一个 dictht 上的键值对 rehash 到另一个 dictht 上面，完成之后释放空间并交换两个 dictht 的角色。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">dict</span> &#123;</span></span><br><span class=\"line\">    dictType *type;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *privdata;</span><br><span class=\"line\">    dictht ht[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">long</span> rehashidx; <span class=\"comment\">/* rehashing not in progress if rehashidx == -1 */</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> iterators; <span class=\"comment\">/* number of iterators currently running */</span></span><br><span class=\"line\">&#125; dict;</span><br></pre></td></tr></table></figure>\n<p>rehash 操作不是一次性完成，而是采用渐进方式，这是为了避免一次性执行过多的 rehash 操作给服务器带来过大的负担。</p>\n<p>渐进式 rehash 通过记录 dict 的 rehashidx 完成，它从 0 开始，然后每执行一次 rehash 都会递增。例如在一次 rehash 中，要把 dict[0] rehash 到 dict[1]，这一次会把 dict[0] 上 table[rehashidx] 的键值对 rehash 到 dict[1] 上，dict[0] 的 table[rehashidx] 指向 null，并令 rehashidx++。</p>\n<p>在 rehash 期间，每次对字典执行添加、删除、查找或者更新操作时，都会执行一次渐进式 rehash。</p>\n<p>采用渐进式 rehash 会导致字典中的数据分散在两个 dictht 上，因此对字典的查找操作也需要到对应的 dictht 去执行。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Performs N steps of incremental rehashing. Returns 1 if there are still</span></span><br><span class=\"line\"><span class=\"comment\"> * keys to move from the old to the new hash table, otherwise 0 is returned.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Note that a rehashing step consists in moving a bucket (that may have more</span></span><br><span class=\"line\"><span class=\"comment\"> * than one key as we use chaining) from the old to the new hash table, however</span></span><br><span class=\"line\"><span class=\"comment\"> * since part of the hash table may be composed of empty spaces, it is not</span></span><br><span class=\"line\"><span class=\"comment\"> * guaranteed that this function will rehash even a single bucket, since it</span></span><br><span class=\"line\"><span class=\"comment\"> * will visit at max N*10 empty buckets in total, otherwise the amount of</span></span><br><span class=\"line\"><span class=\"comment\"> * work it does would be unbound and the function may block for a long time. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">dictRehash</span><span class=\"params\">(dict *d, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> empty_visits = n * <span class=\"number\">10</span>; <span class=\"comment\">/* Max number of empty buckets to visit. */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!dictIsRehashing(d)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n-- &amp;&amp; d-&gt;ht[<span class=\"number\">0</span>].used != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        dictEntry *de, *nextde;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Note that rehashidx can't overflow as we are sure there are more</span></span><br><span class=\"line\"><span class=\"comment\">         * elements because ht[0].used != 0 */</span></span><br><span class=\"line\">        assert(d-&gt;ht[<span class=\"number\">0</span>].size &gt; (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) d-&gt;rehashidx);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (d-&gt;ht[<span class=\"number\">0</span>].table[d-&gt;rehashidx] == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            d-&gt;rehashidx++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (--empty_visits == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        de = d-&gt;ht[<span class=\"number\">0</span>].table[d-&gt;rehashidx];</span><br><span class=\"line\">        <span class=\"comment\">/* Move all the keys in this bucket from the old to the new hash HT */</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (de) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">uint64_t</span> h;</span><br><span class=\"line\"></span><br><span class=\"line\">            nextde = de-&gt;next;</span><br><span class=\"line\">            <span class=\"comment\">/* Get the index in the new hash table */</span></span><br><span class=\"line\">            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[<span class=\"number\">1</span>].sizemask;</span><br><span class=\"line\">            de-&gt;next = d-&gt;ht[<span class=\"number\">1</span>].table[h];</span><br><span class=\"line\">            d-&gt;ht[<span class=\"number\">1</span>].table[h] = de;</span><br><span class=\"line\">            d-&gt;ht[<span class=\"number\">0</span>].used--;</span><br><span class=\"line\">            d-&gt;ht[<span class=\"number\">1</span>].used++;</span><br><span class=\"line\">            de = nextde;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        d-&gt;ht[<span class=\"number\">0</span>].table[d-&gt;rehashidx] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        d-&gt;rehashidx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Check if we already rehashed the whole table... */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d-&gt;ht[<span class=\"number\">0</span>].used == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        zfree(d-&gt;ht[<span class=\"number\">0</span>].table);</span><br><span class=\"line\">        d-&gt;ht[<span class=\"number\">0</span>] = d-&gt;ht[<span class=\"number\">1</span>];</span><br><span class=\"line\">        _dictReset(&amp;d-&gt;ht[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        d-&gt;rehashidx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* More to rehash... */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"跳跃表\"><a href=\"#跳跃表\" class=\"headerlink\" title=\"跳跃表\"></a>跳跃表</h3><p>是有序集合的底层实现之一。</p>\n<p>跳跃表是基于多指针有序链表实现的，可以看成多个有序链表。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/beba612e-dc5b-4fc2-869d-0b23408ac90a.png\" alt></a></p>\n<p>在查找时，从上层指针开始查找，找到对应的区间之后再到下一层去查找。下图演示了查找 22 的过程。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/0ea37ee2-c224-4c79-b895-e131c6805c40.png\" alt></a></p>\n<p>与红黑树等平衡树相比，跳跃表具有以下优点：</p>\n<ul>\n<li>插入速度非常快速，因为不需要进行旋转等操作来维护平衡性；</li>\n<li>更容易实现；</li>\n<li>支持无锁操作。</li>\n</ul>\n<h2 id=\"四、使用场景\"><a href=\"#四、使用场景\" class=\"headerlink\" title=\"四、使用场景\"></a>四、使用场景</h2><h3 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h3><p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>\n<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>\n<h3 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h3><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>\n<h3 id=\"查找表\"><a href=\"#查找表\" class=\"headerlink\" title=\"查找表\"></a>查找表</h3><p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>\n<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>\n<h3 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h3><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>\n<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>\n<h3 id=\"会话缓存\"><a href=\"#会话缓存\" class=\"headerlink\" title=\"会话缓存\"></a>会话缓存</h3><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。</p>\n<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p>\n<h3 id=\"分布式锁实现\"><a href=\"#分布式锁实现\" class=\"headerlink\" title=\"分布式锁实现\"></a>分布式锁实现</h3><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>\n<p>可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>\n<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>\n<h2 id=\"五、Redis-与-Memcached\"><a href=\"#五、Redis-与-Memcached\" class=\"headerlink\" title=\"五、Redis 与 Memcached\"></a>五、Redis 与 Memcached</h2><p>两者都是非关系型内存键值数据库，主要有以下不同：</p>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>Memcached 仅支持字符串类型，而 Redis 支持五种不同的数据类型，可以更灵活地解决问题。</p>\n<h3 id=\"数据持久化\"><a href=\"#数据持久化\" class=\"headerlink\" title=\"数据持久化\"></a>数据持久化</h3><p>Redis 支持两种持久化策略：RDB 快照和 AOF 日志，而 Memcached 不支持持久化。</p>\n<h3 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h3><p>Memcached 不支持分布式，只能通过在客户端使用一致性哈希来实现分布式存储，这种方式在存储和查询时都需要先在客户端计算一次数据所在的节点。</p>\n<p>Redis Cluster 实现了分布式的支持。</p>\n<h3 id=\"内存管理机制\"><a href=\"#内存管理机制\" class=\"headerlink\" title=\"内存管理机制\"></a>内存管理机制</h3><ul>\n<li><p>在 Redis 中，并不是所有数据都一直存储在内存中，可以将一些很久没用的 value 交换到磁盘，而 Memcached 的数据则会一直在内存中。</p>\n</li>\n<li><p>Memcached 将内存分割成特定长度的块来存储数据，以完全解决内存碎片的问题。但是这种方式会使得内存的利用率不高，例如块的大小为 128 bytes，只存储 100 bytes 的数据，那么剩下的 28 bytes 就浪费掉了。</p>\n</li>\n</ul>\n<h2 id=\"六、键的过期时间\"><a href=\"#六、键的过期时间\" class=\"headerlink\" title=\"六、键的过期时间\"></a>六、键的过期时间</h2><p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>\n<p>对于散列表这种容器，只能为整个键设置过期时间（整个散列表），而不能为键里面的单个元素设置过期时间。</p>\n<h2 id=\"七、数据淘汰策略\"><a href=\"#七、数据淘汰策略\" class=\"headerlink\" title=\"七、数据淘汰策略\"></a>七、数据淘汰策略</h2><p>可以设置内存最大使用量，当内存使用量超出时，会施行数据淘汰策略。</p>\n<p>Redis 具体有 6 种淘汰策略：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">策略</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">volatile-lru</td>\n<td style=\"text-align:center\">从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">volatile-ttl</td>\n<td style=\"text-align:center\">从已设置过期时间的数据集中挑选将要过期的数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">volatile-random</td>\n<td style=\"text-align:center\">从已设置过期时间的数据集中任意选择数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">allkeys-lru</td>\n<td style=\"text-align:center\">从所有数据集中挑选最近最少使用的数据淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">allkeys-random</td>\n<td style=\"text-align:center\">从所有数据集中任意选择数据进行淘汰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">noeviction</td>\n<td style=\"text-align:center\">禁止驱逐数据</td>\n</tr>\n</tbody>\n</table>\n<p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。</p>\n<p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p>\n<p>Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。</p>\n<h2 id=\"八、持久化\"><a href=\"#八、持久化\" class=\"headerlink\" title=\"八、持久化\"></a>八、持久化</h2><p>Redis 是内存型数据库，为了保证数据在断电后不会丢失，需要将内存中的数据持久化到硬盘上。</p>\n<h3 id=\"RDB-持久化\"><a href=\"#RDB-持久化\" class=\"headerlink\" title=\"RDB 持久化\"></a>RDB 持久化</h3><p>将某个时间点的所有数据都存放到硬盘上。</p>\n<p>可以将快照复制到其它服务器从而创建具有相同数据的服务器副本。</p>\n<p>如果系统发生故障，将会丢失最后一次创建快照之后的数据。</p>\n<p>如果数据量很大，保存快照的时间会很长。</p>\n<h3 id=\"AOF-持久化\"><a href=\"#AOF-持久化\" class=\"headerlink\" title=\"AOF 持久化\"></a>AOF 持久化</h3><p>将写命令添加到 AOF 文件（Append Only File）的末尾。</p>\n<p>使用 AOF 持久化需要设置同步选项，从而确保写命令什么时候会同步到磁盘文件上。这是因为对文件进行写入并不会马上将内容同步到磁盘上，而是先存储到缓冲区，然后由操作系统决定什么时候同步到磁盘。有以下同步选项：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">同步频率</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">always</td>\n<td style=\"text-align:center\">每个写命令都同步</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">everysec</td>\n<td style=\"text-align:center\">每秒同步一次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">no</td>\n<td style=\"text-align:center\">让操作系统来决定何时同步</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>always 选项会严重减低服务器的性能；</li>\n<li>everysec 选项比较合适，可以保证系统崩溃时只会丢失一秒左右的数据，并且 Redis 每秒执行一次同步对服务器性能几乎没有任何影响；</li>\n<li>no 选项并不能给服务器性能带来多大的提升，而且也会增加系统崩溃时数据丢失的数量。</li>\n</ul>\n<p>随着服务器写请求的增多，AOF 文件会越来越大。Redis 提供了一种将 AOF 重写的特性，能够去除 AOF 文件中的冗余写命令。</p>\n<h2 id=\"九、事务\"><a href=\"#九、事务\" class=\"headerlink\" title=\"九、事务\"></a>九、事务</h2><p>一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p>\n<p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p>\n<p>Redis 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。</p>\n<h2 id=\"十、事件\"><a href=\"#十、事件\" class=\"headerlink\" title=\"十、事件\"></a>十、事件</h2><p>Redis 服务器是一个事件驱动程序。</p>\n<h3 id=\"文件事件\"><a href=\"#文件事件\" class=\"headerlink\" title=\"文件事件\"></a>文件事件</h3><p>服务器通过套接字与客户端或者其它服务器进行通信，文件事件就是对套接字操作的抽象。</p>\n<p>Redis 基于 Reactor 模式开发了自己的网络事件处理器，使用 I/O 多路复用程序来同时监听多个套接字，并将到达的事件传送给文件事件分派器，分派器会根据套接字产生的事件类型调用相应的事件处理器。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/9ea86eb5-000a-4281-b948-7b567bd6f1d8.png\" alt></a></p>\n<h3 id=\"时间事件\"><a href=\"#时间事件\" class=\"headerlink\" title=\"时间事件\"></a>时间事件</h3><p>服务器有一些操作需要在给定的时间点执行，时间事件是对这类定时操作的抽象。</p>\n<p>时间事件又分为：</p>\n<ul>\n<li>定时事件：是让一段程序在指定的时间之内执行一次；</li>\n<li>周期性事件：是让一段程序每隔指定时间就执行一次。</li>\n</ul>\n<p>Redis 将所有时间事件都放在一个无序链表中，通过遍历整个链表查找出已到达的时间事件，并调用相应的事件处理器。</p>\n<h3 id=\"事件的调度与执行\"><a href=\"#事件的调度与执行\" class=\"headerlink\" title=\"事件的调度与执行\"></a>事件的调度与执行</h3><p>服务器需要不断监听文件事件的套接字才能得到待处理的文件事件，但是不能一直监听，否则时间事件无法在规定的时间内执行，因此监听时间应该根据距离现在最近的时间事件来决定。</p>\n<p>事件调度与执行由 aeProcessEvents 函数负责，伪代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">aeProcessEvents</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 获取到达时间离当前时间最接近的时间事件</span></span><br><span class=\"line\">  time_event = aeSearchNearestTimer()</span><br><span class=\"line\">  <span class=\"comment\"># 计算最接近的时间事件距离到达还有多少毫秒</span></span><br><span class=\"line\">  remaind_ms = time_event.when - unix_ts_now()</span><br><span class=\"line\">  <span class=\"comment\"># 如果事件已到达，那么 remaind_ms 的值可能为负数，将它设为 0</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> remaind_ms &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">      remaind_ms = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\"># 根据 remaind_ms 的值，创建 timeval</span></span><br><span class=\"line\">  timeval = create_timeval_with_ms(remaind_ms)</span><br><span class=\"line\">  <span class=\"comment\"># 阻塞并等待文件事件产生，最大阻塞时间由传入的 timeval 决定</span></span><br><span class=\"line\">  aeApiPoll(timeval)</span><br><span class=\"line\">  <span class=\"comment\"># 处理所有已产生的文件事件</span></span><br><span class=\"line\">  procesFileEvents()</span><br><span class=\"line\">  <span class=\"comment\"># 处理所有已到达的时间事件</span></span><br><span class=\"line\">  processTimeEvents()</span><br></pre></td></tr></table></figure>\n<p>将 aeProcessEvents 函数置于一个循环里面，加上初始化和清理函数，就构成了 Redis 服务器的主函数，伪代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"comment\"># 初始化服务器</span></span><br><span class=\"line\">  init_server()</span><br><span class=\"line\">  <span class=\"comment\"># 一直处理事件，直到服务器关闭为止</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> server_is_not_shutdown():</span><br><span class=\"line\">      aeProcessEvents()</span><br><span class=\"line\">  <span class=\"comment\"># 服务器关闭，执行清理操作</span></span><br><span class=\"line\">  clean_server()</span><br></pre></td></tr></table></figure>\n<p>从事件处理的角度来看，服务器运行流程如下：</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/c0a9fa91-da2e-4892-8c9f-80206a6f7047.png\" alt></a></p>\n<h2 id=\"十一、复制\"><a href=\"#十一、复制\" class=\"headerlink\" title=\"十一、复制\"></a>十一、复制</h2><p>通过使用 slaveof host port 命令来让一个服务器成为另一个服务器的从服务器。</p>\n<p>一个从服务器只能有一个主服务器，并且不支持主主复制。</p>\n<h3 id=\"连接过程\"><a href=\"#连接过程\" class=\"headerlink\" title=\"连接过程\"></a>连接过程</h3><ol>\n<li><p>主服务器创建快照文件，发送给从服务器，并在发送期间使用缓冲区记录执行的写命令。快照文件发送完毕之后，开始向从服务器发送存储在缓冲区中的写命令；</p>\n</li>\n<li><p>从服务器丢弃所有旧数据，载入主服务器发来的快照文件，之后从服务器开始接受主服务器发来的写命令；</p>\n</li>\n<li><p>主服务器每执行一次写命令，就向从服务器发送相同的写命令。</p>\n</li>\n</ol>\n<h3 id=\"主从链\"><a href=\"#主从链\" class=\"headerlink\" title=\"主从链\"></a>主从链</h3><p>随着负载不断上升，主服务器可能无法很快地更新所有从服务器，或者重新连接和重新同步从服务器将导致系统超载。为了解决这个问题，可以创建一个中间层来分担主服务器的复制工作。中间层的服务器是最上层服务器的从服务器，又是最下层服务器的主服务器。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/395a9e83-b1a1-4a1d-b170-d081e7bb5bab.png\" alt></a></p>\n<h2 id=\"十二、Sentinel\"><a href=\"#十二、Sentinel\" class=\"headerlink\" title=\"十二、Sentinel\"></a>十二、Sentinel</h2><p>Sentinel（哨兵）可以监听集群中的服务器，并在主服务器进入下线状态时，自动从从服务器中选举出新的主服务器。</p>\n<h2 id=\"十三、分片\"><a href=\"#十三、分片\" class=\"headerlink\" title=\"十三、分片\"></a>十三、分片</h2><p>分片是将数据划分为多个部分的方法，可以将数据存储到多台机器里面，这种方法在解决某些问题时可以获得线性级别的性能提升。</p>\n<p>假设有 4 个 Redis 实例 R0，R1，R2，R3，还有很多表示用户的键 user:1，user:2，… ，有不同的方式来选择一个指定的键存储在哪个实例中。</p>\n<ul>\n<li>最简单的方式是范围分片，例如用户 id 从 0~1000 的存储到实例 R0 中，用户 id 从 1001~2000 的存储到实例 R1 中，等等。但是这样需要维护一张映射范围表，维护操作代价很高。</li>\n<li>还有一种方式是哈希分片，使用 CRC32 哈希函数将键转换为一个数字，再对实例数量求模就能知道应该存储的实例。</li>\n</ul>\n<p>根据执行分片的位置，可以分为三种分片方式：</p>\n<ul>\n<li>客户端分片：客户端使用一致性哈希等算法决定键应当分布到哪个节点。</li>\n<li>代理分片：将客户端请求发送到代理上，由代理转发请求到正确的节点上。</li>\n<li>服务器分片：Redis Cluster。</li>\n</ul>\n<h2 id=\"十四、一个简单的论坛系统分析\"><a href=\"#十四、一个简单的论坛系统分析\" class=\"headerlink\" title=\"十四、一个简单的论坛系统分析\"></a>十四、一个简单的论坛系统分析</h2><p>该论坛系统功能如下：</p>\n<ul>\n<li>可以发布文章；</li>\n<li>可以对文章进行点赞；</li>\n<li>在首页可以按文章的发布时间或者文章的点赞数进行排序显示。</li>\n</ul>\n<h3 id=\"文章信息\"><a href=\"#文章信息\" class=\"headerlink\" title=\"文章信息\"></a>文章信息</h3><p>文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。</p>\n<p>Redis 没有关系型数据库中的表这一概念来将同种类型的数据存放在一起，而是使用命名空间的方式来实现这一功能。键名的前面部分存储命名空间，后面部分的内容存储 ID，通常使用 : 来进行分隔。例如下面的 HASH 的键名为 article:92617，其中 article 为命名空间，ID 为 92617。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/7c54de21-e2ff-402e-bc42-4037de1c1592.png\" alt></a></p>\n<h3 id=\"点赞功能\"><a href=\"#点赞功能\" class=\"headerlink\" title=\"点赞功能\"></a>点赞功能</h3><p>当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。</p>\n<p>为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/485fdf34-ccf8-4185-97c6-17374ee719a0.png\" alt></a></p>\n<h3 id=\"对文章进行排序\"><a href=\"#对文章进行排序\" class=\"headerlink\" title=\"对文章进行排序\"></a>对文章进行排序</h3><p>为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）</p>\n<p><a href=\"/CyC2018/CS-Notes/blob/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png\"><img src=\"https://github.com/CyC2018/CS-Notes/raw/master/notes/pics/f7d170a3-e446-4a64-ac2d-cb95028f81a8.png\" alt></a></p>"},{"title":"消息队列（一）：基础介绍","date":"2019-05-30T02:02:41.000Z","toc":true,"_content":"\n## 一.消息模型\n\n- **点对点**\n  消息生产者向消息队列中发送消息，只能被消费一次\n\n![](/images/发布订阅.png)\n\n<!-- more -->\n- **发布/订阅**和观察者模式有以下不同\n\n> 1. 观察者模式中，观察者和主题都知道对方的存在，而发布订阅模式中，生产者和消费者不知道对方的存在，他们通过频道通信\n> 2. 观察者模式是同步的，当时间触发时，主题会调用观察者方法，然后等待方法返回。而发布与订阅模式是异步的，生产者向频道发送一个消息后，就不需要关心消费者何时去订阅这个消息，可以立即返回。\n\n![](/images/发布订阅与观察者区别.png)\n\n## 二.使用场景\n\n- **异步处理**\n  发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。\n\n  例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。\n\n  只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。\n\n  后续可以添加更多的例子:\n\n  `日志处理`\n  `消息通讯（聊天室等）`\n\n- **流量削峰**\n  在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。\n\n  可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。\n\n- **应用解耦**\n  如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。\n\n  通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。\n\n## 三.可靠性\n\n- **发送端的可靠性**\n  发送端完成操作后一定能将消息成功发送到消息队列中。\n\n  实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。\n\n- **接收端的可靠性**\n  接收端能够从消息队列成功消费一次消息。\n\n  两种实现方法：\n\n- 保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。\n- 保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。\n\n## 四.优缺点\n\n- **优点**\n  解耦: 每个成员不必受其他成员影响，可以更独立自主，只通过一个简单的容器来联系。\n  提速: 其实就是支持异步操作，能节约大量时间\n  广播: 新同伴新加入成本很低\n  削峰: 遇上突然的大量请求，只需要在多久时间内处理完成即可。\n\n- **缺点**\n  引入复杂度: 需要地方防止，也需要考虑安全性。\n  暂时的不一致性: 这个很好理解，并不等于放入队列就是执行完成。\n  > 其实还存在失败的可能性，如果保证顺序执行，且还能重复执行就是另个比较深的问题了。\n\n## 五.应用场景\n\n- **生产者不需要从消费者处获得反馈**\n\n- **容许暂时不一致性**\n\n- **产生副作用的效益高于成本**","source":"_posts/2019-05-30-something-about-mq.md","raw":"---\ntitle: 消息队列（一）：基础介绍\ndate: 2019-05-30 10:02:41\ntags: [ 消息队列, 设计 ]\ncategories: 技术\ntoc: true\n---\n\n## 一.消息模型\n\n- **点对点**\n  消息生产者向消息队列中发送消息，只能被消费一次\n\n![](/images/发布订阅.png)\n\n<!-- more -->\n- **发布/订阅**和观察者模式有以下不同\n\n> 1. 观察者模式中，观察者和主题都知道对方的存在，而发布订阅模式中，生产者和消费者不知道对方的存在，他们通过频道通信\n> 2. 观察者模式是同步的，当时间触发时，主题会调用观察者方法，然后等待方法返回。而发布与订阅模式是异步的，生产者向频道发送一个消息后，就不需要关心消费者何时去订阅这个消息，可以立即返回。\n\n![](/images/发布订阅与观察者区别.png)\n\n## 二.使用场景\n\n- **异步处理**\n  发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。\n\n  例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。\n\n  只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。\n\n  后续可以添加更多的例子:\n\n  `日志处理`\n  `消息通讯（聊天室等）`\n\n- **流量削峰**\n  在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。\n\n  可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。\n\n- **应用解耦**\n  如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。\n\n  通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。\n\n## 三.可靠性\n\n- **发送端的可靠性**\n  发送端完成操作后一定能将消息成功发送到消息队列中。\n\n  实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。\n\n- **接收端的可靠性**\n  接收端能够从消息队列成功消费一次消息。\n\n  两种实现方法：\n\n- 保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。\n- 保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。\n\n## 四.优缺点\n\n- **优点**\n  解耦: 每个成员不必受其他成员影响，可以更独立自主，只通过一个简单的容器来联系。\n  提速: 其实就是支持异步操作，能节约大量时间\n  广播: 新同伴新加入成本很低\n  削峰: 遇上突然的大量请求，只需要在多久时间内处理完成即可。\n\n- **缺点**\n  引入复杂度: 需要地方防止，也需要考虑安全性。\n  暂时的不一致性: 这个很好理解，并不等于放入队列就是执行完成。\n  > 其实还存在失败的可能性，如果保证顺序执行，且还能重复执行就是另个比较深的问题了。\n\n## 五.应用场景\n\n- **生产者不需要从消费者处获得反馈**\n\n- **容许暂时不一致性**\n\n- **产生副作用的效益高于成本**","slug":"something-about-mq","published":1,"updated":"2019-05-31T07:57:47.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwkhgipt0004coc41a9lq39s","content":"<h2 id=\"一-消息模型\"><a href=\"#一-消息模型\" class=\"headerlink\" title=\"一.消息模型\"></a>一.消息模型</h2><ul>\n<li><strong>点对点</strong><br>消息生产者向消息队列中发送消息，只能被消费一次</li>\n</ul>\n<p><img src=\"/images/发布订阅.png\" alt></p>\n<a id=\"more\"></a>\n<ul>\n<li><strong>发布/订阅</strong>和观察者模式有以下不同</li>\n</ul>\n<blockquote>\n<ol>\n<li>观察者模式中，观察者和主题都知道对方的存在，而发布订阅模式中，生产者和消费者不知道对方的存在，他们通过频道通信</li>\n<li>观察者模式是同步的，当时间触发时，主题会调用观察者方法，然后等待方法返回。而发布与订阅模式是异步的，生产者向频道发送一个消息后，就不需要关心消费者何时去订阅这个消息，可以立即返回。</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/发布订阅与观察者区别.png\" alt></p>\n<h2 id=\"二-使用场景\"><a href=\"#二-使用场景\" class=\"headerlink\" title=\"二.使用场景\"></a>二.使用场景</h2><ul>\n<li><p><strong>异步处理</strong><br>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。</p>\n<p>例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p>\n<p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p>\n<p>后续可以添加更多的例子:</p>\n<p><code>日志处理</code><br><code>消息通讯（聊天室等）</code></p>\n</li>\n<li><p><strong>流量削峰</strong><br>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p>\n<p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。</p>\n</li>\n<li><p><strong>应用解耦</strong><br>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p>\n<p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。</p>\n</li>\n</ul>\n<h2 id=\"三-可靠性\"><a href=\"#三-可靠性\" class=\"headerlink\" title=\"三.可靠性\"></a>三.可靠性</h2><ul>\n<li><p><strong>发送端的可靠性</strong><br>发送端完成操作后一定能将消息成功发送到消息队列中。</p>\n<p>实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</p>\n</li>\n<li><p><strong>接收端的可靠性</strong><br>接收端能够从消息队列成功消费一次消息。</p>\n<p>两种实现方法：</p>\n</li>\n<li><p>保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。</p>\n</li>\n<li>保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。</li>\n</ul>\n<h2 id=\"四-优缺点\"><a href=\"#四-优缺点\" class=\"headerlink\" title=\"四.优缺点\"></a>四.优缺点</h2><ul>\n<li><p><strong>优点</strong><br>解耦: 每个成员不必受其他成员影响，可以更独立自主，只通过一个简单的容器来联系。<br>提速: 其实就是支持异步操作，能节约大量时间<br>广播: 新同伴新加入成本很低<br>削峰: 遇上突然的大量请求，只需要在多久时间内处理完成即可。</p>\n</li>\n<li><p><strong>缺点</strong><br>引入复杂度: 需要地方防止，也需要考虑安全性。<br>暂时的不一致性: 这个很好理解，并不等于放入队列就是执行完成。</p>\n<blockquote>\n<p>其实还存在失败的可能性，如果保证顺序执行，且还能重复执行就是另个比较深的问题了。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"五-应用场景\"><a href=\"#五-应用场景\" class=\"headerlink\" title=\"五.应用场景\"></a>五.应用场景</h2><ul>\n<li><p><strong>生产者不需要从消费者处获得反馈</strong></p>\n</li>\n<li><p><strong>容许暂时不一致性</strong></p>\n</li>\n<li><p><strong>产生副作用的效益高于成本</strong></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一-消息模型\"><a href=\"#一-消息模型\" class=\"headerlink\" title=\"一.消息模型\"></a>一.消息模型</h2><ul>\n<li><strong>点对点</strong><br>消息生产者向消息队列中发送消息，只能被消费一次</li>\n</ul>\n<p><img src=\"/images/发布订阅.png\" alt></p>","more":"<ul>\n<li><strong>发布/订阅</strong>和观察者模式有以下不同</li>\n</ul>\n<blockquote>\n<ol>\n<li>观察者模式中，观察者和主题都知道对方的存在，而发布订阅模式中，生产者和消费者不知道对方的存在，他们通过频道通信</li>\n<li>观察者模式是同步的，当时间触发时，主题会调用观察者方法，然后等待方法返回。而发布与订阅模式是异步的，生产者向频道发送一个消息后，就不需要关心消费者何时去订阅这个消息，可以立即返回。</li>\n</ol>\n</blockquote>\n<p><img src=\"/images/发布订阅与观察者区别.png\" alt></p>\n<h2 id=\"二-使用场景\"><a href=\"#二-使用场景\" class=\"headerlink\" title=\"二.使用场景\"></a>二.使用场景</h2><ul>\n<li><p><strong>异步处理</strong><br>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其它操作。消息接收者从消息队列中订阅消息之后异步处理。</p>\n<p>例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p>\n<p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p>\n<p>后续可以添加更多的例子:</p>\n<p><code>日志处理</code><br><code>消息通讯（聊天室等）</code></p>\n</li>\n<li><p><strong>流量削峰</strong><br>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p>\n<p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中订阅消息进行处理。</p>\n</li>\n<li><p><strong>应用解耦</strong><br>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p>\n<p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。</p>\n</li>\n</ul>\n<h2 id=\"三-可靠性\"><a href=\"#三-可靠性\" class=\"headerlink\" title=\"三.可靠性\"></a>三.可靠性</h2><ul>\n<li><p><strong>发送端的可靠性</strong><br>发送端完成操作后一定能将消息成功发送到消息队列中。</p>\n<p>实现方法：在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</p>\n</li>\n<li><p><strong>接收端的可靠性</strong><br>接收端能够从消息队列成功消费一次消息。</p>\n<p>两种实现方法：</p>\n</li>\n<li><p>保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。</p>\n</li>\n<li>保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。</li>\n</ul>\n<h2 id=\"四-优缺点\"><a href=\"#四-优缺点\" class=\"headerlink\" title=\"四.优缺点\"></a>四.优缺点</h2><ul>\n<li><p><strong>优点</strong><br>解耦: 每个成员不必受其他成员影响，可以更独立自主，只通过一个简单的容器来联系。<br>提速: 其实就是支持异步操作，能节约大量时间<br>广播: 新同伴新加入成本很低<br>削峰: 遇上突然的大量请求，只需要在多久时间内处理完成即可。</p>\n</li>\n<li><p><strong>缺点</strong><br>引入复杂度: 需要地方防止，也需要考虑安全性。<br>暂时的不一致性: 这个很好理解，并不等于放入队列就是执行完成。</p>\n<blockquote>\n<p>其实还存在失败的可能性，如果保证顺序执行，且还能重复执行就是另个比较深的问题了。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"五-应用场景\"><a href=\"#五-应用场景\" class=\"headerlink\" title=\"五.应用场景\"></a>五.应用场景</h2><ul>\n<li><p><strong>生产者不需要从消费者处获得反馈</strong></p>\n</li>\n<li><p><strong>容许暂时不一致性</strong></p>\n</li>\n<li><p><strong>产生副作用的效益高于成本</strong></p>\n</li>\n</ul>"},{"title":"数据库基础概念","date":"2019-06-06T09:24:27.000Z","toc":true,"_content":"\n## 一、数据库事务的四个特性 ACID\n\n`Atomicity(原子性)` `Consistency(一致性)` `Isolution(隔离性)` `Durability(持久性)`\n<!-- more -->\n- **原子性**\n  原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n\n- **一致性**\n  一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n  > 数据库事物的一致性就规定了事物提交前后，永远只可能存在事物提交前的状态和事物提交后的状态，从一个一致性的状态到另一个一致性状态，而不可能出现中间的过程态。也就是说事物的执行结果是量子化状态，而不是线性状态。\n\n- **隔离性**\n  事务的隔离性，基于原子性和一致性，因为事物是原子化，量子化的，所以，事物可以有多个原子包的形式并发执行，但是，每个事务相互隔离(具体的隔离级别是按数据库的情况定的)。\n  > 当数据库上有多个事务同时执行的时候，就可能出现`脏读(dirt readd)`、`不可重复读(non-repeatable reareadd)`和`幻读(phantom read d)`\n\n- **持久性**\n  事务只要提交了，数据库状态会永远发生变化，即使宕机了。\n\n## 二、隔离性特别说明\n\n### 隔离引发的问题\n\n`脏读(dirty read)` `不可重复读(non-repeatable rearead)` `幻读(phantom read)`\n\n### 隔离的四个级别\n\n`读未提交(read uncommitted)` `读提交(read committed)` `可重复读(repeatable read)` `串行化(serializable)`\n  \n- **读未提交**\n  一个事务还没提交时，变更就可以被别的事务看到。\n\n- **读提交**\n  一个事务提交之后，它做的变更才会被其他事务看到。\n\n- **可重复读**\n  一个事务执行的过程中看到的数据，总是跟这个事务再启动时看到的数据是一致的。在此隔离级别下，未提交变更对其他事务也是不可见的。\n\n- **串行化**\n  对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\n","source":"_posts/2019-06-06-database-basic.md","raw":"---\ntitle: 数据库基础概念\ndate: 2019-06-06 17:24:27\ntags: [ 数据库 ]\ncategories: 技术\ntoc: true\n---\n\n## 一、数据库事务的四个特性 ACID\n\n`Atomicity(原子性)` `Consistency(一致性)` `Isolution(隔离性)` `Durability(持久性)`\n<!-- more -->\n- **原子性**\n  原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。\n\n- **一致性**\n  一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。\n  > 数据库事物的一致性就规定了事物提交前后，永远只可能存在事物提交前的状态和事物提交后的状态，从一个一致性的状态到另一个一致性状态，而不可能出现中间的过程态。也就是说事物的执行结果是量子化状态，而不是线性状态。\n\n- **隔离性**\n  事务的隔离性，基于原子性和一致性，因为事物是原子化，量子化的，所以，事物可以有多个原子包的形式并发执行，但是，每个事务相互隔离(具体的隔离级别是按数据库的情况定的)。\n  > 当数据库上有多个事务同时执行的时候，就可能出现`脏读(dirt readd)`、`不可重复读(non-repeatable reareadd)`和`幻读(phantom read d)`\n\n- **持久性**\n  事务只要提交了，数据库状态会永远发生变化，即使宕机了。\n\n## 二、隔离性特别说明\n\n### 隔离引发的问题\n\n`脏读(dirty read)` `不可重复读(non-repeatable rearead)` `幻读(phantom read)`\n\n### 隔离的四个级别\n\n`读未提交(read uncommitted)` `读提交(read committed)` `可重复读(repeatable read)` `串行化(serializable)`\n  \n- **读未提交**\n  一个事务还没提交时，变更就可以被别的事务看到。\n\n- **读提交**\n  一个事务提交之后，它做的变更才会被其他事务看到。\n\n- **可重复读**\n  一个事务执行的过程中看到的数据，总是跟这个事务再启动时看到的数据是一致的。在此隔离级别下，未提交变更对其他事务也是不可见的。\n\n- **串行化**\n  对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。\n","slug":"database-basic","published":1,"updated":"2019-06-06T09:53:04.886Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwkhgipv0005coc47ctxy74u","content":"<h2 id=\"一、数据库事务的四个特性-ACID\"><a href=\"#一、数据库事务的四个特性-ACID\" class=\"headerlink\" title=\"一、数据库事务的四个特性 ACID\"></a>一、数据库事务的四个特性 ACID</h2><p><code>Atomicity(原子性)</code> <code>Consistency(一致性)</code> <code>Isolution(隔离性)</code> <code>Durability(持久性)</code><br><a id=\"more\"></a></p>\n<ul>\n<li><p><strong>原子性</strong><br>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n</li>\n<li><p><strong>一致性</strong><br>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<blockquote>\n<p>数据库事物的一致性就规定了事物提交前后，永远只可能存在事物提交前的状态和事物提交后的状态，从一个一致性的状态到另一个一致性状态，而不可能出现中间的过程态。也就是说事物的执行结果是量子化状态，而不是线性状态。</p>\n</blockquote>\n</li>\n<li><p><strong>隔离性</strong><br>事务的隔离性，基于原子性和一致性，因为事物是原子化，量子化的，所以，事物可以有多个原子包的形式并发执行，但是，每个事务相互隔离(具体的隔离级别是按数据库的情况定的)。</p>\n<blockquote>\n<p>当数据库上有多个事务同时执行的时候，就可能出现<code>脏读(dirt readd)</code>、<code>不可重复读(non-repeatable reareadd)</code>和<code>幻读(phantom read d)</code></p>\n</blockquote>\n</li>\n<li><p><strong>持久性</strong><br>事务只要提交了，数据库状态会永远发生变化，即使宕机了。</p>\n</li>\n</ul>\n<h2 id=\"二、隔离性特别说明\"><a href=\"#二、隔离性特别说明\" class=\"headerlink\" title=\"二、隔离性特别说明\"></a>二、隔离性特别说明</h2><h3 id=\"隔离引发的问题\"><a href=\"#隔离引发的问题\" class=\"headerlink\" title=\"隔离引发的问题\"></a>隔离引发的问题</h3><p><code>脏读(dirty read)</code> <code>不可重复读(non-repeatable rearead)</code> <code>幻读(phantom read)</code></p>\n<h3 id=\"隔离的四个级别\"><a href=\"#隔离的四个级别\" class=\"headerlink\" title=\"隔离的四个级别\"></a>隔离的四个级别</h3><p><code>读未提交(read uncommitted)</code> <code>读提交(read committed)</code> <code>可重复读(repeatable read)</code> <code>串行化(serializable)</code></p>\n<ul>\n<li><p><strong>读未提交</strong><br>一个事务还没提交时，变更就可以被别的事务看到。</p>\n</li>\n<li><p><strong>读提交</strong><br>一个事务提交之后，它做的变更才会被其他事务看到。</p>\n</li>\n<li><p><strong>可重复读</strong><br>一个事务执行的过程中看到的数据，总是跟这个事务再启动时看到的数据是一致的。在此隔离级别下，未提交变更对其他事务也是不可见的。</p>\n</li>\n<li><p><strong>串行化</strong><br>对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、数据库事务的四个特性-ACID\"><a href=\"#一、数据库事务的四个特性-ACID\" class=\"headerlink\" title=\"一、数据库事务的四个特性 ACID\"></a>一、数据库事务的四个特性 ACID</h2><p><code>Atomicity(原子性)</code> <code>Consistency(一致性)</code> <code>Isolution(隔离性)</code> <code>Durability(持久性)</code><br></p>","more":"</p>\n<ul>\n<li><p><strong>原子性</strong><br>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p>\n</li>\n<li><p><strong>一致性</strong><br>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>\n<blockquote>\n<p>数据库事物的一致性就规定了事物提交前后，永远只可能存在事物提交前的状态和事物提交后的状态，从一个一致性的状态到另一个一致性状态，而不可能出现中间的过程态。也就是说事物的执行结果是量子化状态，而不是线性状态。</p>\n</blockquote>\n</li>\n<li><p><strong>隔离性</strong><br>事务的隔离性，基于原子性和一致性，因为事物是原子化，量子化的，所以，事物可以有多个原子包的形式并发执行，但是，每个事务相互隔离(具体的隔离级别是按数据库的情况定的)。</p>\n<blockquote>\n<p>当数据库上有多个事务同时执行的时候，就可能出现<code>脏读(dirt readd)</code>、<code>不可重复读(non-repeatable reareadd)</code>和<code>幻读(phantom read d)</code></p>\n</blockquote>\n</li>\n<li><p><strong>持久性</strong><br>事务只要提交了，数据库状态会永远发生变化，即使宕机了。</p>\n</li>\n</ul>\n<h2 id=\"二、隔离性特别说明\"><a href=\"#二、隔离性特别说明\" class=\"headerlink\" title=\"二、隔离性特别说明\"></a>二、隔离性特别说明</h2><h3 id=\"隔离引发的问题\"><a href=\"#隔离引发的问题\" class=\"headerlink\" title=\"隔离引发的问题\"></a>隔离引发的问题</h3><p><code>脏读(dirty read)</code> <code>不可重复读(non-repeatable rearead)</code> <code>幻读(phantom read)</code></p>\n<h3 id=\"隔离的四个级别\"><a href=\"#隔离的四个级别\" class=\"headerlink\" title=\"隔离的四个级别\"></a>隔离的四个级别</h3><p><code>读未提交(read uncommitted)</code> <code>读提交(read committed)</code> <code>可重复读(repeatable read)</code> <code>串行化(serializable)</code></p>\n<ul>\n<li><p><strong>读未提交</strong><br>一个事务还没提交时，变更就可以被别的事务看到。</p>\n</li>\n<li><p><strong>读提交</strong><br>一个事务提交之后，它做的变更才会被其他事务看到。</p>\n</li>\n<li><p><strong>可重复读</strong><br>一个事务执行的过程中看到的数据，总是跟这个事务再启动时看到的数据是一致的。在此隔离级别下，未提交变更对其他事务也是不可见的。</p>\n</li>\n<li><p><strong>串行化</strong><br>对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</p>\n</li>\n</ul>"},{"title":"创业的一些参考","date":"2019-05-24T08:02:12.000Z","toc":true,"_content":"\n今天的这篇文章从反常识的数据开始谈起，基于**中国的机遇与优势、实体经济、改变偏见，下沉市场、海外市场，新金融时代**等板块，展开对新商业文明时代的看法。\n<!-- more -->\n\n在开启本篇的阅读前，大家先思考两个问题：\n\n> `1.你真的了解中国嘛？`\n> `2.你最看重的创业机会有哪些？`\n\n## 一、九个反常识的数据\n\n**① 全国约有 90% 以上的人没有喝过星巴克**\n\n这是我经过逻辑推理得出的。\n\n去年，星巴克宣布将 700 万星巴克会员接入支付宝。基于这个数据，我做了一系列推理。\n\n如果我们算每 7 个客户有一个开通会员，那么就是 4900 万，10 个里有 1 个是 7000 万。\n\n星巴克在上海的门店是最多的，500 家以上，这个城市 2500-3000 万的人口（含流动），三成喝过的话，是 900 万。\n\n中国目前星巴克的门店数是 3400 家，大多数覆盖在一二线城市。一线新一线二线（含广义二线）的人口总数不超过 3.6 亿，里面三成是 10800 万，2 成是 7200 万（越往下门店很少，渗透率很低，全量来看不超过 1.5 成，以上换算只提供思路，不代表最终实际数据。）\n\n因为我没有准确数据，我只能倒推，无论从哪个角度去倒推，**90% 的人都没有喝过星巴克。**\n\n故而，知道并不等于喝过，并且一定有海量的人不知道星巴克。以上数据，依然是比较保守的推断。\n\n**② 50% 以上的中国人没有喝过农夫山泉**\n\n2016 年，农夫山泉的年销售额达到了 109.11 亿元，其中包含新产品和高端产品，桶装水，会议酒店供水等等。我一年可能要花 2400 元以上在农夫山泉上。\n\n按照这个销售额计算，**假设客单价 20 元，那么只有 5 亿多人喝过农夫山泉。**\n\n《2018 全球品牌足迹报告》显示，农夫山泉消费者触及数达 3.35 亿。虽然农夫山泉的客单价不高，但是它的受众人群比较集中。\n\n故而，即使这个品牌是大众到不能再大众的了，依然不可能做到人人都喝。\n\n**③ 中国约有 1000 万人从事足疗行业**\n\n仅北京市就有 20 万人从事足疗，推算一下，中国有 661 个城市，那么 1000 万这个数字依然是保守的估计。\n\n**④ 13 亿人没有出过国**\n\n中国出入境管理局发布，2018 年全国有效的因私普通护照私有量为 1.3 亿本。也就是说，起码有 90% 的中国人没有出过国。\n\n**⑤ 10 亿人没有坐过飞机**\n\n为什么每次坐飞机的时候工作人员都会演示一遍安全操作？因为跟你一起坐飞机的人中，起码有一半人是第一次坐飞机。\n\n中国头等舱用户不超过 600 万，每年常旅客不超过 1500 万（年飞行超过 6 次的称为常旅客）。\n\n由此可以看出：在航空杂志投广告，其实就只有那 1500 万常旅客能看到。所以，航空业广告商做廉价产品是行不通的，只有针对那 1500 万人的产品和服务才能实现有效目的。\n\n国航的白金卡用户不超过 5 万人，听说东航不超过 5000 人（除了一些特殊渠道，一年盯着一个航空飞行 120 次经济舱，60 次商务舱，40 次洲际公务舱才能拿到这个白金卡）。\n\n**⑥ 中国最大的便利店不是全家，而是中石化旗下的易捷便利店**\n\n每一个中石化加油站旁边都有一个易捷便利店。\n\n目前是中国最大的便利店，有 25000 多家门店，《2018 中国便利店发展报告》显示，易捷便利店占全国便利店超过 20% 的份额，很难被超越。\n\n**⑦ 处于房地产中介金字塔塔尖的，通常是穿着拖鞋、汗衫的二房东**\n\n像上海静安区的一些小别墅，还有北京的四合院，都是少量不可再生的，往往这些房子很受欢迎，很多人喜欢租这样的房子。\n\n我们公司租的房子的二房东就是这样的人。\n\n早期做租赁的中介发现这一现象后，就把这些房子一套套收过来进行改装，进而成为二房东。\n\n我大概计算了一下，如果成为 20 套老别墅的二房东，每个月净利润可达 50 万，每套差价在 2-5 万之间，合同一签就是 10 年。\n\n**⑧ 进口猪蹄比国内猪蹄便宜 30%—50%**\n\n因为除了中国、德国等少数国家，全世界大多数人不吃猪蹄。在很多国家，猪蹄被当做废品处理，中国人把它收购拿回国内，比在国内采购还便宜。\n\n**⑨ 中国产的棉毛裤在西班牙可以卖 10 倍的价格**\n\n过去，欧洲人是不知道世界上还有个东西叫棉毛裤。\n\n中国有个小伙子，把浙江生产的内销不掉的棉毛裤拖到欧洲，在他们冬天特别冷的时候卖，卖得特别好。\n\n## 二、中国的四大优势和巨大契机\n\n如果这四点不发生根本性改变，那么我们依然是有巨大的机会。\n\n**① 中国具有全球最强的终端制造产业链和产业集群**\n\n有一次我去印度和埃及，带的是 iPhone 手机，手机上套了一个有 6 个玻璃镜头的手机壳，当地人都非常好奇，问我这是什么？他们根本没有见过这样的手机壳。\n\n6 个镜头的手机壳在中国被认为是低端制造，但其实它在全球属于中端制造了，因为全球绝大多数地区都无法生产出来。\n\n因为这个产品涉及的产业链和零部件非常多，而全世界也只有中国能够最高效、最低价、最批量地生产，并以最大规模的消耗掉。\n\n还有一个现象也很有趣，**在中国南部和东部地区，有大量县城变成了一个个产业集群，**整个县城都围绕着一个生意展开，在那里走几公里就能找到一切你需要的东西，但在别的国家，这可能是要跨国才能完成的。\n\n对中国制造我有一个基本的判断：中国是全球最强的中端制造大国，没有之一。任何一个国家无 30 年积累，无政策连贯性支持，无法取代中国中端制造的优势。\n\n**② 我们的劳动力已不是全球最便宜的，但是劳动力素质全球最高**\n\n现在只有中国的劳动力是最具有勤劳、刻苦精神的。越南、柬埔寨的劳动力确实便宜，非洲的劳动力更低，但是和中国相比，职业技能不可同日而语。\n\n**③ 我们依然是全球最大的消费市场**\n\n今天大部分中国人已经改变了储蓄的习惯，乐于消费。\n\n**④ 中国人是全球最渴望改变命运的**\n\n印度人都信印度教，印度教告诉你人分等级，这辈子好好修行，下辈子再升级到婆罗门。中国没有这样的教育，中国人都相信通过努力能过得更好一点。\n\n## 三、在这里，读懂中国\n\n关于人口，大多数人对其判断都是非常情绪化的，也是错误的。\n\n一些美国经济学家研究发现：长期高速的经济增长会对国民性格产生很多改变，他们会更乐观、更自信、更积极向上、更开放、更包容。\n\n而这些因素集中体现在今天中国的 00 后身上。\n\n**1. 很多农村地区幸福指数远高于城市**\n\n农村收入并不高，但他们有宅基地，有自留地，他们可以将自留地租出去，每年收取租金。某些地区，他们的幸福指数很高，远远高于发达地区。\n\n基于大量的观察发现，现在农村里种地的人很少，并且几乎都是机械化种植，很多人会外出打工。\n\n但是在他们眼里，大城市不是他们的世界，老了还是要回去，因为老家还有地。只要想到自己有土地，他们吃再多苦，都是乐意的。\n\n**2. 90 后到 00 后的消费观发生很大变化**\n\n**① 消费升级**\n\n90 后、00 后在社会认同感上的消费，在他们进入社会几年后就会和上一代人趋同，并且更愿意提前完成这种认同感的消费。\n\n他们中很多人的第一辆车一定不是雪佛兰，而是直接进入高端车的低配版，所以奔驰 C 系列、宝马 3 系、宝马 X1 都卖得特别好。\n\n**另外，奢侈品年轻化趋势非常明显。**在中国，更多女生在 20 多岁左右就开始用 La Mer，而在欧美，更多成熟女性选择它，不仅仅是钱的问题。\n\n我认为 90 后的第一次装修是一波不可再生的资源，并且这波 90 后一定比后面的每一代人都多。\n\n对于装修来说，很多大件，包括家电、家居、甚至小家电，是不会随便更换的，而 90 后的结婚潮已经到来，虽然他们中有很多人选择了不婚和晚婚，但是在压力较小的三四线，这一波行情还是比较明显的。\n\n所以，**一定要抓住 90 后的装修升级，如果错过了，可能三五年内都没有消费了。**\n\n**② 孤独催生商机**\n\n90 后比较懒，还有独生子女病，孤独将催生一大波的商机。\n\n孤独的年轻人喜欢养动物，他们会带宠物去按摩和游泳，等到他们出差的时候，会找个宠物店寄养，一个不到 1 平方米的地方 1 天要花 300 块。\n\n此外，还有专门的宠物殡葬，基于此，宠物市场一定还会扩大，并且每年快速增长。\n\n**③ 比起 KOL，他们更相信真实用户反馈**\n\n在腾讯提供的 00 后报告中，我们能够看到，KOL（关键意见领袖）的影响力在下降，比起 KOL，00 后更相信真实的用户反馈。\n\n对于所有品牌主来说，未来的投放会变得很难，因为你需要对接海量的超级用户，并且你要把他们当作一件很重要的事情去运营。\n\n**④ 对国产品牌的认知正在改变**\n\n今天，国产品牌并不比国外品牌差，这个问题在 00 后的心目中正在形成。\n\n主要有以下 3 个原因：\n\n**第一，中国制造真的在进步；**\n\n第二，大量国外品牌把落后的生产线丢到中国，现在才开始重视中国市场，但已经晚了，因为中国品牌的反应速度更快；\n\n**第三，00 后成长的年代就是民族自豪感产生的年代。**\n\n对于 00 后来说，他们向往在专注领域有深刻见解的品牌。\n\n老一代人恨不得一个产品具备所有功能，但是今天 00 后更喜欢专业领域的、垂直的、优秀的品牌。\n\n**⑤  00 后的存款是 90 后的两倍**\n\n虽然 00 后存款只有 1840 元，但 90 后更少，只有 800 元（数据来源于腾讯最新的 00 后研究报告）。\n\n**3.关于人口红利**\n\n我们总是很悲观地说人口红利没有了，其实只是分红方式发生了改变。\n\n现在的人口红利正在体现为地区性、结构性和微观性，每个地区不是统一统筹的。\n\n即使目前中国年轻劳动力更少了，但依然在绝对数量上超越了大多数国家，并且中国的劳动力具有素质跟薪资的平衡优势。\n\n不要老是觉得员工就应该给你干什么，这是错的。你首先要思考的是，你能为你的员工干什么，能帮助他们实现什么。\n\n也就是说，梦想要有，但回馈也要有。\n\n**4.劳动力总数还在增长**\n\n目前我国劳动力还没有衰退，去年农民工总数比上年增长了 0.6%。农民进一步从土地中解放出来。\n\n相比去年，城镇化进一步提高，按照这个趋势，我认为中国的城镇化率未来会像发达国家看齐，达到 70% 左右。\n\n第三季度农民工外出打工获得的收入平均 11130 元。但他们有自留地，还有宅基地。（以上数据全部来自于国家统计局 2018 年）\n\n## 四、在这里，改变偏见\n\n这里我们要分享一下看企业的方法论，我写了很多《在这里改变偏见》系列文章，看起来有的观点很出格，其实有一套严谨的体系。\n\n**1.看企业是有方法论的**\n\n**① 看顶层设计**\n\n顶层先设计好，设计不好后期很难发力。\n\n**② 看战术**\n\n战术要跟团队一起看，看团队，高层跟基层要分开看。\n\n员工都觉得老板是个骗子，不相信他的梦想，这是有问题的。你会发现，那些优秀的企业，起码有 30% 的员工非常相信老板，50% 的员工没有那么相信老板，但是觉得老板说得对，就跟着做。\n\n如果你的公司是这样，成功的概率会更高。\n\n**③ 看大市场**\n\n如果这个市场很小，你也很难做，所以大市场就是企业发展的天花板。\n\n机遇来自于时间窗口。每过一个阶段，社会要素都会发生变化，在变化的过程中，我们就能找到重新切入存量市场的最大机会。\n\n**④ 看执行**\n\n看执行是不是到位，如果执行不到位也是白干。\n\n**2.读过书的人认为的内容跟现实需要的内容一般是两回事**\n\n我们都说互联网是规模经济，其实互联网在一定程度上是反规模经济的。用户时长是有限的，很多公司都在抢，也就是说买用户的成本非常高，到一定程度后是反互联网规律的。\n\n趣头条之前聘请了很多优秀的编辑，这些编辑精选了很多文章推送给他们的用户，发现这些文章的点开率很低。\n\n后来他们把一篇广场舞教学的视频放到了第一位，而且全量推送给所有用户，点开率高达 10%，也就是说 10 个人中就有一个人看了。\n\n这件事告诉我们，**很多时候读过书的人认为的内容跟群众需要的内容是两件事。**\n\n**3.品牌要做到用户洞察、留客、复购和裂变**\n\n最近腾讯的朋友告诉我，又有一些品牌通过小程序的投放实现快速的男装定制，月销 15 万单，单价 200 元。\n\n过去做这事很难，因为男人的钱很难赚，而想要找到他们也很难。\n\n这里面两个事情最关键，**一是柔性供应链，二是精准投放。**没有这两点，男装定制依然是个小而美的生意。\n\n当我们说到亲子类的账号，我们认为亲子类账号就应该卖婴儿纸尿裤、儿童玩具。但有赞的朋友告诉我，有赞上卖得最好的是零食，是大人用的东西。\n\n为什么呢？因为大人每天被孩子折磨得很痛苦，所以晚上会买一点东西给自己吃。所以我们很多时候对用户的理解是错误的，是偏差的。\n\n有一个网红直播卖白酒，销量是两三天上千万，客单价 900 元。这件事告诉我们，私域流量的时代已经到来了，你必须真正做好用户洞察。\n\n私域流量的运营跟传统投放有三个关键区别：**留客、复购、裂变。**\n\n以前投放了，人过来了，买了，走了。现在是人进来了你得留住，留住之后让他反复买，反复买完之后你还得让他帮你拉人头，裂变。\n\n今天很多账号只有 2 万粉丝，在很多人眼里 2 万粉丝都不能叫规模，我甚至觉得 2 万粉丝是不可能赚到钱的。\n\n但他们通过做留客，发掘粉丝需求，做好复购、裂变，活得挺不错，这颠覆了我原来的认知。\n\n**4.价值百万的金属切割机在快手上卖掉了**\n\n在和快手沟通的时候，我发现一件很神奇的事情，价值百万的金属切割机在快手上卖掉了。\n\n过去大家一直以为互联网上只能卖便宜的、高频的、生活必须的东西。\n\n金属切割机是怎么卖掉的呢？他们的方式就是，放一台切割机让它运转，用它把金属球切下来，有一些厂商老板看到这个视频就买了。\n\n最主要的原因是，**乡镇企业家都喜欢上快手，所以受众契合，并且这种视频非常直观，是带有销售能力的。**\n\n乡镇企业家采购设备，你跟他演示很多 PPT 是没有用的，他要看直观的效果。所以经常有人在快手上做暴力演示。\n\n一个人在快手上卖钓鱼竿，他用鱼竿钓一个 200 斤的桶在空中旋转，下面有人留言说 “这个钓鱼竿在哪里卖，我要买”。这就是效果广告，往往是简单粗暴的。\n\n全国快手播放量 TOP10 的乡镇，第一个是连云港的海头镇，那里有非常多的人通过直播卖鱼。\n\n这些案例给我们提供了一个逻辑：**在不同的场景下可以做不同的事情，我们要大胆去思考很多问题。**\n\n\n\n## 五、这是一个反智的时代\n\n**1.书读多了反而让人变得反智**\n\n人读书多了，有时候会进入到一个奇怪的现象——反智。\n\n聪明人总是以为自己能搞懂一百种生意就能做好一百种生意，这是彻底错误的，你的一生只需要做好一件事情就可以了。\n\n**很多老板的反智出现在，主业都有问题了，还想通过副业救公司，**这种情况 99% 是不可能的。\n\n当你的主业出现问题，你应该解决主业问题，而不是去搞副业。不要试图去做不符合你能力模型的业务。\n\n举个例子，我跟马英尧 (尚美生活 & OneZone 创始人) 探讨过很多次小镇青年、下沉市场。\n\n我们能写出 10 万 +、100 万 +，只能证明我们写东西的能力强、总结能力强、逻辑强，不能证明我们去小镇就能做生意，所以不要去做跟你能力模型无关的事情。\n\n不足够热爱的事情你就无法掌握、经营它的本质。一定要热爱，热爱的时候你才能发现别人发现不了的东西。\n\n**2.不热闹的行业可能很赚钱**\n\n**很多人觉得这个行业不热闹，挣不到钱，这就是反智。**\n\n挣钱的人是不会告诉他们是挣钱的，更不会告诉你怎么挣钱。事实上，太过热闹的行业才是挣不到钱的，不热闹的行业多是挣钱的。\n\n我在广州认识一个老板，他在珠江口挖沙，利润相当可观。\n\n这个行业热闹吗？不热闹。但是这些才是挣钱的。\n\n**升级的成本要低于收入，**这是一条常识。但今天很多人是没有这个常识的。\n\n比如你把门店升级的很高端，最后人家只来拍照，不买东西。这是最简单但最容易被忽略的生意的本质。\n\n很多行业的规律是 1%—2% 的企业是赚大钱的，18% 的企业是赚钱的，30% 的企业是持平的，50% 的企业是亏钱的，剩下不赚钱和亏钱的企业，天天在网上说行业走到头了。\n\n**3.大谈颠覆的人，往往对这个行业就了解 30%**\n\n当你对一个行业了解到 30% 的时候，你会觉得你发现了一个巨大的商机，你要颠覆这个行业。了解 70% 的时候，信心崩塌了，原来你所思考的一切问题已经有人思考过了。等你扛到 90% 的时候，你会发现你已经没有太多对手了，过了 95% 之后，你面对的只有几个玩家了。\n\n每个行业都有金线，我们一定要找到那条线，找不到你就永远不可能得道。\n\n**4.很多的悲观都是情绪化的悲观**\n\n在消费方面，我举一组例子：\n\n家里有两套房，兜里还有 100 万，贷款 300 万，股市套牢 50 万，心情很不好，但是该吃吃该喝喝什么都不少。\n\n家里一套房，兜里 50 万，没有贷款，上升无望，心情很不好，但是该吃还得吃该喝还得喝。\n\n家里没有房，兜里有 10 万，打算买房，但觉得有点远，但是该吃还得吃该喝还得喝。\n\n**很多的悲观都是情绪化的悲观。**\n\n看消费，看什么？看工业，看发电量，看高速公路。高速公路上没车了，发电量大幅度下降了，那可能真的有问题了。这些数值没有特别大的波动，大概率上问题还不是很大。\n\n清朝的时候，有一场战争叫雅克萨战役，俄国人跟大清打了一仗，后来清朝赢了，但赢得非常艰难。\n\n俄国当时已经装备了最先进的火枪，火枪队对清兵形成了很大的威胁。\n\n大清有大炮，最后大清用大量的红衣大炮压制住了火枪，但是大清没有意识到火枪才是更先进的装备。\n\n这个时代也是如此，**很多时候企业最后看起来赢了，但依然是上一个时代的优势，**你认为应该加强这个优势，但其实世界已经改变了。\n\n到下一个节点，你的大炮就是废铁了。\n\n**5.炫耀从不改变，只是方式发生了改变**\n\n今天，很多人觉得过了那个阶段，人就不会炫耀了。我觉得这是瞎说，你的 LOGO 是不见了，但是你每天都把儿子的私立学校挂在朋友圈。\n\n为什么你在上班的时候发的朋友圈都没有定位，但是到了普吉岛和洛杉矶都要带上定位？\n\n这都是炫耀。\n\n炫耀从来没有改变过，只是方法在不同的人群里有了一定变化。我们只要抓住这个变化就能找到一些规律。\n\n**6.靠勤快致富的行业都需要尊重本质**\n\n前段时间我写了一篇文章叫《世间没有新零售》，我认为世间没有 “新零售”，只是零售变新了。\n\n本质是零售，而不是新，本质性的问题从来没有变化过，租金、押金、账期、人员、招募、管理、培训、预防、物流仓储、周转率、坪效、人效，轰轰烈烈四年的新零售创业，只让中介、装修队和物业赚到了钱。\n\n线上线下打通对于大多数企业是不成立的，因为当你的用户不是全量用户的时候，两端用户是匹配不上的。\n\n中国目前很多行业都称为 “勤行”，所有靠勤快致富的行业都需要尊重本质。\n\n我以前开了十几家果汁店、餐厅，倒了一半，后来我得出结论，**不是道理说得很明白你就能把事情做好。**\n\n**7.新人爱说跨界打击，基本上是跨界来被打击**\n\n跨界打击的前提是你要打的那个人，他会的你都会，他不会的你也会。\n\n他会的你不会，还没到你的时候，你就被他打败了。\n\n社会零售的总需求增长已经放慢，慢于渠道分化的速度，这就意味着五年之内很多渠道将彻底垮了，崩塌了。\n\n**8.消费升级也体现在更精简的 SKU（库存量单位）**\n\n最近网易严选之所以出了很多问题，是因为它的 SKU 更多，其实它应该做更少的 SKU 满足 80% 的需求，而不是为了那 20% 的需求去制造 80% 的麻烦，这是很重要的。\n\n很多时候花里胡哨的东西只能满足一小群人。\n\n京东京造上有一个很重要的品种，叫乳胶枕，卖得特别好。\n\n今天，我们对国货的信任度正在快速提高，在京东平台上，**男性的转化率高于女性，尤其是在这种类型的消费升级。**\n\n**9.直播最重要的不是直播，是叫大哥**\n\n制造垃圾快乐是当下最高效的吸金方式，小程序算命、逆袭小说、小姐姐直播，大家都喜欢看。\n\n什么样的人最喜欢在直播平台打赏？就是有钱但是平时生活里没有人重视的人。\n\n这个秘密我是怎么知道的？当年我开店的时候，跟一个包工头老板聊天，他说他一年打赏花了 10 万，但他是他们圈子里打赏最少的，其他人打赏都是 100 万起步。\n\n后来我研究了一下，那些包工头每年能赚几百万，甚至几千万。但是在工商界，很多人都觉得他们比较 LOW，不能上台面，他们很失落，所以他们喜欢去直播平台打赏。\n\n很多人为了被口播，会花大量的钱，在直播平台，他们能获得尊重和荣耀。所以直播的本质是口播，而不是直播。\n\n## 六、再看实体经济\n\n实体经济，实体品牌，只要本质不发生改变，就永远会有喜新厌旧、物极必反的机会。\n\n举个例子，前几年女生喜欢买蔻驰的包，结果地铁一打开，一节车箱出现了 10 个蔻驰。\n\n于是她们找到了下一个品牌，过了一年半载，地铁打开又是 10 个这个品牌，她们又去换别的牌子，这就叫物极必反，喜新厌旧。\n\n新国货崛起两条路最靠谱：\n\n第一个是主打性价比，高质量、高逼格、中低价格；第二个是主打圈层高、质量高价格。\n\n**1.工厂的转型之路**\n\n今天的中国工厂，过得好的有两种：\n\n**一种是做短线，做高质量、低价格、****针对 C2M（顾客对工厂）模式的产品，**然后通过各种平台快速消化，只有这样才能保持产线运作、保持工厂流水。但是没有品牌只能解近渴。\n\n**一种是做长线，做高逼格、低价格的品牌。**也就是在初期用规模换空间，用规模降成本，中期要思考如何做成一个品牌。\n\n但是，做长线的企业里，大部分工厂很难出品牌。因为没有这样的基因，它的顶层设计和团队都是错的。\n\n比如高薪挖来一个人做品牌，又不很信任，也不放权，非要用自己的产线思维去管人家的品牌思维，这也是不行的。所以基本上能实现迭代的工厂仍旧不多。\n\n**2.四类产品的降维打法**\n\n我们可以通过一个区隔方式把产品分成四种：\n\n**① 功能属性的产品优衣库化**\n\n什么叫做优衣库化？优衣库最早进入美国市场的时候开在沃尔玛边上，因为开在乡下没有人买，觉得这是很 LOW。\n\n优衣库是做怎么起来的？它把重金花在了最好的街头，开最好的旗舰店，打造一个中产阶级偏高的象征的东西和品质感，但是它的价格是偏低的。把快消品的功能性做成一种符号，一种腔调，才能赢得人心。\n\n**② 身份属性的产品奢侈品化**\n\n身份属性的产品奢侈化，但是它是功能属性为主。\n\n我觉得功能属性就是即使性价比很强，也很难成为企业家需要的东西，或中产阶级偏上及中产需要的东西。\n\n这里必须去打造你的区隔感，身份属性的东西要做的高级，要有奢侈品的感觉。\n\n**③ 高频消耗品上瘾化**\n\n高频的消耗品一定要带有一定的上瘾化，如果你不能上瘾，不能形成某一种触觉和连接的感觉，你是很难做好这个生意的。\n\n举个例子，很多人抽烟并不是为了抽烟，他就喜欢手里有个东西，让它成为一种衍生的器官。创造上瘾的特性很重要。\n\n牙膏在最早推出的时候不起泡沫，但产品经理发现，如果没有泡泡、没有薄荷味道，很难让人上瘾，觉得牙膏没效果。所以牙膏有泡泡、很清凉，消费者觉得这样才有效，产品就普及了。\n\n也就是说，你的产品可以加一点没有实际作用、但能让人上瘾的东西。\n\n**④ 低频耐耗品信仰化**\n\n今天很多大家电其实是属于耐耗品，一定要有信仰、有圈层。\n\n**2.行业现象**\n\n**① 卤制品**\n\n中国卤制品行业是一个高度分散的行业，行业研报数据是 2500 亿，但是因为有大量不开票的现象（菜场、小作坊、路边摊等等），所以业内甚至有人预估是 8000 亿。\n\n绝味鸭脖是行业头部企业，大概一年 40 亿营收。所以这是一个离散度很高的产业。也就是说：你还有机会在一个地区生产出一个几个亿的卤制品品牌。\n\n**② 乘用车**\n\n目前中国的乘用车市场遇到一个很重要的问题，产量和销量的差值正在扩大，意味着大量库存的产生。怎么解决？\n\n我有两个想法，首先中低产线的车可能会通过更好的网约车制度解决，让车更好的共享。其次，走向海外。非洲都是日韩品牌车为主，中国车在那里的市场份额并没有我们想象中的大。\n\n**③ 美发店、推拿**\n\n如果不是从基层爬起来的，创业的成功概率低于 10%。\n\n**④ 家纺**\n\n过去我们总认为纺织业已经没有任何利润了，这是错的，安踏毛利率 52.6%，净利率 24.9%。\n\n申洲国际做代工，毛利率 31.6%，净利率能达 24.8%，耐克是它最大的客户之一，都没它高。全球大多数的运动类顶级品牌都是它代工的。\n\n申洲国际告诉我们一件事，实体产业做到极致的时候，就拥有了话语权跟绝对优势。\n\n很多工厂比申洲国际更便宜，但是不能大规模的出货，能大规模出货不能垫得起那么多的钱，能垫得起那么多钱，很难保证大规模出货的质量是稳定的。这是实体经济的壁垒，跟互联网说的壁垒是两件事情。\n\n**⑤ 酱油和醋**\n\n中国 TOP1 的酱油公司是海天酱油，截止到 4 月 17 日市值 2327 亿，总占有率是 18%，净利率是 30.5%。也就是说，很赚钱的是实体产业，比如酱油这种不怎么起眼的行业。\n\n**⑥ 食品类跨国企业**\n\n全球 TOP1 食品类跨国企业是雀巢，它收购了大量企业，但是那些企业并没有用雀巢这个名字。\n\n去年，雀巢在全球有 6000 多亿人民币销售额，净利润 670 亿。\n\n所以我一直强调的是：**我们要敬畏国际的巨头。**\n\n你融了一个亿就觉得自己牛，但是人家一年利润 670 亿，一天接近两个亿，这就是人家造钱的速度，十年之功不可能一日形成的。\n\n**⑦ 内衣**\n\n有一个品牌叫 Lululemon，最早做女性运动内衣，现在也做男性产品。\n\nLululemon 给品牌赋予精神、赋予圈层感、赋予科技感。我在五年前去香港，在时代广场看到 Lululemon 旗舰店，层高最高都七八米，跟苹果旗舰店差不多。\n\n**⑧ 海底捞**\n\n以前我们是向所有人做一种生意，现在是围绕着一群人做所有生意。\n\n海底捞给我们的启示是，什么部门都能赚钱。海底捞把财务部门做成了财务咨询公司，工程部顺便给别人搞装修，火锅调料也单独上市了。\n\n这个时代要充分的挖掘你公司现有的能力，快速把它变成赚钱的东西。\n\n**3.品牌溢价**\n\n人会为了巨大的快感支付超额的溢价，但是每个人的快感来源是不大一样的。\n\n男人可以为三件事情付钱，快感、存在感、认同感。如果你给男性做产品没有这三个标准，不能说你做不好，你捞不到最多的钱。\n\n我们一定要想清楚，头等舱休息室里的咖啡不好喝，面也不好吃。但是为什么那么多人就要待在那里喝咖啡？这里有很多内心的真实的洞察，我们一定要想明白，这对于做品牌非常重要。\n\n## 七、再看下沉市场\n\n一线的人最大的问题就是从来不会迈出他的 CBD 半步，但是每天思考怎么去赚那些人的钱。这根本就难以实现。\n\n这里分享几个关于下沉市场的观点和事实。\n\n**1.二线跟三线是两类城市，不要混在一起说**\n\n二线都有产业聚集，就业岗位明显高于三线城市，所以二线对人才的吸附能力是三线的很多倍。\n\n**2.三线城市新城区和老城区泾渭分明**\n\n比如泉州，老城区特别古老，我在那里的感觉就是回到了 80 年代。但是它的新城，万达广场特别大，万达在边上盖了一个特别大的小区，里面什么品牌都有，和上海的 CBD 没什么区别。\n\n**3.消费品市场的喜好是完全不一样的**\n\n玖姿这个品牌的定位就是卖给小镇贵妇，就是下沉市场的中产女性的品牌。但是我打听了一圈，一线基本没人知道。\n\n在农村，80 寸电视机卖得非常好。但一线城市家里放不下 80 寸的电视机。因为中国一线的年轻人都是租的房子，没有客厅。\n\n**4.存量改造是一门巨大的生意**\n\n包括 4S 店改造、酒店改造、家居行业改造、零售改造、家电 3C 的改造。\n\n一、二线城市现在 3.6 亿人口，4.75 亿手机，人均 1.3 台，下沉市场人均 0.5 台，两个人里还有一个人没有手机。\n\n**5.理性认识小镇青年**\n\n中国过去 40 年的发展来自于三点：**全球化、工业化和城市化。**\n\n改革开放之初，中国不超过 5% 的人是城里人，95% 以上的人都是小镇青年，即使今天身份证上是北京人，是城市人，但是内心骨子里依然有小镇青年的影子，这是品牌必须理解的一件事情，用数据系统打标是不能解决所有的洞察问题。\n\n总结一句，所有品牌的升级都是围绕一句话完成的：**渴望和大城市的人一样。**\n\n另外如果今天你还指望跟我聊下沉市场，而不是自己去看，那么这个生意已经跟你没有什么大关系了。\n\n## 八、出海再造一个经济体\n\n**1.出海并非单纯复制**\n\n中国的出海分两种：\n\n一种是以中国为母本向海外输出，一种是直接以海外为母体。\n\n以印度为例。\n\n一直在说印度是下一个中国，我认为这是一件低概率事件。\n\n有一组数据很重要，三四年前，中国、印度、越南全国年龄中位数，中国已经是 37 岁，今年差不多 40 岁，但是印度只有 30.4 岁，越南更小只有 26.7 岁。\n\n印度的 GDP 只有 2 万亿，中国是 13 万亿，还没有到中国的零头。人均 GDP 目前刚突破 1900 美元，但它的人口结构跟中国改革初期是差不多的。\n\n有一个更值得我们现在关心的市场叫做东南亚市场。\n\n东南亚 11 个国家最富的是新加坡，最穷的是缅甸，新加坡除以缅甸，人均 GDP 差了 46.7 倍。区域市场差异相当大。\n\n**2.出海非洲的 “坑”**\n\n非洲是一个复杂的多元化的市场，非洲的总体经济，由北向南越来越差。\n\n非洲的坑在哪里？它的单体存量很小，市场很分散，所以我们要做的是什么？简单的可复制的生意是做不了的。\n\n在非洲有一个品牌做得特别好，叫传音。\n\n它是如何进入非洲市场的？\n\n首先它从尼日利亚开始做，发现非洲电力供应不是很稳定，手机充电会很麻烦，于是它把手机电池做成 3000 毫安。\n\n同时少标一点容量，这会让别人觉得你的电力特别持久。\n\n其次，非洲经济比较拮据，人们会使用多个电话卡，因为有优惠套餐，传音成了第一家把双卡双待、四卡四待引入到非洲的企业。\n\n富贵和贫穷是一样的，都会限制人们的眼界和思考能力。\n\n## 九、新金融时代\n\n**巨量的隐形市场**\n\n未来的公司，没点金融能力都不能叫公司了。积分化、证券化、金融化是重要的方向。\n\n积分、里程是一个巨大的市场。美国运通每年向美国航空集团采购积分要花 10 亿美金。\n\n信用飞这家公司正在做的便是如何将中国几十家航空公司的积分能够打通，这件事如果做成了就会变成一个巨大的生意。\n\n携程，现在最赚钱的业务是卖保险。别小看卖延误险，它的利润特别高。\n\n在中国民营企业里，蚂蚁金服应该是在金融层面做的最好的之一。蚂蚁金服好在哪里呢？它在向线下延伸的时候，向小业主延伸，除了前端收款，后端还放贷。\n\n**我一直觉得中国有个很大的市场就是中小商户的市场。**\n\n你不要觉得所有人都能办出信用卡，有的人办不出信用卡。\n\n今天的中小企业，尤其是小微企业能通过阿里贷款，我认为这件事情如果能真的彻底做好是非常大的市场，比做前端新零售强多了，后端解决零售里的现金流问题，是新零售的重要组成部分。\n\n> 摘自微信公众号笔记侠[10 亿人没有坐过飞机，00后存款是90后的两倍……颠覆你的58个认知](https://mp.weixin.qq.com/s/qzTjL5JSpKtMVtBzKT_VLw)","source":"_posts/2019-05-24-start-up-business.md","raw":"---\ntitle: 创业的一些参考\ndate: 2019-05-24 16:02:12\ntags: [ 创业, 思路 ]\ncategories: 杂谈\ntoc: true\n---\n\n今天的这篇文章从反常识的数据开始谈起，基于**中国的机遇与优势、实体经济、改变偏见，下沉市场、海外市场，新金融时代**等板块，展开对新商业文明时代的看法。\n<!-- more -->\n\n在开启本篇的阅读前，大家先思考两个问题：\n\n> `1.你真的了解中国嘛？`\n> `2.你最看重的创业机会有哪些？`\n\n## 一、九个反常识的数据\n\n**① 全国约有 90% 以上的人没有喝过星巴克**\n\n这是我经过逻辑推理得出的。\n\n去年，星巴克宣布将 700 万星巴克会员接入支付宝。基于这个数据，我做了一系列推理。\n\n如果我们算每 7 个客户有一个开通会员，那么就是 4900 万，10 个里有 1 个是 7000 万。\n\n星巴克在上海的门店是最多的，500 家以上，这个城市 2500-3000 万的人口（含流动），三成喝过的话，是 900 万。\n\n中国目前星巴克的门店数是 3400 家，大多数覆盖在一二线城市。一线新一线二线（含广义二线）的人口总数不超过 3.6 亿，里面三成是 10800 万，2 成是 7200 万（越往下门店很少，渗透率很低，全量来看不超过 1.5 成，以上换算只提供思路，不代表最终实际数据。）\n\n因为我没有准确数据，我只能倒推，无论从哪个角度去倒推，**90% 的人都没有喝过星巴克。**\n\n故而，知道并不等于喝过，并且一定有海量的人不知道星巴克。以上数据，依然是比较保守的推断。\n\n**② 50% 以上的中国人没有喝过农夫山泉**\n\n2016 年，农夫山泉的年销售额达到了 109.11 亿元，其中包含新产品和高端产品，桶装水，会议酒店供水等等。我一年可能要花 2400 元以上在农夫山泉上。\n\n按照这个销售额计算，**假设客单价 20 元，那么只有 5 亿多人喝过农夫山泉。**\n\n《2018 全球品牌足迹报告》显示，农夫山泉消费者触及数达 3.35 亿。虽然农夫山泉的客单价不高，但是它的受众人群比较集中。\n\n故而，即使这个品牌是大众到不能再大众的了，依然不可能做到人人都喝。\n\n**③ 中国约有 1000 万人从事足疗行业**\n\n仅北京市就有 20 万人从事足疗，推算一下，中国有 661 个城市，那么 1000 万这个数字依然是保守的估计。\n\n**④ 13 亿人没有出过国**\n\n中国出入境管理局发布，2018 年全国有效的因私普通护照私有量为 1.3 亿本。也就是说，起码有 90% 的中国人没有出过国。\n\n**⑤ 10 亿人没有坐过飞机**\n\n为什么每次坐飞机的时候工作人员都会演示一遍安全操作？因为跟你一起坐飞机的人中，起码有一半人是第一次坐飞机。\n\n中国头等舱用户不超过 600 万，每年常旅客不超过 1500 万（年飞行超过 6 次的称为常旅客）。\n\n由此可以看出：在航空杂志投广告，其实就只有那 1500 万常旅客能看到。所以，航空业广告商做廉价产品是行不通的，只有针对那 1500 万人的产品和服务才能实现有效目的。\n\n国航的白金卡用户不超过 5 万人，听说东航不超过 5000 人（除了一些特殊渠道，一年盯着一个航空飞行 120 次经济舱，60 次商务舱，40 次洲际公务舱才能拿到这个白金卡）。\n\n**⑥ 中国最大的便利店不是全家，而是中石化旗下的易捷便利店**\n\n每一个中石化加油站旁边都有一个易捷便利店。\n\n目前是中国最大的便利店，有 25000 多家门店，《2018 中国便利店发展报告》显示，易捷便利店占全国便利店超过 20% 的份额，很难被超越。\n\n**⑦ 处于房地产中介金字塔塔尖的，通常是穿着拖鞋、汗衫的二房东**\n\n像上海静安区的一些小别墅，还有北京的四合院，都是少量不可再生的，往往这些房子很受欢迎，很多人喜欢租这样的房子。\n\n我们公司租的房子的二房东就是这样的人。\n\n早期做租赁的中介发现这一现象后，就把这些房子一套套收过来进行改装，进而成为二房东。\n\n我大概计算了一下，如果成为 20 套老别墅的二房东，每个月净利润可达 50 万，每套差价在 2-5 万之间，合同一签就是 10 年。\n\n**⑧ 进口猪蹄比国内猪蹄便宜 30%—50%**\n\n因为除了中国、德国等少数国家，全世界大多数人不吃猪蹄。在很多国家，猪蹄被当做废品处理，中国人把它收购拿回国内，比在国内采购还便宜。\n\n**⑨ 中国产的棉毛裤在西班牙可以卖 10 倍的价格**\n\n过去，欧洲人是不知道世界上还有个东西叫棉毛裤。\n\n中国有个小伙子，把浙江生产的内销不掉的棉毛裤拖到欧洲，在他们冬天特别冷的时候卖，卖得特别好。\n\n## 二、中国的四大优势和巨大契机\n\n如果这四点不发生根本性改变，那么我们依然是有巨大的机会。\n\n**① 中国具有全球最强的终端制造产业链和产业集群**\n\n有一次我去印度和埃及，带的是 iPhone 手机，手机上套了一个有 6 个玻璃镜头的手机壳，当地人都非常好奇，问我这是什么？他们根本没有见过这样的手机壳。\n\n6 个镜头的手机壳在中国被认为是低端制造，但其实它在全球属于中端制造了，因为全球绝大多数地区都无法生产出来。\n\n因为这个产品涉及的产业链和零部件非常多，而全世界也只有中国能够最高效、最低价、最批量地生产，并以最大规模的消耗掉。\n\n还有一个现象也很有趣，**在中国南部和东部地区，有大量县城变成了一个个产业集群，**整个县城都围绕着一个生意展开，在那里走几公里就能找到一切你需要的东西，但在别的国家，这可能是要跨国才能完成的。\n\n对中国制造我有一个基本的判断：中国是全球最强的中端制造大国，没有之一。任何一个国家无 30 年积累，无政策连贯性支持，无法取代中国中端制造的优势。\n\n**② 我们的劳动力已不是全球最便宜的，但是劳动力素质全球最高**\n\n现在只有中国的劳动力是最具有勤劳、刻苦精神的。越南、柬埔寨的劳动力确实便宜，非洲的劳动力更低，但是和中国相比，职业技能不可同日而语。\n\n**③ 我们依然是全球最大的消费市场**\n\n今天大部分中国人已经改变了储蓄的习惯，乐于消费。\n\n**④ 中国人是全球最渴望改变命运的**\n\n印度人都信印度教，印度教告诉你人分等级，这辈子好好修行，下辈子再升级到婆罗门。中国没有这样的教育，中国人都相信通过努力能过得更好一点。\n\n## 三、在这里，读懂中国\n\n关于人口，大多数人对其判断都是非常情绪化的，也是错误的。\n\n一些美国经济学家研究发现：长期高速的经济增长会对国民性格产生很多改变，他们会更乐观、更自信、更积极向上、更开放、更包容。\n\n而这些因素集中体现在今天中国的 00 后身上。\n\n**1. 很多农村地区幸福指数远高于城市**\n\n农村收入并不高，但他们有宅基地，有自留地，他们可以将自留地租出去，每年收取租金。某些地区，他们的幸福指数很高，远远高于发达地区。\n\n基于大量的观察发现，现在农村里种地的人很少，并且几乎都是机械化种植，很多人会外出打工。\n\n但是在他们眼里，大城市不是他们的世界，老了还是要回去，因为老家还有地。只要想到自己有土地，他们吃再多苦，都是乐意的。\n\n**2. 90 后到 00 后的消费观发生很大变化**\n\n**① 消费升级**\n\n90 后、00 后在社会认同感上的消费，在他们进入社会几年后就会和上一代人趋同，并且更愿意提前完成这种认同感的消费。\n\n他们中很多人的第一辆车一定不是雪佛兰，而是直接进入高端车的低配版，所以奔驰 C 系列、宝马 3 系、宝马 X1 都卖得特别好。\n\n**另外，奢侈品年轻化趋势非常明显。**在中国，更多女生在 20 多岁左右就开始用 La Mer，而在欧美，更多成熟女性选择它，不仅仅是钱的问题。\n\n我认为 90 后的第一次装修是一波不可再生的资源，并且这波 90 后一定比后面的每一代人都多。\n\n对于装修来说，很多大件，包括家电、家居、甚至小家电，是不会随便更换的，而 90 后的结婚潮已经到来，虽然他们中有很多人选择了不婚和晚婚，但是在压力较小的三四线，这一波行情还是比较明显的。\n\n所以，**一定要抓住 90 后的装修升级，如果错过了，可能三五年内都没有消费了。**\n\n**② 孤独催生商机**\n\n90 后比较懒，还有独生子女病，孤独将催生一大波的商机。\n\n孤独的年轻人喜欢养动物，他们会带宠物去按摩和游泳，等到他们出差的时候，会找个宠物店寄养，一个不到 1 平方米的地方 1 天要花 300 块。\n\n此外，还有专门的宠物殡葬，基于此，宠物市场一定还会扩大，并且每年快速增长。\n\n**③ 比起 KOL，他们更相信真实用户反馈**\n\n在腾讯提供的 00 后报告中，我们能够看到，KOL（关键意见领袖）的影响力在下降，比起 KOL，00 后更相信真实的用户反馈。\n\n对于所有品牌主来说，未来的投放会变得很难，因为你需要对接海量的超级用户，并且你要把他们当作一件很重要的事情去运营。\n\n**④ 对国产品牌的认知正在改变**\n\n今天，国产品牌并不比国外品牌差，这个问题在 00 后的心目中正在形成。\n\n主要有以下 3 个原因：\n\n**第一，中国制造真的在进步；**\n\n第二，大量国外品牌把落后的生产线丢到中国，现在才开始重视中国市场，但已经晚了，因为中国品牌的反应速度更快；\n\n**第三，00 后成长的年代就是民族自豪感产生的年代。**\n\n对于 00 后来说，他们向往在专注领域有深刻见解的品牌。\n\n老一代人恨不得一个产品具备所有功能，但是今天 00 后更喜欢专业领域的、垂直的、优秀的品牌。\n\n**⑤  00 后的存款是 90 后的两倍**\n\n虽然 00 后存款只有 1840 元，但 90 后更少，只有 800 元（数据来源于腾讯最新的 00 后研究报告）。\n\n**3.关于人口红利**\n\n我们总是很悲观地说人口红利没有了，其实只是分红方式发生了改变。\n\n现在的人口红利正在体现为地区性、结构性和微观性，每个地区不是统一统筹的。\n\n即使目前中国年轻劳动力更少了，但依然在绝对数量上超越了大多数国家，并且中国的劳动力具有素质跟薪资的平衡优势。\n\n不要老是觉得员工就应该给你干什么，这是错的。你首先要思考的是，你能为你的员工干什么，能帮助他们实现什么。\n\n也就是说，梦想要有，但回馈也要有。\n\n**4.劳动力总数还在增长**\n\n目前我国劳动力还没有衰退，去年农民工总数比上年增长了 0.6%。农民进一步从土地中解放出来。\n\n相比去年，城镇化进一步提高，按照这个趋势，我认为中国的城镇化率未来会像发达国家看齐，达到 70% 左右。\n\n第三季度农民工外出打工获得的收入平均 11130 元。但他们有自留地，还有宅基地。（以上数据全部来自于国家统计局 2018 年）\n\n## 四、在这里，改变偏见\n\n这里我们要分享一下看企业的方法论，我写了很多《在这里改变偏见》系列文章，看起来有的观点很出格，其实有一套严谨的体系。\n\n**1.看企业是有方法论的**\n\n**① 看顶层设计**\n\n顶层先设计好，设计不好后期很难发力。\n\n**② 看战术**\n\n战术要跟团队一起看，看团队，高层跟基层要分开看。\n\n员工都觉得老板是个骗子，不相信他的梦想，这是有问题的。你会发现，那些优秀的企业，起码有 30% 的员工非常相信老板，50% 的员工没有那么相信老板，但是觉得老板说得对，就跟着做。\n\n如果你的公司是这样，成功的概率会更高。\n\n**③ 看大市场**\n\n如果这个市场很小，你也很难做，所以大市场就是企业发展的天花板。\n\n机遇来自于时间窗口。每过一个阶段，社会要素都会发生变化，在变化的过程中，我们就能找到重新切入存量市场的最大机会。\n\n**④ 看执行**\n\n看执行是不是到位，如果执行不到位也是白干。\n\n**2.读过书的人认为的内容跟现实需要的内容一般是两回事**\n\n我们都说互联网是规模经济，其实互联网在一定程度上是反规模经济的。用户时长是有限的，很多公司都在抢，也就是说买用户的成本非常高，到一定程度后是反互联网规律的。\n\n趣头条之前聘请了很多优秀的编辑，这些编辑精选了很多文章推送给他们的用户，发现这些文章的点开率很低。\n\n后来他们把一篇广场舞教学的视频放到了第一位，而且全量推送给所有用户，点开率高达 10%，也就是说 10 个人中就有一个人看了。\n\n这件事告诉我们，**很多时候读过书的人认为的内容跟群众需要的内容是两件事。**\n\n**3.品牌要做到用户洞察、留客、复购和裂变**\n\n最近腾讯的朋友告诉我，又有一些品牌通过小程序的投放实现快速的男装定制，月销 15 万单，单价 200 元。\n\n过去做这事很难，因为男人的钱很难赚，而想要找到他们也很难。\n\n这里面两个事情最关键，**一是柔性供应链，二是精准投放。**没有这两点，男装定制依然是个小而美的生意。\n\n当我们说到亲子类的账号，我们认为亲子类账号就应该卖婴儿纸尿裤、儿童玩具。但有赞的朋友告诉我，有赞上卖得最好的是零食，是大人用的东西。\n\n为什么呢？因为大人每天被孩子折磨得很痛苦，所以晚上会买一点东西给自己吃。所以我们很多时候对用户的理解是错误的，是偏差的。\n\n有一个网红直播卖白酒，销量是两三天上千万，客单价 900 元。这件事告诉我们，私域流量的时代已经到来了，你必须真正做好用户洞察。\n\n私域流量的运营跟传统投放有三个关键区别：**留客、复购、裂变。**\n\n以前投放了，人过来了，买了，走了。现在是人进来了你得留住，留住之后让他反复买，反复买完之后你还得让他帮你拉人头，裂变。\n\n今天很多账号只有 2 万粉丝，在很多人眼里 2 万粉丝都不能叫规模，我甚至觉得 2 万粉丝是不可能赚到钱的。\n\n但他们通过做留客，发掘粉丝需求，做好复购、裂变，活得挺不错，这颠覆了我原来的认知。\n\n**4.价值百万的金属切割机在快手上卖掉了**\n\n在和快手沟通的时候，我发现一件很神奇的事情，价值百万的金属切割机在快手上卖掉了。\n\n过去大家一直以为互联网上只能卖便宜的、高频的、生活必须的东西。\n\n金属切割机是怎么卖掉的呢？他们的方式就是，放一台切割机让它运转，用它把金属球切下来，有一些厂商老板看到这个视频就买了。\n\n最主要的原因是，**乡镇企业家都喜欢上快手，所以受众契合，并且这种视频非常直观，是带有销售能力的。**\n\n乡镇企业家采购设备，你跟他演示很多 PPT 是没有用的，他要看直观的效果。所以经常有人在快手上做暴力演示。\n\n一个人在快手上卖钓鱼竿，他用鱼竿钓一个 200 斤的桶在空中旋转，下面有人留言说 “这个钓鱼竿在哪里卖，我要买”。这就是效果广告，往往是简单粗暴的。\n\n全国快手播放量 TOP10 的乡镇，第一个是连云港的海头镇，那里有非常多的人通过直播卖鱼。\n\n这些案例给我们提供了一个逻辑：**在不同的场景下可以做不同的事情，我们要大胆去思考很多问题。**\n\n\n\n## 五、这是一个反智的时代\n\n**1.书读多了反而让人变得反智**\n\n人读书多了，有时候会进入到一个奇怪的现象——反智。\n\n聪明人总是以为自己能搞懂一百种生意就能做好一百种生意，这是彻底错误的，你的一生只需要做好一件事情就可以了。\n\n**很多老板的反智出现在，主业都有问题了，还想通过副业救公司，**这种情况 99% 是不可能的。\n\n当你的主业出现问题，你应该解决主业问题，而不是去搞副业。不要试图去做不符合你能力模型的业务。\n\n举个例子，我跟马英尧 (尚美生活 & OneZone 创始人) 探讨过很多次小镇青年、下沉市场。\n\n我们能写出 10 万 +、100 万 +，只能证明我们写东西的能力强、总结能力强、逻辑强，不能证明我们去小镇就能做生意，所以不要去做跟你能力模型无关的事情。\n\n不足够热爱的事情你就无法掌握、经营它的本质。一定要热爱，热爱的时候你才能发现别人发现不了的东西。\n\n**2.不热闹的行业可能很赚钱**\n\n**很多人觉得这个行业不热闹，挣不到钱，这就是反智。**\n\n挣钱的人是不会告诉他们是挣钱的，更不会告诉你怎么挣钱。事实上，太过热闹的行业才是挣不到钱的，不热闹的行业多是挣钱的。\n\n我在广州认识一个老板，他在珠江口挖沙，利润相当可观。\n\n这个行业热闹吗？不热闹。但是这些才是挣钱的。\n\n**升级的成本要低于收入，**这是一条常识。但今天很多人是没有这个常识的。\n\n比如你把门店升级的很高端，最后人家只来拍照，不买东西。这是最简单但最容易被忽略的生意的本质。\n\n很多行业的规律是 1%—2% 的企业是赚大钱的，18% 的企业是赚钱的，30% 的企业是持平的，50% 的企业是亏钱的，剩下不赚钱和亏钱的企业，天天在网上说行业走到头了。\n\n**3.大谈颠覆的人，往往对这个行业就了解 30%**\n\n当你对一个行业了解到 30% 的时候，你会觉得你发现了一个巨大的商机，你要颠覆这个行业。了解 70% 的时候，信心崩塌了，原来你所思考的一切问题已经有人思考过了。等你扛到 90% 的时候，你会发现你已经没有太多对手了，过了 95% 之后，你面对的只有几个玩家了。\n\n每个行业都有金线，我们一定要找到那条线，找不到你就永远不可能得道。\n\n**4.很多的悲观都是情绪化的悲观**\n\n在消费方面，我举一组例子：\n\n家里有两套房，兜里还有 100 万，贷款 300 万，股市套牢 50 万，心情很不好，但是该吃吃该喝喝什么都不少。\n\n家里一套房，兜里 50 万，没有贷款，上升无望，心情很不好，但是该吃还得吃该喝还得喝。\n\n家里没有房，兜里有 10 万，打算买房，但觉得有点远，但是该吃还得吃该喝还得喝。\n\n**很多的悲观都是情绪化的悲观。**\n\n看消费，看什么？看工业，看发电量，看高速公路。高速公路上没车了，发电量大幅度下降了，那可能真的有问题了。这些数值没有特别大的波动，大概率上问题还不是很大。\n\n清朝的时候，有一场战争叫雅克萨战役，俄国人跟大清打了一仗，后来清朝赢了，但赢得非常艰难。\n\n俄国当时已经装备了最先进的火枪，火枪队对清兵形成了很大的威胁。\n\n大清有大炮，最后大清用大量的红衣大炮压制住了火枪，但是大清没有意识到火枪才是更先进的装备。\n\n这个时代也是如此，**很多时候企业最后看起来赢了，但依然是上一个时代的优势，**你认为应该加强这个优势，但其实世界已经改变了。\n\n到下一个节点，你的大炮就是废铁了。\n\n**5.炫耀从不改变，只是方式发生了改变**\n\n今天，很多人觉得过了那个阶段，人就不会炫耀了。我觉得这是瞎说，你的 LOGO 是不见了，但是你每天都把儿子的私立学校挂在朋友圈。\n\n为什么你在上班的时候发的朋友圈都没有定位，但是到了普吉岛和洛杉矶都要带上定位？\n\n这都是炫耀。\n\n炫耀从来没有改变过，只是方法在不同的人群里有了一定变化。我们只要抓住这个变化就能找到一些规律。\n\n**6.靠勤快致富的行业都需要尊重本质**\n\n前段时间我写了一篇文章叫《世间没有新零售》，我认为世间没有 “新零售”，只是零售变新了。\n\n本质是零售，而不是新，本质性的问题从来没有变化过，租金、押金、账期、人员、招募、管理、培训、预防、物流仓储、周转率、坪效、人效，轰轰烈烈四年的新零售创业，只让中介、装修队和物业赚到了钱。\n\n线上线下打通对于大多数企业是不成立的，因为当你的用户不是全量用户的时候，两端用户是匹配不上的。\n\n中国目前很多行业都称为 “勤行”，所有靠勤快致富的行业都需要尊重本质。\n\n我以前开了十几家果汁店、餐厅，倒了一半，后来我得出结论，**不是道理说得很明白你就能把事情做好。**\n\n**7.新人爱说跨界打击，基本上是跨界来被打击**\n\n跨界打击的前提是你要打的那个人，他会的你都会，他不会的你也会。\n\n他会的你不会，还没到你的时候，你就被他打败了。\n\n社会零售的总需求增长已经放慢，慢于渠道分化的速度，这就意味着五年之内很多渠道将彻底垮了，崩塌了。\n\n**8.消费升级也体现在更精简的 SKU（库存量单位）**\n\n最近网易严选之所以出了很多问题，是因为它的 SKU 更多，其实它应该做更少的 SKU 满足 80% 的需求，而不是为了那 20% 的需求去制造 80% 的麻烦，这是很重要的。\n\n很多时候花里胡哨的东西只能满足一小群人。\n\n京东京造上有一个很重要的品种，叫乳胶枕，卖得特别好。\n\n今天，我们对国货的信任度正在快速提高，在京东平台上，**男性的转化率高于女性，尤其是在这种类型的消费升级。**\n\n**9.直播最重要的不是直播，是叫大哥**\n\n制造垃圾快乐是当下最高效的吸金方式，小程序算命、逆袭小说、小姐姐直播，大家都喜欢看。\n\n什么样的人最喜欢在直播平台打赏？就是有钱但是平时生活里没有人重视的人。\n\n这个秘密我是怎么知道的？当年我开店的时候，跟一个包工头老板聊天，他说他一年打赏花了 10 万，但他是他们圈子里打赏最少的，其他人打赏都是 100 万起步。\n\n后来我研究了一下，那些包工头每年能赚几百万，甚至几千万。但是在工商界，很多人都觉得他们比较 LOW，不能上台面，他们很失落，所以他们喜欢去直播平台打赏。\n\n很多人为了被口播，会花大量的钱，在直播平台，他们能获得尊重和荣耀。所以直播的本质是口播，而不是直播。\n\n## 六、再看实体经济\n\n实体经济，实体品牌，只要本质不发生改变，就永远会有喜新厌旧、物极必反的机会。\n\n举个例子，前几年女生喜欢买蔻驰的包，结果地铁一打开，一节车箱出现了 10 个蔻驰。\n\n于是她们找到了下一个品牌，过了一年半载，地铁打开又是 10 个这个品牌，她们又去换别的牌子，这就叫物极必反，喜新厌旧。\n\n新国货崛起两条路最靠谱：\n\n第一个是主打性价比，高质量、高逼格、中低价格；第二个是主打圈层高、质量高价格。\n\n**1.工厂的转型之路**\n\n今天的中国工厂，过得好的有两种：\n\n**一种是做短线，做高质量、低价格、****针对 C2M（顾客对工厂）模式的产品，**然后通过各种平台快速消化，只有这样才能保持产线运作、保持工厂流水。但是没有品牌只能解近渴。\n\n**一种是做长线，做高逼格、低价格的品牌。**也就是在初期用规模换空间，用规模降成本，中期要思考如何做成一个品牌。\n\n但是，做长线的企业里，大部分工厂很难出品牌。因为没有这样的基因，它的顶层设计和团队都是错的。\n\n比如高薪挖来一个人做品牌，又不很信任，也不放权，非要用自己的产线思维去管人家的品牌思维，这也是不行的。所以基本上能实现迭代的工厂仍旧不多。\n\n**2.四类产品的降维打法**\n\n我们可以通过一个区隔方式把产品分成四种：\n\n**① 功能属性的产品优衣库化**\n\n什么叫做优衣库化？优衣库最早进入美国市场的时候开在沃尔玛边上，因为开在乡下没有人买，觉得这是很 LOW。\n\n优衣库是做怎么起来的？它把重金花在了最好的街头，开最好的旗舰店，打造一个中产阶级偏高的象征的东西和品质感，但是它的价格是偏低的。把快消品的功能性做成一种符号，一种腔调，才能赢得人心。\n\n**② 身份属性的产品奢侈品化**\n\n身份属性的产品奢侈化，但是它是功能属性为主。\n\n我觉得功能属性就是即使性价比很强，也很难成为企业家需要的东西，或中产阶级偏上及中产需要的东西。\n\n这里必须去打造你的区隔感，身份属性的东西要做的高级，要有奢侈品的感觉。\n\n**③ 高频消耗品上瘾化**\n\n高频的消耗品一定要带有一定的上瘾化，如果你不能上瘾，不能形成某一种触觉和连接的感觉，你是很难做好这个生意的。\n\n举个例子，很多人抽烟并不是为了抽烟，他就喜欢手里有个东西，让它成为一种衍生的器官。创造上瘾的特性很重要。\n\n牙膏在最早推出的时候不起泡沫，但产品经理发现，如果没有泡泡、没有薄荷味道，很难让人上瘾，觉得牙膏没效果。所以牙膏有泡泡、很清凉，消费者觉得这样才有效，产品就普及了。\n\n也就是说，你的产品可以加一点没有实际作用、但能让人上瘾的东西。\n\n**④ 低频耐耗品信仰化**\n\n今天很多大家电其实是属于耐耗品，一定要有信仰、有圈层。\n\n**2.行业现象**\n\n**① 卤制品**\n\n中国卤制品行业是一个高度分散的行业，行业研报数据是 2500 亿，但是因为有大量不开票的现象（菜场、小作坊、路边摊等等），所以业内甚至有人预估是 8000 亿。\n\n绝味鸭脖是行业头部企业，大概一年 40 亿营收。所以这是一个离散度很高的产业。也就是说：你还有机会在一个地区生产出一个几个亿的卤制品品牌。\n\n**② 乘用车**\n\n目前中国的乘用车市场遇到一个很重要的问题，产量和销量的差值正在扩大，意味着大量库存的产生。怎么解决？\n\n我有两个想法，首先中低产线的车可能会通过更好的网约车制度解决，让车更好的共享。其次，走向海外。非洲都是日韩品牌车为主，中国车在那里的市场份额并没有我们想象中的大。\n\n**③ 美发店、推拿**\n\n如果不是从基层爬起来的，创业的成功概率低于 10%。\n\n**④ 家纺**\n\n过去我们总认为纺织业已经没有任何利润了，这是错的，安踏毛利率 52.6%，净利率 24.9%。\n\n申洲国际做代工，毛利率 31.6%，净利率能达 24.8%，耐克是它最大的客户之一，都没它高。全球大多数的运动类顶级品牌都是它代工的。\n\n申洲国际告诉我们一件事，实体产业做到极致的时候，就拥有了话语权跟绝对优势。\n\n很多工厂比申洲国际更便宜，但是不能大规模的出货，能大规模出货不能垫得起那么多的钱，能垫得起那么多钱，很难保证大规模出货的质量是稳定的。这是实体经济的壁垒，跟互联网说的壁垒是两件事情。\n\n**⑤ 酱油和醋**\n\n中国 TOP1 的酱油公司是海天酱油，截止到 4 月 17 日市值 2327 亿，总占有率是 18%，净利率是 30.5%。也就是说，很赚钱的是实体产业，比如酱油这种不怎么起眼的行业。\n\n**⑥ 食品类跨国企业**\n\n全球 TOP1 食品类跨国企业是雀巢，它收购了大量企业，但是那些企业并没有用雀巢这个名字。\n\n去年，雀巢在全球有 6000 多亿人民币销售额，净利润 670 亿。\n\n所以我一直强调的是：**我们要敬畏国际的巨头。**\n\n你融了一个亿就觉得自己牛，但是人家一年利润 670 亿，一天接近两个亿，这就是人家造钱的速度，十年之功不可能一日形成的。\n\n**⑦ 内衣**\n\n有一个品牌叫 Lululemon，最早做女性运动内衣，现在也做男性产品。\n\nLululemon 给品牌赋予精神、赋予圈层感、赋予科技感。我在五年前去香港，在时代广场看到 Lululemon 旗舰店，层高最高都七八米，跟苹果旗舰店差不多。\n\n**⑧ 海底捞**\n\n以前我们是向所有人做一种生意，现在是围绕着一群人做所有生意。\n\n海底捞给我们的启示是，什么部门都能赚钱。海底捞把财务部门做成了财务咨询公司，工程部顺便给别人搞装修，火锅调料也单独上市了。\n\n这个时代要充分的挖掘你公司现有的能力，快速把它变成赚钱的东西。\n\n**3.品牌溢价**\n\n人会为了巨大的快感支付超额的溢价，但是每个人的快感来源是不大一样的。\n\n男人可以为三件事情付钱，快感、存在感、认同感。如果你给男性做产品没有这三个标准，不能说你做不好，你捞不到最多的钱。\n\n我们一定要想清楚，头等舱休息室里的咖啡不好喝，面也不好吃。但是为什么那么多人就要待在那里喝咖啡？这里有很多内心的真实的洞察，我们一定要想明白，这对于做品牌非常重要。\n\n## 七、再看下沉市场\n\n一线的人最大的问题就是从来不会迈出他的 CBD 半步，但是每天思考怎么去赚那些人的钱。这根本就难以实现。\n\n这里分享几个关于下沉市场的观点和事实。\n\n**1.二线跟三线是两类城市，不要混在一起说**\n\n二线都有产业聚集，就业岗位明显高于三线城市，所以二线对人才的吸附能力是三线的很多倍。\n\n**2.三线城市新城区和老城区泾渭分明**\n\n比如泉州，老城区特别古老，我在那里的感觉就是回到了 80 年代。但是它的新城，万达广场特别大，万达在边上盖了一个特别大的小区，里面什么品牌都有，和上海的 CBD 没什么区别。\n\n**3.消费品市场的喜好是完全不一样的**\n\n玖姿这个品牌的定位就是卖给小镇贵妇，就是下沉市场的中产女性的品牌。但是我打听了一圈，一线基本没人知道。\n\n在农村，80 寸电视机卖得非常好。但一线城市家里放不下 80 寸的电视机。因为中国一线的年轻人都是租的房子，没有客厅。\n\n**4.存量改造是一门巨大的生意**\n\n包括 4S 店改造、酒店改造、家居行业改造、零售改造、家电 3C 的改造。\n\n一、二线城市现在 3.6 亿人口，4.75 亿手机，人均 1.3 台，下沉市场人均 0.5 台，两个人里还有一个人没有手机。\n\n**5.理性认识小镇青年**\n\n中国过去 40 年的发展来自于三点：**全球化、工业化和城市化。**\n\n改革开放之初，中国不超过 5% 的人是城里人，95% 以上的人都是小镇青年，即使今天身份证上是北京人，是城市人，但是内心骨子里依然有小镇青年的影子，这是品牌必须理解的一件事情，用数据系统打标是不能解决所有的洞察问题。\n\n总结一句，所有品牌的升级都是围绕一句话完成的：**渴望和大城市的人一样。**\n\n另外如果今天你还指望跟我聊下沉市场，而不是自己去看，那么这个生意已经跟你没有什么大关系了。\n\n## 八、出海再造一个经济体\n\n**1.出海并非单纯复制**\n\n中国的出海分两种：\n\n一种是以中国为母本向海外输出，一种是直接以海外为母体。\n\n以印度为例。\n\n一直在说印度是下一个中国，我认为这是一件低概率事件。\n\n有一组数据很重要，三四年前，中国、印度、越南全国年龄中位数，中国已经是 37 岁，今年差不多 40 岁，但是印度只有 30.4 岁，越南更小只有 26.7 岁。\n\n印度的 GDP 只有 2 万亿，中国是 13 万亿，还没有到中国的零头。人均 GDP 目前刚突破 1900 美元，但它的人口结构跟中国改革初期是差不多的。\n\n有一个更值得我们现在关心的市场叫做东南亚市场。\n\n东南亚 11 个国家最富的是新加坡，最穷的是缅甸，新加坡除以缅甸，人均 GDP 差了 46.7 倍。区域市场差异相当大。\n\n**2.出海非洲的 “坑”**\n\n非洲是一个复杂的多元化的市场，非洲的总体经济，由北向南越来越差。\n\n非洲的坑在哪里？它的单体存量很小，市场很分散，所以我们要做的是什么？简单的可复制的生意是做不了的。\n\n在非洲有一个品牌做得特别好，叫传音。\n\n它是如何进入非洲市场的？\n\n首先它从尼日利亚开始做，发现非洲电力供应不是很稳定，手机充电会很麻烦，于是它把手机电池做成 3000 毫安。\n\n同时少标一点容量，这会让别人觉得你的电力特别持久。\n\n其次，非洲经济比较拮据，人们会使用多个电话卡，因为有优惠套餐，传音成了第一家把双卡双待、四卡四待引入到非洲的企业。\n\n富贵和贫穷是一样的，都会限制人们的眼界和思考能力。\n\n## 九、新金融时代\n\n**巨量的隐形市场**\n\n未来的公司，没点金融能力都不能叫公司了。积分化、证券化、金融化是重要的方向。\n\n积分、里程是一个巨大的市场。美国运通每年向美国航空集团采购积分要花 10 亿美金。\n\n信用飞这家公司正在做的便是如何将中国几十家航空公司的积分能够打通，这件事如果做成了就会变成一个巨大的生意。\n\n携程，现在最赚钱的业务是卖保险。别小看卖延误险，它的利润特别高。\n\n在中国民营企业里，蚂蚁金服应该是在金融层面做的最好的之一。蚂蚁金服好在哪里呢？它在向线下延伸的时候，向小业主延伸，除了前端收款，后端还放贷。\n\n**我一直觉得中国有个很大的市场就是中小商户的市场。**\n\n你不要觉得所有人都能办出信用卡，有的人办不出信用卡。\n\n今天的中小企业，尤其是小微企业能通过阿里贷款，我认为这件事情如果能真的彻底做好是非常大的市场，比做前端新零售强多了，后端解决零售里的现金流问题，是新零售的重要组成部分。\n\n> 摘自微信公众号笔记侠[10 亿人没有坐过飞机，00后存款是90后的两倍……颠覆你的58个认知](https://mp.weixin.qq.com/s/qzTjL5JSpKtMVtBzKT_VLw)","slug":"start-up-business","published":1,"updated":"2019-05-31T07:28:10.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwkhgipy0006coc4pslle4cn","content":"<p>今天的这篇文章从反常识的数据开始谈起，基于<strong>中国的机遇与优势、实体经济、改变偏见，下沉市场、海外市场，新金融时代</strong>等板块，展开对新商业文明时代的看法。<br><a id=\"more\"></a></p>\n<p>在开启本篇的阅读前，大家先思考两个问题：</p>\n<blockquote>\n<p><code>1.你真的了解中国嘛？</code><br><code>2.你最看重的创业机会有哪些？</code></p>\n</blockquote>\n<h2 id=\"一、九个反常识的数据\"><a href=\"#一、九个反常识的数据\" class=\"headerlink\" title=\"一、九个反常识的数据\"></a>一、九个反常识的数据</h2><p><strong>① 全国约有 90% 以上的人没有喝过星巴克</strong></p>\n<p>这是我经过逻辑推理得出的。</p>\n<p>去年，星巴克宣布将 700 万星巴克会员接入支付宝。基于这个数据，我做了一系列推理。</p>\n<p>如果我们算每 7 个客户有一个开通会员，那么就是 4900 万，10 个里有 1 个是 7000 万。</p>\n<p>星巴克在上海的门店是最多的，500 家以上，这个城市 2500-3000 万的人口（含流动），三成喝过的话，是 900 万。</p>\n<p>中国目前星巴克的门店数是 3400 家，大多数覆盖在一二线城市。一线新一线二线（含广义二线）的人口总数不超过 3.6 亿，里面三成是 10800 万，2 成是 7200 万（越往下门店很少，渗透率很低，全量来看不超过 1.5 成，以上换算只提供思路，不代表最终实际数据。）</p>\n<p>因为我没有准确数据，我只能倒推，无论从哪个角度去倒推，<strong>90% 的人都没有喝过星巴克。</strong></p>\n<p>故而，知道并不等于喝过，并且一定有海量的人不知道星巴克。以上数据，依然是比较保守的推断。</p>\n<p><strong>② 50% 以上的中国人没有喝过农夫山泉</strong></p>\n<p>2016 年，农夫山泉的年销售额达到了 109.11 亿元，其中包含新产品和高端产品，桶装水，会议酒店供水等等。我一年可能要花 2400 元以上在农夫山泉上。</p>\n<p>按照这个销售额计算，<strong>假设客单价 20 元，那么只有 5 亿多人喝过农夫山泉。</strong></p>\n<p>《2018 全球品牌足迹报告》显示，农夫山泉消费者触及数达 3.35 亿。虽然农夫山泉的客单价不高，但是它的受众人群比较集中。</p>\n<p>故而，即使这个品牌是大众到不能再大众的了，依然不可能做到人人都喝。</p>\n<p><strong>③ 中国约有 1000 万人从事足疗行业</strong></p>\n<p>仅北京市就有 20 万人从事足疗，推算一下，中国有 661 个城市，那么 1000 万这个数字依然是保守的估计。</p>\n<p><strong>④ 13 亿人没有出过国</strong></p>\n<p>中国出入境管理局发布，2018 年全国有效的因私普通护照私有量为 1.3 亿本。也就是说，起码有 90% 的中国人没有出过国。</p>\n<p><strong>⑤ 10 亿人没有坐过飞机</strong></p>\n<p>为什么每次坐飞机的时候工作人员都会演示一遍安全操作？因为跟你一起坐飞机的人中，起码有一半人是第一次坐飞机。</p>\n<p>中国头等舱用户不超过 600 万，每年常旅客不超过 1500 万（年飞行超过 6 次的称为常旅客）。</p>\n<p>由此可以看出：在航空杂志投广告，其实就只有那 1500 万常旅客能看到。所以，航空业广告商做廉价产品是行不通的，只有针对那 1500 万人的产品和服务才能实现有效目的。</p>\n<p>国航的白金卡用户不超过 5 万人，听说东航不超过 5000 人（除了一些特殊渠道，一年盯着一个航空飞行 120 次经济舱，60 次商务舱，40 次洲际公务舱才能拿到这个白金卡）。</p>\n<p><strong>⑥ 中国最大的便利店不是全家，而是中石化旗下的易捷便利店</strong></p>\n<p>每一个中石化加油站旁边都有一个易捷便利店。</p>\n<p>目前是中国最大的便利店，有 25000 多家门店，《2018 中国便利店发展报告》显示，易捷便利店占全国便利店超过 20% 的份额，很难被超越。</p>\n<p><strong>⑦ 处于房地产中介金字塔塔尖的，通常是穿着拖鞋、汗衫的二房东</strong></p>\n<p>像上海静安区的一些小别墅，还有北京的四合院，都是少量不可再生的，往往这些房子很受欢迎，很多人喜欢租这样的房子。</p>\n<p>我们公司租的房子的二房东就是这样的人。</p>\n<p>早期做租赁的中介发现这一现象后，就把这些房子一套套收过来进行改装，进而成为二房东。</p>\n<p>我大概计算了一下，如果成为 20 套老别墅的二房东，每个月净利润可达 50 万，每套差价在 2-5 万之间，合同一签就是 10 年。</p>\n<p><strong>⑧ 进口猪蹄比国内猪蹄便宜 30%—50%</strong></p>\n<p>因为除了中国、德国等少数国家，全世界大多数人不吃猪蹄。在很多国家，猪蹄被当做废品处理，中国人把它收购拿回国内，比在国内采购还便宜。</p>\n<p><strong>⑨ 中国产的棉毛裤在西班牙可以卖 10 倍的价格</strong></p>\n<p>过去，欧洲人是不知道世界上还有个东西叫棉毛裤。</p>\n<p>中国有个小伙子，把浙江生产的内销不掉的棉毛裤拖到欧洲，在他们冬天特别冷的时候卖，卖得特别好。</p>\n<h2 id=\"二、中国的四大优势和巨大契机\"><a href=\"#二、中国的四大优势和巨大契机\" class=\"headerlink\" title=\"二、中国的四大优势和巨大契机\"></a>二、中国的四大优势和巨大契机</h2><p>如果这四点不发生根本性改变，那么我们依然是有巨大的机会。</p>\n<p><strong>① 中国具有全球最强的终端制造产业链和产业集群</strong></p>\n<p>有一次我去印度和埃及，带的是 iPhone 手机，手机上套了一个有 6 个玻璃镜头的手机壳，当地人都非常好奇，问我这是什么？他们根本没有见过这样的手机壳。</p>\n<p>6 个镜头的手机壳在中国被认为是低端制造，但其实它在全球属于中端制造了，因为全球绝大多数地区都无法生产出来。</p>\n<p>因为这个产品涉及的产业链和零部件非常多，而全世界也只有中国能够最高效、最低价、最批量地生产，并以最大规模的消耗掉。</p>\n<p>还有一个现象也很有趣，<strong>在中国南部和东部地区，有大量县城变成了一个个产业集群，</strong>整个县城都围绕着一个生意展开，在那里走几公里就能找到一切你需要的东西，但在别的国家，这可能是要跨国才能完成的。</p>\n<p>对中国制造我有一个基本的判断：中国是全球最强的中端制造大国，没有之一。任何一个国家无 30 年积累，无政策连贯性支持，无法取代中国中端制造的优势。</p>\n<p><strong>② 我们的劳动力已不是全球最便宜的，但是劳动力素质全球最高</strong></p>\n<p>现在只有中国的劳动力是最具有勤劳、刻苦精神的。越南、柬埔寨的劳动力确实便宜，非洲的劳动力更低，但是和中国相比，职业技能不可同日而语。</p>\n<p><strong>③ 我们依然是全球最大的消费市场</strong></p>\n<p>今天大部分中国人已经改变了储蓄的习惯，乐于消费。</p>\n<p><strong>④ 中国人是全球最渴望改变命运的</strong></p>\n<p>印度人都信印度教，印度教告诉你人分等级，这辈子好好修行，下辈子再升级到婆罗门。中国没有这样的教育，中国人都相信通过努力能过得更好一点。</p>\n<h2 id=\"三、在这里，读懂中国\"><a href=\"#三、在这里，读懂中国\" class=\"headerlink\" title=\"三、在这里，读懂中国\"></a>三、在这里，读懂中国</h2><p>关于人口，大多数人对其判断都是非常情绪化的，也是错误的。</p>\n<p>一些美国经济学家研究发现：长期高速的经济增长会对国民性格产生很多改变，他们会更乐观、更自信、更积极向上、更开放、更包容。</p>\n<p>而这些因素集中体现在今天中国的 00 后身上。</p>\n<p><strong>1. 很多农村地区幸福指数远高于城市</strong></p>\n<p>农村收入并不高，但他们有宅基地，有自留地，他们可以将自留地租出去，每年收取租金。某些地区，他们的幸福指数很高，远远高于发达地区。</p>\n<p>基于大量的观察发现，现在农村里种地的人很少，并且几乎都是机械化种植，很多人会外出打工。</p>\n<p>但是在他们眼里，大城市不是他们的世界，老了还是要回去，因为老家还有地。只要想到自己有土地，他们吃再多苦，都是乐意的。</p>\n<p><strong>2. 90 后到 00 后的消费观发生很大变化</strong></p>\n<p><strong>① 消费升级</strong></p>\n<p>90 后、00 后在社会认同感上的消费，在他们进入社会几年后就会和上一代人趋同，并且更愿意提前完成这种认同感的消费。</p>\n<p>他们中很多人的第一辆车一定不是雪佛兰，而是直接进入高端车的低配版，所以奔驰 C 系列、宝马 3 系、宝马 X1 都卖得特别好。</p>\n<p><strong>另外，奢侈品年轻化趋势非常明显。</strong>在中国，更多女生在 20 多岁左右就开始用 La Mer，而在欧美，更多成熟女性选择它，不仅仅是钱的问题。</p>\n<p>我认为 90 后的第一次装修是一波不可再生的资源，并且这波 90 后一定比后面的每一代人都多。</p>\n<p>对于装修来说，很多大件，包括家电、家居、甚至小家电，是不会随便更换的，而 90 后的结婚潮已经到来，虽然他们中有很多人选择了不婚和晚婚，但是在压力较小的三四线，这一波行情还是比较明显的。</p>\n<p>所以，<strong>一定要抓住 90 后的装修升级，如果错过了，可能三五年内都没有消费了。</strong></p>\n<p><strong>② 孤独催生商机</strong></p>\n<p>90 后比较懒，还有独生子女病，孤独将催生一大波的商机。</p>\n<p>孤独的年轻人喜欢养动物，他们会带宠物去按摩和游泳，等到他们出差的时候，会找个宠物店寄养，一个不到 1 平方米的地方 1 天要花 300 块。</p>\n<p>此外，还有专门的宠物殡葬，基于此，宠物市场一定还会扩大，并且每年快速增长。</p>\n<p><strong>③ 比起 KOL，他们更相信真实用户反馈</strong></p>\n<p>在腾讯提供的 00 后报告中，我们能够看到，KOL（关键意见领袖）的影响力在下降，比起 KOL，00 后更相信真实的用户反馈。</p>\n<p>对于所有品牌主来说，未来的投放会变得很难，因为你需要对接海量的超级用户，并且你要把他们当作一件很重要的事情去运营。</p>\n<p><strong>④ 对国产品牌的认知正在改变</strong></p>\n<p>今天，国产品牌并不比国外品牌差，这个问题在 00 后的心目中正在形成。</p>\n<p>主要有以下 3 个原因：</p>\n<p><strong>第一，中国制造真的在进步；</strong></p>\n<p>第二，大量国外品牌把落后的生产线丢到中国，现在才开始重视中国市场，但已经晚了，因为中国品牌的反应速度更快；</p>\n<p><strong>第三，00 后成长的年代就是民族自豪感产生的年代。</strong></p>\n<p>对于 00 后来说，他们向往在专注领域有深刻见解的品牌。</p>\n<p>老一代人恨不得一个产品具备所有功能，但是今天 00 后更喜欢专业领域的、垂直的、优秀的品牌。</p>\n<p><strong>⑤  00 后的存款是 90 后的两倍</strong></p>\n<p>虽然 00 后存款只有 1840 元，但 90 后更少，只有 800 元（数据来源于腾讯最新的 00 后研究报告）。</p>\n<p><strong>3.关于人口红利</strong></p>\n<p>我们总是很悲观地说人口红利没有了，其实只是分红方式发生了改变。</p>\n<p>现在的人口红利正在体现为地区性、结构性和微观性，每个地区不是统一统筹的。</p>\n<p>即使目前中国年轻劳动力更少了，但依然在绝对数量上超越了大多数国家，并且中国的劳动力具有素质跟薪资的平衡优势。</p>\n<p>不要老是觉得员工就应该给你干什么，这是错的。你首先要思考的是，你能为你的员工干什么，能帮助他们实现什么。</p>\n<p>也就是说，梦想要有，但回馈也要有。</p>\n<p><strong>4.劳动力总数还在增长</strong></p>\n<p>目前我国劳动力还没有衰退，去年农民工总数比上年增长了 0.6%。农民进一步从土地中解放出来。</p>\n<p>相比去年，城镇化进一步提高，按照这个趋势，我认为中国的城镇化率未来会像发达国家看齐，达到 70% 左右。</p>\n<p>第三季度农民工外出打工获得的收入平均 11130 元。但他们有自留地，还有宅基地。（以上数据全部来自于国家统计局 2018 年）</p>\n<h2 id=\"四、在这里，改变偏见\"><a href=\"#四、在这里，改变偏见\" class=\"headerlink\" title=\"四、在这里，改变偏见\"></a>四、在这里，改变偏见</h2><p>这里我们要分享一下看企业的方法论，我写了很多《在这里改变偏见》系列文章，看起来有的观点很出格，其实有一套严谨的体系。</p>\n<p><strong>1.看企业是有方法论的</strong></p>\n<p><strong>① 看顶层设计</strong></p>\n<p>顶层先设计好，设计不好后期很难发力。</p>\n<p><strong>② 看战术</strong></p>\n<p>战术要跟团队一起看，看团队，高层跟基层要分开看。</p>\n<p>员工都觉得老板是个骗子，不相信他的梦想，这是有问题的。你会发现，那些优秀的企业，起码有 30% 的员工非常相信老板，50% 的员工没有那么相信老板，但是觉得老板说得对，就跟着做。</p>\n<p>如果你的公司是这样，成功的概率会更高。</p>\n<p><strong>③ 看大市场</strong></p>\n<p>如果这个市场很小，你也很难做，所以大市场就是企业发展的天花板。</p>\n<p>机遇来自于时间窗口。每过一个阶段，社会要素都会发生变化，在变化的过程中，我们就能找到重新切入存量市场的最大机会。</p>\n<p><strong>④ 看执行</strong></p>\n<p>看执行是不是到位，如果执行不到位也是白干。</p>\n<p><strong>2.读过书的人认为的内容跟现实需要的内容一般是两回事</strong></p>\n<p>我们都说互联网是规模经济，其实互联网在一定程度上是反规模经济的。用户时长是有限的，很多公司都在抢，也就是说买用户的成本非常高，到一定程度后是反互联网规律的。</p>\n<p>趣头条之前聘请了很多优秀的编辑，这些编辑精选了很多文章推送给他们的用户，发现这些文章的点开率很低。</p>\n<p>后来他们把一篇广场舞教学的视频放到了第一位，而且全量推送给所有用户，点开率高达 10%，也就是说 10 个人中就有一个人看了。</p>\n<p>这件事告诉我们，<strong>很多时候读过书的人认为的内容跟群众需要的内容是两件事。</strong></p>\n<p><strong>3.品牌要做到用户洞察、留客、复购和裂变</strong></p>\n<p>最近腾讯的朋友告诉我，又有一些品牌通过小程序的投放实现快速的男装定制，月销 15 万单，单价 200 元。</p>\n<p>过去做这事很难，因为男人的钱很难赚，而想要找到他们也很难。</p>\n<p>这里面两个事情最关键，<strong>一是柔性供应链，二是精准投放。</strong>没有这两点，男装定制依然是个小而美的生意。</p>\n<p>当我们说到亲子类的账号，我们认为亲子类账号就应该卖婴儿纸尿裤、儿童玩具。但有赞的朋友告诉我，有赞上卖得最好的是零食，是大人用的东西。</p>\n<p>为什么呢？因为大人每天被孩子折磨得很痛苦，所以晚上会买一点东西给自己吃。所以我们很多时候对用户的理解是错误的，是偏差的。</p>\n<p>有一个网红直播卖白酒，销量是两三天上千万，客单价 900 元。这件事告诉我们，私域流量的时代已经到来了，你必须真正做好用户洞察。</p>\n<p>私域流量的运营跟传统投放有三个关键区别：<strong>留客、复购、裂变。</strong></p>\n<p>以前投放了，人过来了，买了，走了。现在是人进来了你得留住，留住之后让他反复买，反复买完之后你还得让他帮你拉人头，裂变。</p>\n<p>今天很多账号只有 2 万粉丝，在很多人眼里 2 万粉丝都不能叫规模，我甚至觉得 2 万粉丝是不可能赚到钱的。</p>\n<p>但他们通过做留客，发掘粉丝需求，做好复购、裂变，活得挺不错，这颠覆了我原来的认知。</p>\n<p><strong>4.价值百万的金属切割机在快手上卖掉了</strong></p>\n<p>在和快手沟通的时候，我发现一件很神奇的事情，价值百万的金属切割机在快手上卖掉了。</p>\n<p>过去大家一直以为互联网上只能卖便宜的、高频的、生活必须的东西。</p>\n<p>金属切割机是怎么卖掉的呢？他们的方式就是，放一台切割机让它运转，用它把金属球切下来，有一些厂商老板看到这个视频就买了。</p>\n<p>最主要的原因是，<strong>乡镇企业家都喜欢上快手，所以受众契合，并且这种视频非常直观，是带有销售能力的。</strong></p>\n<p>乡镇企业家采购设备，你跟他演示很多 PPT 是没有用的，他要看直观的效果。所以经常有人在快手上做暴力演示。</p>\n<p>一个人在快手上卖钓鱼竿，他用鱼竿钓一个 200 斤的桶在空中旋转，下面有人留言说 “这个钓鱼竿在哪里卖，我要买”。这就是效果广告，往往是简单粗暴的。</p>\n<p>全国快手播放量 TOP10 的乡镇，第一个是连云港的海头镇，那里有非常多的人通过直播卖鱼。</p>\n<p>这些案例给我们提供了一个逻辑：<strong>在不同的场景下可以做不同的事情，我们要大胆去思考很多问题。</strong></p>\n<h2 id=\"五、这是一个反智的时代\"><a href=\"#五、这是一个反智的时代\" class=\"headerlink\" title=\"五、这是一个反智的时代\"></a>五、这是一个反智的时代</h2><p><strong>1.书读多了反而让人变得反智</strong></p>\n<p>人读书多了，有时候会进入到一个奇怪的现象——反智。</p>\n<p>聪明人总是以为自己能搞懂一百种生意就能做好一百种生意，这是彻底错误的，你的一生只需要做好一件事情就可以了。</p>\n<p><strong>很多老板的反智出现在，主业都有问题了，还想通过副业救公司，</strong>这种情况 99% 是不可能的。</p>\n<p>当你的主业出现问题，你应该解决主业问题，而不是去搞副业。不要试图去做不符合你能力模型的业务。</p>\n<p>举个例子，我跟马英尧 (尚美生活 &amp; OneZone 创始人) 探讨过很多次小镇青年、下沉市场。</p>\n<p>我们能写出 10 万 +、100 万 +，只能证明我们写东西的能力强、总结能力强、逻辑强，不能证明我们去小镇就能做生意，所以不要去做跟你能力模型无关的事情。</p>\n<p>不足够热爱的事情你就无法掌握、经营它的本质。一定要热爱，热爱的时候你才能发现别人发现不了的东西。</p>\n<p><strong>2.不热闹的行业可能很赚钱</strong></p>\n<p><strong>很多人觉得这个行业不热闹，挣不到钱，这就是反智。</strong></p>\n<p>挣钱的人是不会告诉他们是挣钱的，更不会告诉你怎么挣钱。事实上，太过热闹的行业才是挣不到钱的，不热闹的行业多是挣钱的。</p>\n<p>我在广州认识一个老板，他在珠江口挖沙，利润相当可观。</p>\n<p>这个行业热闹吗？不热闹。但是这些才是挣钱的。</p>\n<p><strong>升级的成本要低于收入，</strong>这是一条常识。但今天很多人是没有这个常识的。</p>\n<p>比如你把门店升级的很高端，最后人家只来拍照，不买东西。这是最简单但最容易被忽略的生意的本质。</p>\n<p>很多行业的规律是 1%—2% 的企业是赚大钱的，18% 的企业是赚钱的，30% 的企业是持平的，50% 的企业是亏钱的，剩下不赚钱和亏钱的企业，天天在网上说行业走到头了。</p>\n<p><strong>3.大谈颠覆的人，往往对这个行业就了解 30%</strong></p>\n<p>当你对一个行业了解到 30% 的时候，你会觉得你发现了一个巨大的商机，你要颠覆这个行业。了解 70% 的时候，信心崩塌了，原来你所思考的一切问题已经有人思考过了。等你扛到 90% 的时候，你会发现你已经没有太多对手了，过了 95% 之后，你面对的只有几个玩家了。</p>\n<p>每个行业都有金线，我们一定要找到那条线，找不到你就永远不可能得道。</p>\n<p><strong>4.很多的悲观都是情绪化的悲观</strong></p>\n<p>在消费方面，我举一组例子：</p>\n<p>家里有两套房，兜里还有 100 万，贷款 300 万，股市套牢 50 万，心情很不好，但是该吃吃该喝喝什么都不少。</p>\n<p>家里一套房，兜里 50 万，没有贷款，上升无望，心情很不好，但是该吃还得吃该喝还得喝。</p>\n<p>家里没有房，兜里有 10 万，打算买房，但觉得有点远，但是该吃还得吃该喝还得喝。</p>\n<p><strong>很多的悲观都是情绪化的悲观。</strong></p>\n<p>看消费，看什么？看工业，看发电量，看高速公路。高速公路上没车了，发电量大幅度下降了，那可能真的有问题了。这些数值没有特别大的波动，大概率上问题还不是很大。</p>\n<p>清朝的时候，有一场战争叫雅克萨战役，俄国人跟大清打了一仗，后来清朝赢了，但赢得非常艰难。</p>\n<p>俄国当时已经装备了最先进的火枪，火枪队对清兵形成了很大的威胁。</p>\n<p>大清有大炮，最后大清用大量的红衣大炮压制住了火枪，但是大清没有意识到火枪才是更先进的装备。</p>\n<p>这个时代也是如此，<strong>很多时候企业最后看起来赢了，但依然是上一个时代的优势，</strong>你认为应该加强这个优势，但其实世界已经改变了。</p>\n<p>到下一个节点，你的大炮就是废铁了。</p>\n<p><strong>5.炫耀从不改变，只是方式发生了改变</strong></p>\n<p>今天，很多人觉得过了那个阶段，人就不会炫耀了。我觉得这是瞎说，你的 LOGO 是不见了，但是你每天都把儿子的私立学校挂在朋友圈。</p>\n<p>为什么你在上班的时候发的朋友圈都没有定位，但是到了普吉岛和洛杉矶都要带上定位？</p>\n<p>这都是炫耀。</p>\n<p>炫耀从来没有改变过，只是方法在不同的人群里有了一定变化。我们只要抓住这个变化就能找到一些规律。</p>\n<p><strong>6.靠勤快致富的行业都需要尊重本质</strong></p>\n<p>前段时间我写了一篇文章叫《世间没有新零售》，我认为世间没有 “新零售”，只是零售变新了。</p>\n<p>本质是零售，而不是新，本质性的问题从来没有变化过，租金、押金、账期、人员、招募、管理、培训、预防、物流仓储、周转率、坪效、人效，轰轰烈烈四年的新零售创业，只让中介、装修队和物业赚到了钱。</p>\n<p>线上线下打通对于大多数企业是不成立的，因为当你的用户不是全量用户的时候，两端用户是匹配不上的。</p>\n<p>中国目前很多行业都称为 “勤行”，所有靠勤快致富的行业都需要尊重本质。</p>\n<p>我以前开了十几家果汁店、餐厅，倒了一半，后来我得出结论，<strong>不是道理说得很明白你就能把事情做好。</strong></p>\n<p><strong>7.新人爱说跨界打击，基本上是跨界来被打击</strong></p>\n<p>跨界打击的前提是你要打的那个人，他会的你都会，他不会的你也会。</p>\n<p>他会的你不会，还没到你的时候，你就被他打败了。</p>\n<p>社会零售的总需求增长已经放慢，慢于渠道分化的速度，这就意味着五年之内很多渠道将彻底垮了，崩塌了。</p>\n<p><strong>8.消费升级也体现在更精简的 SKU（库存量单位）</strong></p>\n<p>最近网易严选之所以出了很多问题，是因为它的 SKU 更多，其实它应该做更少的 SKU 满足 80% 的需求，而不是为了那 20% 的需求去制造 80% 的麻烦，这是很重要的。</p>\n<p>很多时候花里胡哨的东西只能满足一小群人。</p>\n<p>京东京造上有一个很重要的品种，叫乳胶枕，卖得特别好。</p>\n<p>今天，我们对国货的信任度正在快速提高，在京东平台上，<strong>男性的转化率高于女性，尤其是在这种类型的消费升级。</strong></p>\n<p><strong>9.直播最重要的不是直播，是叫大哥</strong></p>\n<p>制造垃圾快乐是当下最高效的吸金方式，小程序算命、逆袭小说、小姐姐直播，大家都喜欢看。</p>\n<p>什么样的人最喜欢在直播平台打赏？就是有钱但是平时生活里没有人重视的人。</p>\n<p>这个秘密我是怎么知道的？当年我开店的时候，跟一个包工头老板聊天，他说他一年打赏花了 10 万，但他是他们圈子里打赏最少的，其他人打赏都是 100 万起步。</p>\n<p>后来我研究了一下，那些包工头每年能赚几百万，甚至几千万。但是在工商界，很多人都觉得他们比较 LOW，不能上台面，他们很失落，所以他们喜欢去直播平台打赏。</p>\n<p>很多人为了被口播，会花大量的钱，在直播平台，他们能获得尊重和荣耀。所以直播的本质是口播，而不是直播。</p>\n<h2 id=\"六、再看实体经济\"><a href=\"#六、再看实体经济\" class=\"headerlink\" title=\"六、再看实体经济\"></a>六、再看实体经济</h2><p>实体经济，实体品牌，只要本质不发生改变，就永远会有喜新厌旧、物极必反的机会。</p>\n<p>举个例子，前几年女生喜欢买蔻驰的包，结果地铁一打开，一节车箱出现了 10 个蔻驰。</p>\n<p>于是她们找到了下一个品牌，过了一年半载，地铁打开又是 10 个这个品牌，她们又去换别的牌子，这就叫物极必反，喜新厌旧。</p>\n<p>新国货崛起两条路最靠谱：</p>\n<p>第一个是主打性价比，高质量、高逼格、中低价格；第二个是主打圈层高、质量高价格。</p>\n<p><strong>1.工厂的转型之路</strong></p>\n<p>今天的中国工厂，过得好的有两种：</p>\n<p><strong>一种是做短线，做高质量、低价格、**</strong>针对 C2M（顾客对工厂）模式的产品，**然后通过各种平台快速消化，只有这样才能保持产线运作、保持工厂流水。但是没有品牌只能解近渴。</p>\n<p><strong>一种是做长线，做高逼格、低价格的品牌。</strong>也就是在初期用规模换空间，用规模降成本，中期要思考如何做成一个品牌。</p>\n<p>但是，做长线的企业里，大部分工厂很难出品牌。因为没有这样的基因，它的顶层设计和团队都是错的。</p>\n<p>比如高薪挖来一个人做品牌，又不很信任，也不放权，非要用自己的产线思维去管人家的品牌思维，这也是不行的。所以基本上能实现迭代的工厂仍旧不多。</p>\n<p><strong>2.四类产品的降维打法</strong></p>\n<p>我们可以通过一个区隔方式把产品分成四种：</p>\n<p><strong>① 功能属性的产品优衣库化</strong></p>\n<p>什么叫做优衣库化？优衣库最早进入美国市场的时候开在沃尔玛边上，因为开在乡下没有人买，觉得这是很 LOW。</p>\n<p>优衣库是做怎么起来的？它把重金花在了最好的街头，开最好的旗舰店，打造一个中产阶级偏高的象征的东西和品质感，但是它的价格是偏低的。把快消品的功能性做成一种符号，一种腔调，才能赢得人心。</p>\n<p><strong>② 身份属性的产品奢侈品化</strong></p>\n<p>身份属性的产品奢侈化，但是它是功能属性为主。</p>\n<p>我觉得功能属性就是即使性价比很强，也很难成为企业家需要的东西，或中产阶级偏上及中产需要的东西。</p>\n<p>这里必须去打造你的区隔感，身份属性的东西要做的高级，要有奢侈品的感觉。</p>\n<p><strong>③ 高频消耗品上瘾化</strong></p>\n<p>高频的消耗品一定要带有一定的上瘾化，如果你不能上瘾，不能形成某一种触觉和连接的感觉，你是很难做好这个生意的。</p>\n<p>举个例子，很多人抽烟并不是为了抽烟，他就喜欢手里有个东西，让它成为一种衍生的器官。创造上瘾的特性很重要。</p>\n<p>牙膏在最早推出的时候不起泡沫，但产品经理发现，如果没有泡泡、没有薄荷味道，很难让人上瘾，觉得牙膏没效果。所以牙膏有泡泡、很清凉，消费者觉得这样才有效，产品就普及了。</p>\n<p>也就是说，你的产品可以加一点没有实际作用、但能让人上瘾的东西。</p>\n<p><strong>④ 低频耐耗品信仰化</strong></p>\n<p>今天很多大家电其实是属于耐耗品，一定要有信仰、有圈层。</p>\n<p><strong>2.行业现象</strong></p>\n<p><strong>① 卤制品</strong></p>\n<p>中国卤制品行业是一个高度分散的行业，行业研报数据是 2500 亿，但是因为有大量不开票的现象（菜场、小作坊、路边摊等等），所以业内甚至有人预估是 8000 亿。</p>\n<p>绝味鸭脖是行业头部企业，大概一年 40 亿营收。所以这是一个离散度很高的产业。也就是说：你还有机会在一个地区生产出一个几个亿的卤制品品牌。</p>\n<p><strong>② 乘用车</strong></p>\n<p>目前中国的乘用车市场遇到一个很重要的问题，产量和销量的差值正在扩大，意味着大量库存的产生。怎么解决？</p>\n<p>我有两个想法，首先中低产线的车可能会通过更好的网约车制度解决，让车更好的共享。其次，走向海外。非洲都是日韩品牌车为主，中国车在那里的市场份额并没有我们想象中的大。</p>\n<p><strong>③ 美发店、推拿</strong></p>\n<p>如果不是从基层爬起来的，创业的成功概率低于 10%。</p>\n<p><strong>④ 家纺</strong></p>\n<p>过去我们总认为纺织业已经没有任何利润了，这是错的，安踏毛利率 52.6%，净利率 24.9%。</p>\n<p>申洲国际做代工，毛利率 31.6%，净利率能达 24.8%，耐克是它最大的客户之一，都没它高。全球大多数的运动类顶级品牌都是它代工的。</p>\n<p>申洲国际告诉我们一件事，实体产业做到极致的时候，就拥有了话语权跟绝对优势。</p>\n<p>很多工厂比申洲国际更便宜，但是不能大规模的出货，能大规模出货不能垫得起那么多的钱，能垫得起那么多钱，很难保证大规模出货的质量是稳定的。这是实体经济的壁垒，跟互联网说的壁垒是两件事情。</p>\n<p><strong>⑤ 酱油和醋</strong></p>\n<p>中国 TOP1 的酱油公司是海天酱油，截止到 4 月 17 日市值 2327 亿，总占有率是 18%，净利率是 30.5%。也就是说，很赚钱的是实体产业，比如酱油这种不怎么起眼的行业。</p>\n<p><strong>⑥ 食品类跨国企业</strong></p>\n<p>全球 TOP1 食品类跨国企业是雀巢，它收购了大量企业，但是那些企业并没有用雀巢这个名字。</p>\n<p>去年，雀巢在全球有 6000 多亿人民币销售额，净利润 670 亿。</p>\n<p>所以我一直强调的是：<strong>我们要敬畏国际的巨头。</strong></p>\n<p>你融了一个亿就觉得自己牛，但是人家一年利润 670 亿，一天接近两个亿，这就是人家造钱的速度，十年之功不可能一日形成的。</p>\n<p><strong>⑦ 内衣</strong></p>\n<p>有一个品牌叫 Lululemon，最早做女性运动内衣，现在也做男性产品。</p>\n<p>Lululemon 给品牌赋予精神、赋予圈层感、赋予科技感。我在五年前去香港，在时代广场看到 Lululemon 旗舰店，层高最高都七八米，跟苹果旗舰店差不多。</p>\n<p><strong>⑧ 海底捞</strong></p>\n<p>以前我们是向所有人做一种生意，现在是围绕着一群人做所有生意。</p>\n<p>海底捞给我们的启示是，什么部门都能赚钱。海底捞把财务部门做成了财务咨询公司，工程部顺便给别人搞装修，火锅调料也单独上市了。</p>\n<p>这个时代要充分的挖掘你公司现有的能力，快速把它变成赚钱的东西。</p>\n<p><strong>3.品牌溢价</strong></p>\n<p>人会为了巨大的快感支付超额的溢价，但是每个人的快感来源是不大一样的。</p>\n<p>男人可以为三件事情付钱，快感、存在感、认同感。如果你给男性做产品没有这三个标准，不能说你做不好，你捞不到最多的钱。</p>\n<p>我们一定要想清楚，头等舱休息室里的咖啡不好喝，面也不好吃。但是为什么那么多人就要待在那里喝咖啡？这里有很多内心的真实的洞察，我们一定要想明白，这对于做品牌非常重要。</p>\n<h2 id=\"七、再看下沉市场\"><a href=\"#七、再看下沉市场\" class=\"headerlink\" title=\"七、再看下沉市场\"></a>七、再看下沉市场</h2><p>一线的人最大的问题就是从来不会迈出他的 CBD 半步，但是每天思考怎么去赚那些人的钱。这根本就难以实现。</p>\n<p>这里分享几个关于下沉市场的观点和事实。</p>\n<p><strong>1.二线跟三线是两类城市，不要混在一起说</strong></p>\n<p>二线都有产业聚集，就业岗位明显高于三线城市，所以二线对人才的吸附能力是三线的很多倍。</p>\n<p><strong>2.三线城市新城区和老城区泾渭分明</strong></p>\n<p>比如泉州，老城区特别古老，我在那里的感觉就是回到了 80 年代。但是它的新城，万达广场特别大，万达在边上盖了一个特别大的小区，里面什么品牌都有，和上海的 CBD 没什么区别。</p>\n<p><strong>3.消费品市场的喜好是完全不一样的</strong></p>\n<p>玖姿这个品牌的定位就是卖给小镇贵妇，就是下沉市场的中产女性的品牌。但是我打听了一圈，一线基本没人知道。</p>\n<p>在农村，80 寸电视机卖得非常好。但一线城市家里放不下 80 寸的电视机。因为中国一线的年轻人都是租的房子，没有客厅。</p>\n<p><strong>4.存量改造是一门巨大的生意</strong></p>\n<p>包括 4S 店改造、酒店改造、家居行业改造、零售改造、家电 3C 的改造。</p>\n<p>一、二线城市现在 3.6 亿人口，4.75 亿手机，人均 1.3 台，下沉市场人均 0.5 台，两个人里还有一个人没有手机。</p>\n<p><strong>5.理性认识小镇青年</strong></p>\n<p>中国过去 40 年的发展来自于三点：<strong>全球化、工业化和城市化。</strong></p>\n<p>改革开放之初，中国不超过 5% 的人是城里人，95% 以上的人都是小镇青年，即使今天身份证上是北京人，是城市人，但是内心骨子里依然有小镇青年的影子，这是品牌必须理解的一件事情，用数据系统打标是不能解决所有的洞察问题。</p>\n<p>总结一句，所有品牌的升级都是围绕一句话完成的：<strong>渴望和大城市的人一样。</strong></p>\n<p>另外如果今天你还指望跟我聊下沉市场，而不是自己去看，那么这个生意已经跟你没有什么大关系了。</p>\n<h2 id=\"八、出海再造一个经济体\"><a href=\"#八、出海再造一个经济体\" class=\"headerlink\" title=\"八、出海再造一个经济体\"></a>八、出海再造一个经济体</h2><p><strong>1.出海并非单纯复制</strong></p>\n<p>中国的出海分两种：</p>\n<p>一种是以中国为母本向海外输出，一种是直接以海外为母体。</p>\n<p>以印度为例。</p>\n<p>一直在说印度是下一个中国，我认为这是一件低概率事件。</p>\n<p>有一组数据很重要，三四年前，中国、印度、越南全国年龄中位数，中国已经是 37 岁，今年差不多 40 岁，但是印度只有 30.4 岁，越南更小只有 26.7 岁。</p>\n<p>印度的 GDP 只有 2 万亿，中国是 13 万亿，还没有到中国的零头。人均 GDP 目前刚突破 1900 美元，但它的人口结构跟中国改革初期是差不多的。</p>\n<p>有一个更值得我们现在关心的市场叫做东南亚市场。</p>\n<p>东南亚 11 个国家最富的是新加坡，最穷的是缅甸，新加坡除以缅甸，人均 GDP 差了 46.7 倍。区域市场差异相当大。</p>\n<p><strong>2.出海非洲的 “坑”</strong></p>\n<p>非洲是一个复杂的多元化的市场，非洲的总体经济，由北向南越来越差。</p>\n<p>非洲的坑在哪里？它的单体存量很小，市场很分散，所以我们要做的是什么？简单的可复制的生意是做不了的。</p>\n<p>在非洲有一个品牌做得特别好，叫传音。</p>\n<p>它是如何进入非洲市场的？</p>\n<p>首先它从尼日利亚开始做，发现非洲电力供应不是很稳定，手机充电会很麻烦，于是它把手机电池做成 3000 毫安。</p>\n<p>同时少标一点容量，这会让别人觉得你的电力特别持久。</p>\n<p>其次，非洲经济比较拮据，人们会使用多个电话卡，因为有优惠套餐，传音成了第一家把双卡双待、四卡四待引入到非洲的企业。</p>\n<p>富贵和贫穷是一样的，都会限制人们的眼界和思考能力。</p>\n<h2 id=\"九、新金融时代\"><a href=\"#九、新金融时代\" class=\"headerlink\" title=\"九、新金融时代\"></a>九、新金融时代</h2><p><strong>巨量的隐形市场</strong></p>\n<p>未来的公司，没点金融能力都不能叫公司了。积分化、证券化、金融化是重要的方向。</p>\n<p>积分、里程是一个巨大的市场。美国运通每年向美国航空集团采购积分要花 10 亿美金。</p>\n<p>信用飞这家公司正在做的便是如何将中国几十家航空公司的积分能够打通，这件事如果做成了就会变成一个巨大的生意。</p>\n<p>携程，现在最赚钱的业务是卖保险。别小看卖延误险，它的利润特别高。</p>\n<p>在中国民营企业里，蚂蚁金服应该是在金融层面做的最好的之一。蚂蚁金服好在哪里呢？它在向线下延伸的时候，向小业主延伸，除了前端收款，后端还放贷。</p>\n<p><strong>我一直觉得中国有个很大的市场就是中小商户的市场。</strong></p>\n<p>你不要觉得所有人都能办出信用卡，有的人办不出信用卡。</p>\n<p>今天的中小企业，尤其是小微企业能通过阿里贷款，我认为这件事情如果能真的彻底做好是非常大的市场，比做前端新零售强多了，后端解决零售里的现金流问题，是新零售的重要组成部分。</p>\n<blockquote>\n<p>摘自微信公众号笔记侠<a href=\"https://mp.weixin.qq.com/s/qzTjL5JSpKtMVtBzKT_VLw\" target=\"_blank\" rel=\"noopener\">10 亿人没有坐过飞机，00后存款是90后的两倍……颠覆你的58个认知</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>今天的这篇文章从反常识的数据开始谈起，基于<strong>中国的机遇与优势、实体经济、改变偏见，下沉市场、海外市场，新金融时代</strong>等板块，展开对新商业文明时代的看法。<br></p>","more":"</p>\n<p>在开启本篇的阅读前，大家先思考两个问题：</p>\n<blockquote>\n<p><code>1.你真的了解中国嘛？</code><br><code>2.你最看重的创业机会有哪些？</code></p>\n</blockquote>\n<h2 id=\"一、九个反常识的数据\"><a href=\"#一、九个反常识的数据\" class=\"headerlink\" title=\"一、九个反常识的数据\"></a>一、九个反常识的数据</h2><p><strong>① 全国约有 90% 以上的人没有喝过星巴克</strong></p>\n<p>这是我经过逻辑推理得出的。</p>\n<p>去年，星巴克宣布将 700 万星巴克会员接入支付宝。基于这个数据，我做了一系列推理。</p>\n<p>如果我们算每 7 个客户有一个开通会员，那么就是 4900 万，10 个里有 1 个是 7000 万。</p>\n<p>星巴克在上海的门店是最多的，500 家以上，这个城市 2500-3000 万的人口（含流动），三成喝过的话，是 900 万。</p>\n<p>中国目前星巴克的门店数是 3400 家，大多数覆盖在一二线城市。一线新一线二线（含广义二线）的人口总数不超过 3.6 亿，里面三成是 10800 万，2 成是 7200 万（越往下门店很少，渗透率很低，全量来看不超过 1.5 成，以上换算只提供思路，不代表最终实际数据。）</p>\n<p>因为我没有准确数据，我只能倒推，无论从哪个角度去倒推，<strong>90% 的人都没有喝过星巴克。</strong></p>\n<p>故而，知道并不等于喝过，并且一定有海量的人不知道星巴克。以上数据，依然是比较保守的推断。</p>\n<p><strong>② 50% 以上的中国人没有喝过农夫山泉</strong></p>\n<p>2016 年，农夫山泉的年销售额达到了 109.11 亿元，其中包含新产品和高端产品，桶装水，会议酒店供水等等。我一年可能要花 2400 元以上在农夫山泉上。</p>\n<p>按照这个销售额计算，<strong>假设客单价 20 元，那么只有 5 亿多人喝过农夫山泉。</strong></p>\n<p>《2018 全球品牌足迹报告》显示，农夫山泉消费者触及数达 3.35 亿。虽然农夫山泉的客单价不高，但是它的受众人群比较集中。</p>\n<p>故而，即使这个品牌是大众到不能再大众的了，依然不可能做到人人都喝。</p>\n<p><strong>③ 中国约有 1000 万人从事足疗行业</strong></p>\n<p>仅北京市就有 20 万人从事足疗，推算一下，中国有 661 个城市，那么 1000 万这个数字依然是保守的估计。</p>\n<p><strong>④ 13 亿人没有出过国</strong></p>\n<p>中国出入境管理局发布，2018 年全国有效的因私普通护照私有量为 1.3 亿本。也就是说，起码有 90% 的中国人没有出过国。</p>\n<p><strong>⑤ 10 亿人没有坐过飞机</strong></p>\n<p>为什么每次坐飞机的时候工作人员都会演示一遍安全操作？因为跟你一起坐飞机的人中，起码有一半人是第一次坐飞机。</p>\n<p>中国头等舱用户不超过 600 万，每年常旅客不超过 1500 万（年飞行超过 6 次的称为常旅客）。</p>\n<p>由此可以看出：在航空杂志投广告，其实就只有那 1500 万常旅客能看到。所以，航空业广告商做廉价产品是行不通的，只有针对那 1500 万人的产品和服务才能实现有效目的。</p>\n<p>国航的白金卡用户不超过 5 万人，听说东航不超过 5000 人（除了一些特殊渠道，一年盯着一个航空飞行 120 次经济舱，60 次商务舱，40 次洲际公务舱才能拿到这个白金卡）。</p>\n<p><strong>⑥ 中国最大的便利店不是全家，而是中石化旗下的易捷便利店</strong></p>\n<p>每一个中石化加油站旁边都有一个易捷便利店。</p>\n<p>目前是中国最大的便利店，有 25000 多家门店，《2018 中国便利店发展报告》显示，易捷便利店占全国便利店超过 20% 的份额，很难被超越。</p>\n<p><strong>⑦ 处于房地产中介金字塔塔尖的，通常是穿着拖鞋、汗衫的二房东</strong></p>\n<p>像上海静安区的一些小别墅，还有北京的四合院，都是少量不可再生的，往往这些房子很受欢迎，很多人喜欢租这样的房子。</p>\n<p>我们公司租的房子的二房东就是这样的人。</p>\n<p>早期做租赁的中介发现这一现象后，就把这些房子一套套收过来进行改装，进而成为二房东。</p>\n<p>我大概计算了一下，如果成为 20 套老别墅的二房东，每个月净利润可达 50 万，每套差价在 2-5 万之间，合同一签就是 10 年。</p>\n<p><strong>⑧ 进口猪蹄比国内猪蹄便宜 30%—50%</strong></p>\n<p>因为除了中国、德国等少数国家，全世界大多数人不吃猪蹄。在很多国家，猪蹄被当做废品处理，中国人把它收购拿回国内，比在国内采购还便宜。</p>\n<p><strong>⑨ 中国产的棉毛裤在西班牙可以卖 10 倍的价格</strong></p>\n<p>过去，欧洲人是不知道世界上还有个东西叫棉毛裤。</p>\n<p>中国有个小伙子，把浙江生产的内销不掉的棉毛裤拖到欧洲，在他们冬天特别冷的时候卖，卖得特别好。</p>\n<h2 id=\"二、中国的四大优势和巨大契机\"><a href=\"#二、中国的四大优势和巨大契机\" class=\"headerlink\" title=\"二、中国的四大优势和巨大契机\"></a>二、中国的四大优势和巨大契机</h2><p>如果这四点不发生根本性改变，那么我们依然是有巨大的机会。</p>\n<p><strong>① 中国具有全球最强的终端制造产业链和产业集群</strong></p>\n<p>有一次我去印度和埃及，带的是 iPhone 手机，手机上套了一个有 6 个玻璃镜头的手机壳，当地人都非常好奇，问我这是什么？他们根本没有见过这样的手机壳。</p>\n<p>6 个镜头的手机壳在中国被认为是低端制造，但其实它在全球属于中端制造了，因为全球绝大多数地区都无法生产出来。</p>\n<p>因为这个产品涉及的产业链和零部件非常多，而全世界也只有中国能够最高效、最低价、最批量地生产，并以最大规模的消耗掉。</p>\n<p>还有一个现象也很有趣，<strong>在中国南部和东部地区，有大量县城变成了一个个产业集群，</strong>整个县城都围绕着一个生意展开，在那里走几公里就能找到一切你需要的东西，但在别的国家，这可能是要跨国才能完成的。</p>\n<p>对中国制造我有一个基本的判断：中国是全球最强的中端制造大国，没有之一。任何一个国家无 30 年积累，无政策连贯性支持，无法取代中国中端制造的优势。</p>\n<p><strong>② 我们的劳动力已不是全球最便宜的，但是劳动力素质全球最高</strong></p>\n<p>现在只有中国的劳动力是最具有勤劳、刻苦精神的。越南、柬埔寨的劳动力确实便宜，非洲的劳动力更低，但是和中国相比，职业技能不可同日而语。</p>\n<p><strong>③ 我们依然是全球最大的消费市场</strong></p>\n<p>今天大部分中国人已经改变了储蓄的习惯，乐于消费。</p>\n<p><strong>④ 中国人是全球最渴望改变命运的</strong></p>\n<p>印度人都信印度教，印度教告诉你人分等级，这辈子好好修行，下辈子再升级到婆罗门。中国没有这样的教育，中国人都相信通过努力能过得更好一点。</p>\n<h2 id=\"三、在这里，读懂中国\"><a href=\"#三、在这里，读懂中国\" class=\"headerlink\" title=\"三、在这里，读懂中国\"></a>三、在这里，读懂中国</h2><p>关于人口，大多数人对其判断都是非常情绪化的，也是错误的。</p>\n<p>一些美国经济学家研究发现：长期高速的经济增长会对国民性格产生很多改变，他们会更乐观、更自信、更积极向上、更开放、更包容。</p>\n<p>而这些因素集中体现在今天中国的 00 后身上。</p>\n<p><strong>1. 很多农村地区幸福指数远高于城市</strong></p>\n<p>农村收入并不高，但他们有宅基地，有自留地，他们可以将自留地租出去，每年收取租金。某些地区，他们的幸福指数很高，远远高于发达地区。</p>\n<p>基于大量的观察发现，现在农村里种地的人很少，并且几乎都是机械化种植，很多人会外出打工。</p>\n<p>但是在他们眼里，大城市不是他们的世界，老了还是要回去，因为老家还有地。只要想到自己有土地，他们吃再多苦，都是乐意的。</p>\n<p><strong>2. 90 后到 00 后的消费观发生很大变化</strong></p>\n<p><strong>① 消费升级</strong></p>\n<p>90 后、00 后在社会认同感上的消费，在他们进入社会几年后就会和上一代人趋同，并且更愿意提前完成这种认同感的消费。</p>\n<p>他们中很多人的第一辆车一定不是雪佛兰，而是直接进入高端车的低配版，所以奔驰 C 系列、宝马 3 系、宝马 X1 都卖得特别好。</p>\n<p><strong>另外，奢侈品年轻化趋势非常明显。</strong>在中国，更多女生在 20 多岁左右就开始用 La Mer，而在欧美，更多成熟女性选择它，不仅仅是钱的问题。</p>\n<p>我认为 90 后的第一次装修是一波不可再生的资源，并且这波 90 后一定比后面的每一代人都多。</p>\n<p>对于装修来说，很多大件，包括家电、家居、甚至小家电，是不会随便更换的，而 90 后的结婚潮已经到来，虽然他们中有很多人选择了不婚和晚婚，但是在压力较小的三四线，这一波行情还是比较明显的。</p>\n<p>所以，<strong>一定要抓住 90 后的装修升级，如果错过了，可能三五年内都没有消费了。</strong></p>\n<p><strong>② 孤独催生商机</strong></p>\n<p>90 后比较懒，还有独生子女病，孤独将催生一大波的商机。</p>\n<p>孤独的年轻人喜欢养动物，他们会带宠物去按摩和游泳，等到他们出差的时候，会找个宠物店寄养，一个不到 1 平方米的地方 1 天要花 300 块。</p>\n<p>此外，还有专门的宠物殡葬，基于此，宠物市场一定还会扩大，并且每年快速增长。</p>\n<p><strong>③ 比起 KOL，他们更相信真实用户反馈</strong></p>\n<p>在腾讯提供的 00 后报告中，我们能够看到，KOL（关键意见领袖）的影响力在下降，比起 KOL，00 后更相信真实的用户反馈。</p>\n<p>对于所有品牌主来说，未来的投放会变得很难，因为你需要对接海量的超级用户，并且你要把他们当作一件很重要的事情去运营。</p>\n<p><strong>④ 对国产品牌的认知正在改变</strong></p>\n<p>今天，国产品牌并不比国外品牌差，这个问题在 00 后的心目中正在形成。</p>\n<p>主要有以下 3 个原因：</p>\n<p><strong>第一，中国制造真的在进步；</strong></p>\n<p>第二，大量国外品牌把落后的生产线丢到中国，现在才开始重视中国市场，但已经晚了，因为中国品牌的反应速度更快；</p>\n<p><strong>第三，00 后成长的年代就是民族自豪感产生的年代。</strong></p>\n<p>对于 00 后来说，他们向往在专注领域有深刻见解的品牌。</p>\n<p>老一代人恨不得一个产品具备所有功能，但是今天 00 后更喜欢专业领域的、垂直的、优秀的品牌。</p>\n<p><strong>⑤  00 后的存款是 90 后的两倍</strong></p>\n<p>虽然 00 后存款只有 1840 元，但 90 后更少，只有 800 元（数据来源于腾讯最新的 00 后研究报告）。</p>\n<p><strong>3.关于人口红利</strong></p>\n<p>我们总是很悲观地说人口红利没有了，其实只是分红方式发生了改变。</p>\n<p>现在的人口红利正在体现为地区性、结构性和微观性，每个地区不是统一统筹的。</p>\n<p>即使目前中国年轻劳动力更少了，但依然在绝对数量上超越了大多数国家，并且中国的劳动力具有素质跟薪资的平衡优势。</p>\n<p>不要老是觉得员工就应该给你干什么，这是错的。你首先要思考的是，你能为你的员工干什么，能帮助他们实现什么。</p>\n<p>也就是说，梦想要有，但回馈也要有。</p>\n<p><strong>4.劳动力总数还在增长</strong></p>\n<p>目前我国劳动力还没有衰退，去年农民工总数比上年增长了 0.6%。农民进一步从土地中解放出来。</p>\n<p>相比去年，城镇化进一步提高，按照这个趋势，我认为中国的城镇化率未来会像发达国家看齐，达到 70% 左右。</p>\n<p>第三季度农民工外出打工获得的收入平均 11130 元。但他们有自留地，还有宅基地。（以上数据全部来自于国家统计局 2018 年）</p>\n<h2 id=\"四、在这里，改变偏见\"><a href=\"#四、在这里，改变偏见\" class=\"headerlink\" title=\"四、在这里，改变偏见\"></a>四、在这里，改变偏见</h2><p>这里我们要分享一下看企业的方法论，我写了很多《在这里改变偏见》系列文章，看起来有的观点很出格，其实有一套严谨的体系。</p>\n<p><strong>1.看企业是有方法论的</strong></p>\n<p><strong>① 看顶层设计</strong></p>\n<p>顶层先设计好，设计不好后期很难发力。</p>\n<p><strong>② 看战术</strong></p>\n<p>战术要跟团队一起看，看团队，高层跟基层要分开看。</p>\n<p>员工都觉得老板是个骗子，不相信他的梦想，这是有问题的。你会发现，那些优秀的企业，起码有 30% 的员工非常相信老板，50% 的员工没有那么相信老板，但是觉得老板说得对，就跟着做。</p>\n<p>如果你的公司是这样，成功的概率会更高。</p>\n<p><strong>③ 看大市场</strong></p>\n<p>如果这个市场很小，你也很难做，所以大市场就是企业发展的天花板。</p>\n<p>机遇来自于时间窗口。每过一个阶段，社会要素都会发生变化，在变化的过程中，我们就能找到重新切入存量市场的最大机会。</p>\n<p><strong>④ 看执行</strong></p>\n<p>看执行是不是到位，如果执行不到位也是白干。</p>\n<p><strong>2.读过书的人认为的内容跟现实需要的内容一般是两回事</strong></p>\n<p>我们都说互联网是规模经济，其实互联网在一定程度上是反规模经济的。用户时长是有限的，很多公司都在抢，也就是说买用户的成本非常高，到一定程度后是反互联网规律的。</p>\n<p>趣头条之前聘请了很多优秀的编辑，这些编辑精选了很多文章推送给他们的用户，发现这些文章的点开率很低。</p>\n<p>后来他们把一篇广场舞教学的视频放到了第一位，而且全量推送给所有用户，点开率高达 10%，也就是说 10 个人中就有一个人看了。</p>\n<p>这件事告诉我们，<strong>很多时候读过书的人认为的内容跟群众需要的内容是两件事。</strong></p>\n<p><strong>3.品牌要做到用户洞察、留客、复购和裂变</strong></p>\n<p>最近腾讯的朋友告诉我，又有一些品牌通过小程序的投放实现快速的男装定制，月销 15 万单，单价 200 元。</p>\n<p>过去做这事很难，因为男人的钱很难赚，而想要找到他们也很难。</p>\n<p>这里面两个事情最关键，<strong>一是柔性供应链，二是精准投放。</strong>没有这两点，男装定制依然是个小而美的生意。</p>\n<p>当我们说到亲子类的账号，我们认为亲子类账号就应该卖婴儿纸尿裤、儿童玩具。但有赞的朋友告诉我，有赞上卖得最好的是零食，是大人用的东西。</p>\n<p>为什么呢？因为大人每天被孩子折磨得很痛苦，所以晚上会买一点东西给自己吃。所以我们很多时候对用户的理解是错误的，是偏差的。</p>\n<p>有一个网红直播卖白酒，销量是两三天上千万，客单价 900 元。这件事告诉我们，私域流量的时代已经到来了，你必须真正做好用户洞察。</p>\n<p>私域流量的运营跟传统投放有三个关键区别：<strong>留客、复购、裂变。</strong></p>\n<p>以前投放了，人过来了，买了，走了。现在是人进来了你得留住，留住之后让他反复买，反复买完之后你还得让他帮你拉人头，裂变。</p>\n<p>今天很多账号只有 2 万粉丝，在很多人眼里 2 万粉丝都不能叫规模，我甚至觉得 2 万粉丝是不可能赚到钱的。</p>\n<p>但他们通过做留客，发掘粉丝需求，做好复购、裂变，活得挺不错，这颠覆了我原来的认知。</p>\n<p><strong>4.价值百万的金属切割机在快手上卖掉了</strong></p>\n<p>在和快手沟通的时候，我发现一件很神奇的事情，价值百万的金属切割机在快手上卖掉了。</p>\n<p>过去大家一直以为互联网上只能卖便宜的、高频的、生活必须的东西。</p>\n<p>金属切割机是怎么卖掉的呢？他们的方式就是，放一台切割机让它运转，用它把金属球切下来，有一些厂商老板看到这个视频就买了。</p>\n<p>最主要的原因是，<strong>乡镇企业家都喜欢上快手，所以受众契合，并且这种视频非常直观，是带有销售能力的。</strong></p>\n<p>乡镇企业家采购设备，你跟他演示很多 PPT 是没有用的，他要看直观的效果。所以经常有人在快手上做暴力演示。</p>\n<p>一个人在快手上卖钓鱼竿，他用鱼竿钓一个 200 斤的桶在空中旋转，下面有人留言说 “这个钓鱼竿在哪里卖，我要买”。这就是效果广告，往往是简单粗暴的。</p>\n<p>全国快手播放量 TOP10 的乡镇，第一个是连云港的海头镇，那里有非常多的人通过直播卖鱼。</p>\n<p>这些案例给我们提供了一个逻辑：<strong>在不同的场景下可以做不同的事情，我们要大胆去思考很多问题。</strong></p>\n<h2 id=\"五、这是一个反智的时代\"><a href=\"#五、这是一个反智的时代\" class=\"headerlink\" title=\"五、这是一个反智的时代\"></a>五、这是一个反智的时代</h2><p><strong>1.书读多了反而让人变得反智</strong></p>\n<p>人读书多了，有时候会进入到一个奇怪的现象——反智。</p>\n<p>聪明人总是以为自己能搞懂一百种生意就能做好一百种生意，这是彻底错误的，你的一生只需要做好一件事情就可以了。</p>\n<p><strong>很多老板的反智出现在，主业都有问题了，还想通过副业救公司，</strong>这种情况 99% 是不可能的。</p>\n<p>当你的主业出现问题，你应该解决主业问题，而不是去搞副业。不要试图去做不符合你能力模型的业务。</p>\n<p>举个例子，我跟马英尧 (尚美生活 &amp; OneZone 创始人) 探讨过很多次小镇青年、下沉市场。</p>\n<p>我们能写出 10 万 +、100 万 +，只能证明我们写东西的能力强、总结能力强、逻辑强，不能证明我们去小镇就能做生意，所以不要去做跟你能力模型无关的事情。</p>\n<p>不足够热爱的事情你就无法掌握、经营它的本质。一定要热爱，热爱的时候你才能发现别人发现不了的东西。</p>\n<p><strong>2.不热闹的行业可能很赚钱</strong></p>\n<p><strong>很多人觉得这个行业不热闹，挣不到钱，这就是反智。</strong></p>\n<p>挣钱的人是不会告诉他们是挣钱的，更不会告诉你怎么挣钱。事实上，太过热闹的行业才是挣不到钱的，不热闹的行业多是挣钱的。</p>\n<p>我在广州认识一个老板，他在珠江口挖沙，利润相当可观。</p>\n<p>这个行业热闹吗？不热闹。但是这些才是挣钱的。</p>\n<p><strong>升级的成本要低于收入，</strong>这是一条常识。但今天很多人是没有这个常识的。</p>\n<p>比如你把门店升级的很高端，最后人家只来拍照，不买东西。这是最简单但最容易被忽略的生意的本质。</p>\n<p>很多行业的规律是 1%—2% 的企业是赚大钱的，18% 的企业是赚钱的，30% 的企业是持平的，50% 的企业是亏钱的，剩下不赚钱和亏钱的企业，天天在网上说行业走到头了。</p>\n<p><strong>3.大谈颠覆的人，往往对这个行业就了解 30%</strong></p>\n<p>当你对一个行业了解到 30% 的时候，你会觉得你发现了一个巨大的商机，你要颠覆这个行业。了解 70% 的时候，信心崩塌了，原来你所思考的一切问题已经有人思考过了。等你扛到 90% 的时候，你会发现你已经没有太多对手了，过了 95% 之后，你面对的只有几个玩家了。</p>\n<p>每个行业都有金线，我们一定要找到那条线，找不到你就永远不可能得道。</p>\n<p><strong>4.很多的悲观都是情绪化的悲观</strong></p>\n<p>在消费方面，我举一组例子：</p>\n<p>家里有两套房，兜里还有 100 万，贷款 300 万，股市套牢 50 万，心情很不好，但是该吃吃该喝喝什么都不少。</p>\n<p>家里一套房，兜里 50 万，没有贷款，上升无望，心情很不好，但是该吃还得吃该喝还得喝。</p>\n<p>家里没有房，兜里有 10 万，打算买房，但觉得有点远，但是该吃还得吃该喝还得喝。</p>\n<p><strong>很多的悲观都是情绪化的悲观。</strong></p>\n<p>看消费，看什么？看工业，看发电量，看高速公路。高速公路上没车了，发电量大幅度下降了，那可能真的有问题了。这些数值没有特别大的波动，大概率上问题还不是很大。</p>\n<p>清朝的时候，有一场战争叫雅克萨战役，俄国人跟大清打了一仗，后来清朝赢了，但赢得非常艰难。</p>\n<p>俄国当时已经装备了最先进的火枪，火枪队对清兵形成了很大的威胁。</p>\n<p>大清有大炮，最后大清用大量的红衣大炮压制住了火枪，但是大清没有意识到火枪才是更先进的装备。</p>\n<p>这个时代也是如此，<strong>很多时候企业最后看起来赢了，但依然是上一个时代的优势，</strong>你认为应该加强这个优势，但其实世界已经改变了。</p>\n<p>到下一个节点，你的大炮就是废铁了。</p>\n<p><strong>5.炫耀从不改变，只是方式发生了改变</strong></p>\n<p>今天，很多人觉得过了那个阶段，人就不会炫耀了。我觉得这是瞎说，你的 LOGO 是不见了，但是你每天都把儿子的私立学校挂在朋友圈。</p>\n<p>为什么你在上班的时候发的朋友圈都没有定位，但是到了普吉岛和洛杉矶都要带上定位？</p>\n<p>这都是炫耀。</p>\n<p>炫耀从来没有改变过，只是方法在不同的人群里有了一定变化。我们只要抓住这个变化就能找到一些规律。</p>\n<p><strong>6.靠勤快致富的行业都需要尊重本质</strong></p>\n<p>前段时间我写了一篇文章叫《世间没有新零售》，我认为世间没有 “新零售”，只是零售变新了。</p>\n<p>本质是零售，而不是新，本质性的问题从来没有变化过，租金、押金、账期、人员、招募、管理、培训、预防、物流仓储、周转率、坪效、人效，轰轰烈烈四年的新零售创业，只让中介、装修队和物业赚到了钱。</p>\n<p>线上线下打通对于大多数企业是不成立的，因为当你的用户不是全量用户的时候，两端用户是匹配不上的。</p>\n<p>中国目前很多行业都称为 “勤行”，所有靠勤快致富的行业都需要尊重本质。</p>\n<p>我以前开了十几家果汁店、餐厅，倒了一半，后来我得出结论，<strong>不是道理说得很明白你就能把事情做好。</strong></p>\n<p><strong>7.新人爱说跨界打击，基本上是跨界来被打击</strong></p>\n<p>跨界打击的前提是你要打的那个人，他会的你都会，他不会的你也会。</p>\n<p>他会的你不会，还没到你的时候，你就被他打败了。</p>\n<p>社会零售的总需求增长已经放慢，慢于渠道分化的速度，这就意味着五年之内很多渠道将彻底垮了，崩塌了。</p>\n<p><strong>8.消费升级也体现在更精简的 SKU（库存量单位）</strong></p>\n<p>最近网易严选之所以出了很多问题，是因为它的 SKU 更多，其实它应该做更少的 SKU 满足 80% 的需求，而不是为了那 20% 的需求去制造 80% 的麻烦，这是很重要的。</p>\n<p>很多时候花里胡哨的东西只能满足一小群人。</p>\n<p>京东京造上有一个很重要的品种，叫乳胶枕，卖得特别好。</p>\n<p>今天，我们对国货的信任度正在快速提高，在京东平台上，<strong>男性的转化率高于女性，尤其是在这种类型的消费升级。</strong></p>\n<p><strong>9.直播最重要的不是直播，是叫大哥</strong></p>\n<p>制造垃圾快乐是当下最高效的吸金方式，小程序算命、逆袭小说、小姐姐直播，大家都喜欢看。</p>\n<p>什么样的人最喜欢在直播平台打赏？就是有钱但是平时生活里没有人重视的人。</p>\n<p>这个秘密我是怎么知道的？当年我开店的时候，跟一个包工头老板聊天，他说他一年打赏花了 10 万，但他是他们圈子里打赏最少的，其他人打赏都是 100 万起步。</p>\n<p>后来我研究了一下，那些包工头每年能赚几百万，甚至几千万。但是在工商界，很多人都觉得他们比较 LOW，不能上台面，他们很失落，所以他们喜欢去直播平台打赏。</p>\n<p>很多人为了被口播，会花大量的钱，在直播平台，他们能获得尊重和荣耀。所以直播的本质是口播，而不是直播。</p>\n<h2 id=\"六、再看实体经济\"><a href=\"#六、再看实体经济\" class=\"headerlink\" title=\"六、再看实体经济\"></a>六、再看实体经济</h2><p>实体经济，实体品牌，只要本质不发生改变，就永远会有喜新厌旧、物极必反的机会。</p>\n<p>举个例子，前几年女生喜欢买蔻驰的包，结果地铁一打开，一节车箱出现了 10 个蔻驰。</p>\n<p>于是她们找到了下一个品牌，过了一年半载，地铁打开又是 10 个这个品牌，她们又去换别的牌子，这就叫物极必反，喜新厌旧。</p>\n<p>新国货崛起两条路最靠谱：</p>\n<p>第一个是主打性价比，高质量、高逼格、中低价格；第二个是主打圈层高、质量高价格。</p>\n<p><strong>1.工厂的转型之路</strong></p>\n<p>今天的中国工厂，过得好的有两种：</p>\n<p><strong>一种是做短线，做高质量、低价格、**</strong>针对 C2M（顾客对工厂）模式的产品，**然后通过各种平台快速消化，只有这样才能保持产线运作、保持工厂流水。但是没有品牌只能解近渴。</p>\n<p><strong>一种是做长线，做高逼格、低价格的品牌。</strong>也就是在初期用规模换空间，用规模降成本，中期要思考如何做成一个品牌。</p>\n<p>但是，做长线的企业里，大部分工厂很难出品牌。因为没有这样的基因，它的顶层设计和团队都是错的。</p>\n<p>比如高薪挖来一个人做品牌，又不很信任，也不放权，非要用自己的产线思维去管人家的品牌思维，这也是不行的。所以基本上能实现迭代的工厂仍旧不多。</p>\n<p><strong>2.四类产品的降维打法</strong></p>\n<p>我们可以通过一个区隔方式把产品分成四种：</p>\n<p><strong>① 功能属性的产品优衣库化</strong></p>\n<p>什么叫做优衣库化？优衣库最早进入美国市场的时候开在沃尔玛边上，因为开在乡下没有人买，觉得这是很 LOW。</p>\n<p>优衣库是做怎么起来的？它把重金花在了最好的街头，开最好的旗舰店，打造一个中产阶级偏高的象征的东西和品质感，但是它的价格是偏低的。把快消品的功能性做成一种符号，一种腔调，才能赢得人心。</p>\n<p><strong>② 身份属性的产品奢侈品化</strong></p>\n<p>身份属性的产品奢侈化，但是它是功能属性为主。</p>\n<p>我觉得功能属性就是即使性价比很强，也很难成为企业家需要的东西，或中产阶级偏上及中产需要的东西。</p>\n<p>这里必须去打造你的区隔感，身份属性的东西要做的高级，要有奢侈品的感觉。</p>\n<p><strong>③ 高频消耗品上瘾化</strong></p>\n<p>高频的消耗品一定要带有一定的上瘾化，如果你不能上瘾，不能形成某一种触觉和连接的感觉，你是很难做好这个生意的。</p>\n<p>举个例子，很多人抽烟并不是为了抽烟，他就喜欢手里有个东西，让它成为一种衍生的器官。创造上瘾的特性很重要。</p>\n<p>牙膏在最早推出的时候不起泡沫，但产品经理发现，如果没有泡泡、没有薄荷味道，很难让人上瘾，觉得牙膏没效果。所以牙膏有泡泡、很清凉，消费者觉得这样才有效，产品就普及了。</p>\n<p>也就是说，你的产品可以加一点没有实际作用、但能让人上瘾的东西。</p>\n<p><strong>④ 低频耐耗品信仰化</strong></p>\n<p>今天很多大家电其实是属于耐耗品，一定要有信仰、有圈层。</p>\n<p><strong>2.行业现象</strong></p>\n<p><strong>① 卤制品</strong></p>\n<p>中国卤制品行业是一个高度分散的行业，行业研报数据是 2500 亿，但是因为有大量不开票的现象（菜场、小作坊、路边摊等等），所以业内甚至有人预估是 8000 亿。</p>\n<p>绝味鸭脖是行业头部企业，大概一年 40 亿营收。所以这是一个离散度很高的产业。也就是说：你还有机会在一个地区生产出一个几个亿的卤制品品牌。</p>\n<p><strong>② 乘用车</strong></p>\n<p>目前中国的乘用车市场遇到一个很重要的问题，产量和销量的差值正在扩大，意味着大量库存的产生。怎么解决？</p>\n<p>我有两个想法，首先中低产线的车可能会通过更好的网约车制度解决，让车更好的共享。其次，走向海外。非洲都是日韩品牌车为主，中国车在那里的市场份额并没有我们想象中的大。</p>\n<p><strong>③ 美发店、推拿</strong></p>\n<p>如果不是从基层爬起来的，创业的成功概率低于 10%。</p>\n<p><strong>④ 家纺</strong></p>\n<p>过去我们总认为纺织业已经没有任何利润了，这是错的，安踏毛利率 52.6%，净利率 24.9%。</p>\n<p>申洲国际做代工，毛利率 31.6%，净利率能达 24.8%，耐克是它最大的客户之一，都没它高。全球大多数的运动类顶级品牌都是它代工的。</p>\n<p>申洲国际告诉我们一件事，实体产业做到极致的时候，就拥有了话语权跟绝对优势。</p>\n<p>很多工厂比申洲国际更便宜，但是不能大规模的出货，能大规模出货不能垫得起那么多的钱，能垫得起那么多钱，很难保证大规模出货的质量是稳定的。这是实体经济的壁垒，跟互联网说的壁垒是两件事情。</p>\n<p><strong>⑤ 酱油和醋</strong></p>\n<p>中国 TOP1 的酱油公司是海天酱油，截止到 4 月 17 日市值 2327 亿，总占有率是 18%，净利率是 30.5%。也就是说，很赚钱的是实体产业，比如酱油这种不怎么起眼的行业。</p>\n<p><strong>⑥ 食品类跨国企业</strong></p>\n<p>全球 TOP1 食品类跨国企业是雀巢，它收购了大量企业，但是那些企业并没有用雀巢这个名字。</p>\n<p>去年，雀巢在全球有 6000 多亿人民币销售额，净利润 670 亿。</p>\n<p>所以我一直强调的是：<strong>我们要敬畏国际的巨头。</strong></p>\n<p>你融了一个亿就觉得自己牛，但是人家一年利润 670 亿，一天接近两个亿，这就是人家造钱的速度，十年之功不可能一日形成的。</p>\n<p><strong>⑦ 内衣</strong></p>\n<p>有一个品牌叫 Lululemon，最早做女性运动内衣，现在也做男性产品。</p>\n<p>Lululemon 给品牌赋予精神、赋予圈层感、赋予科技感。我在五年前去香港，在时代广场看到 Lululemon 旗舰店，层高最高都七八米，跟苹果旗舰店差不多。</p>\n<p><strong>⑧ 海底捞</strong></p>\n<p>以前我们是向所有人做一种生意，现在是围绕着一群人做所有生意。</p>\n<p>海底捞给我们的启示是，什么部门都能赚钱。海底捞把财务部门做成了财务咨询公司，工程部顺便给别人搞装修，火锅调料也单独上市了。</p>\n<p>这个时代要充分的挖掘你公司现有的能力，快速把它变成赚钱的东西。</p>\n<p><strong>3.品牌溢价</strong></p>\n<p>人会为了巨大的快感支付超额的溢价，但是每个人的快感来源是不大一样的。</p>\n<p>男人可以为三件事情付钱，快感、存在感、认同感。如果你给男性做产品没有这三个标准，不能说你做不好，你捞不到最多的钱。</p>\n<p>我们一定要想清楚，头等舱休息室里的咖啡不好喝，面也不好吃。但是为什么那么多人就要待在那里喝咖啡？这里有很多内心的真实的洞察，我们一定要想明白，这对于做品牌非常重要。</p>\n<h2 id=\"七、再看下沉市场\"><a href=\"#七、再看下沉市场\" class=\"headerlink\" title=\"七、再看下沉市场\"></a>七、再看下沉市场</h2><p>一线的人最大的问题就是从来不会迈出他的 CBD 半步，但是每天思考怎么去赚那些人的钱。这根本就难以实现。</p>\n<p>这里分享几个关于下沉市场的观点和事实。</p>\n<p><strong>1.二线跟三线是两类城市，不要混在一起说</strong></p>\n<p>二线都有产业聚集，就业岗位明显高于三线城市，所以二线对人才的吸附能力是三线的很多倍。</p>\n<p><strong>2.三线城市新城区和老城区泾渭分明</strong></p>\n<p>比如泉州，老城区特别古老，我在那里的感觉就是回到了 80 年代。但是它的新城，万达广场特别大，万达在边上盖了一个特别大的小区，里面什么品牌都有，和上海的 CBD 没什么区别。</p>\n<p><strong>3.消费品市场的喜好是完全不一样的</strong></p>\n<p>玖姿这个品牌的定位就是卖给小镇贵妇，就是下沉市场的中产女性的品牌。但是我打听了一圈，一线基本没人知道。</p>\n<p>在农村，80 寸电视机卖得非常好。但一线城市家里放不下 80 寸的电视机。因为中国一线的年轻人都是租的房子，没有客厅。</p>\n<p><strong>4.存量改造是一门巨大的生意</strong></p>\n<p>包括 4S 店改造、酒店改造、家居行业改造、零售改造、家电 3C 的改造。</p>\n<p>一、二线城市现在 3.6 亿人口，4.75 亿手机，人均 1.3 台，下沉市场人均 0.5 台，两个人里还有一个人没有手机。</p>\n<p><strong>5.理性认识小镇青年</strong></p>\n<p>中国过去 40 年的发展来自于三点：<strong>全球化、工业化和城市化。</strong></p>\n<p>改革开放之初，中国不超过 5% 的人是城里人，95% 以上的人都是小镇青年，即使今天身份证上是北京人，是城市人，但是内心骨子里依然有小镇青年的影子，这是品牌必须理解的一件事情，用数据系统打标是不能解决所有的洞察问题。</p>\n<p>总结一句，所有品牌的升级都是围绕一句话完成的：<strong>渴望和大城市的人一样。</strong></p>\n<p>另外如果今天你还指望跟我聊下沉市场，而不是自己去看，那么这个生意已经跟你没有什么大关系了。</p>\n<h2 id=\"八、出海再造一个经济体\"><a href=\"#八、出海再造一个经济体\" class=\"headerlink\" title=\"八、出海再造一个经济体\"></a>八、出海再造一个经济体</h2><p><strong>1.出海并非单纯复制</strong></p>\n<p>中国的出海分两种：</p>\n<p>一种是以中国为母本向海外输出，一种是直接以海外为母体。</p>\n<p>以印度为例。</p>\n<p>一直在说印度是下一个中国，我认为这是一件低概率事件。</p>\n<p>有一组数据很重要，三四年前，中国、印度、越南全国年龄中位数，中国已经是 37 岁，今年差不多 40 岁，但是印度只有 30.4 岁，越南更小只有 26.7 岁。</p>\n<p>印度的 GDP 只有 2 万亿，中国是 13 万亿，还没有到中国的零头。人均 GDP 目前刚突破 1900 美元，但它的人口结构跟中国改革初期是差不多的。</p>\n<p>有一个更值得我们现在关心的市场叫做东南亚市场。</p>\n<p>东南亚 11 个国家最富的是新加坡，最穷的是缅甸，新加坡除以缅甸，人均 GDP 差了 46.7 倍。区域市场差异相当大。</p>\n<p><strong>2.出海非洲的 “坑”</strong></p>\n<p>非洲是一个复杂的多元化的市场，非洲的总体经济，由北向南越来越差。</p>\n<p>非洲的坑在哪里？它的单体存量很小，市场很分散，所以我们要做的是什么？简单的可复制的生意是做不了的。</p>\n<p>在非洲有一个品牌做得特别好，叫传音。</p>\n<p>它是如何进入非洲市场的？</p>\n<p>首先它从尼日利亚开始做，发现非洲电力供应不是很稳定，手机充电会很麻烦，于是它把手机电池做成 3000 毫安。</p>\n<p>同时少标一点容量，这会让别人觉得你的电力特别持久。</p>\n<p>其次，非洲经济比较拮据，人们会使用多个电话卡，因为有优惠套餐，传音成了第一家把双卡双待、四卡四待引入到非洲的企业。</p>\n<p>富贵和贫穷是一样的，都会限制人们的眼界和思考能力。</p>\n<h2 id=\"九、新金融时代\"><a href=\"#九、新金融时代\" class=\"headerlink\" title=\"九、新金融时代\"></a>九、新金融时代</h2><p><strong>巨量的隐形市场</strong></p>\n<p>未来的公司，没点金融能力都不能叫公司了。积分化、证券化、金融化是重要的方向。</p>\n<p>积分、里程是一个巨大的市场。美国运通每年向美国航空集团采购积分要花 10 亿美金。</p>\n<p>信用飞这家公司正在做的便是如何将中国几十家航空公司的积分能够打通，这件事如果做成了就会变成一个巨大的生意。</p>\n<p>携程，现在最赚钱的业务是卖保险。别小看卖延误险，它的利润特别高。</p>\n<p>在中国民营企业里，蚂蚁金服应该是在金融层面做的最好的之一。蚂蚁金服好在哪里呢？它在向线下延伸的时候，向小业主延伸，除了前端收款，后端还放贷。</p>\n<p><strong>我一直觉得中国有个很大的市场就是中小商户的市场。</strong></p>\n<p>你不要觉得所有人都能办出信用卡，有的人办不出信用卡。</p>\n<p>今天的中小企业，尤其是小微企业能通过阿里贷款，我认为这件事情如果能真的彻底做好是非常大的市场，比做前端新零售强多了，后端解决零售里的现金流问题，是新零售的重要组成部分。</p>\n<blockquote>\n<p>摘自微信公众号笔记侠<a href=\"https://mp.weixin.qq.com/s/qzTjL5JSpKtMVtBzKT_VLw\" target=\"_blank\" rel=\"noopener\">10 亿人没有坐过飞机，00后存款是90后的两倍……颠覆你的58个认知</a></p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwkhgipk0000coc4j39kytzx","category_id":"cjwkhgipq0002coc4gcsqjlkx","_id":"cjwkhgiq20009coc4965mg68t"},{"post_id":"cjwkhgipo0001coc442aasi0o","category_id":"cjwkhgiq00007coc4u6lv57nx","_id":"cjwkhgiq5000fcoc4qprmizik"},{"post_id":"cjwkhgipt0004coc41a9lq39s","category_id":"cjwkhgiq00007coc4u6lv57nx","_id":"cjwkhgiq6000icoc4yywgwprf"},{"post_id":"cjwkhgipv0005coc47ctxy74u","category_id":"cjwkhgiq00007coc4u6lv57nx","_id":"cjwkhgiq6000lcoc4r1q0s401"},{"post_id":"cjwkhgipy0006coc4pslle4cn","category_id":"cjwkhgiq6000hcoc4r8ic0nik","_id":"cjwkhgiq7000ococ4lk8eqrc2"}],"PostTag":[{"post_id":"cjwkhgipk0000coc4j39kytzx","tag_id":"cjwkhgipt0003coc4hldydj54","_id":"cjwkhgiq4000ccoc4vkxi8w21"},{"post_id":"cjwkhgipk0000coc4j39kytzx","tag_id":"cjwkhgiq10008coc4qg7a10oj","_id":"cjwkhgiq4000dcoc4qpkq7nd1"},{"post_id":"cjwkhgipo0001coc442aasi0o","tag_id":"cjwkhgiq2000bcoc4eqrft2ow","_id":"cjwkhgiq6000kcoc4riyg0qjw"},{"post_id":"cjwkhgipo0001coc442aasi0o","tag_id":"cjwkhgiq5000gcoc4s72my1aq","_id":"cjwkhgiq6000mcoc4ol3cfooo"},{"post_id":"cjwkhgipt0004coc41a9lq39s","tag_id":"cjwkhgiq6000jcoc4j3kxv3w1","_id":"cjwkhgiq7000qcoc4wphme6sj"},{"post_id":"cjwkhgipt0004coc41a9lq39s","tag_id":"cjwkhgiq6000ncoc41btq6ebq","_id":"cjwkhgiq7000rcoc4onoquf0g"},{"post_id":"cjwkhgipv0005coc47ctxy74u","tag_id":"cjwkhgiq2000bcoc4eqrft2ow","_id":"cjwkhgiq8000tcoc4rh8fr54b"},{"post_id":"cjwkhgipy0006coc4pslle4cn","tag_id":"cjwkhgiq7000scoc4qxm3w5lb","_id":"cjwkhgiq8000vcoc4zp227v2e"},{"post_id":"cjwkhgipy0006coc4pslle4cn","tag_id":"cjwkhgiq8000ucoc4jqifkzmc","_id":"cjwkhgiq9000wcoc4n4gbjoj5"}],"Tag":[{"name":"笔记","_id":"cjwkhgipt0003coc4hldydj54"},{"name":"观点","_id":"cjwkhgiq10008coc4qg7a10oj"},{"name":"数据库","_id":"cjwkhgiq2000bcoc4eqrft2ow"},{"name":"redis","_id":"cjwkhgiq5000gcoc4s72my1aq"},{"name":"消息队列","_id":"cjwkhgiq6000jcoc4j3kxv3w1"},{"name":"设计","_id":"cjwkhgiq6000ncoc41btq6ebq"},{"name":"创业","_id":"cjwkhgiq7000scoc4qxm3w5lb"},{"name":"思路","_id":"cjwkhgiq8000ucoc4jqifkzmc"}]}}